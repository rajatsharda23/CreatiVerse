{
  "version": 3,
  "sources": ["../../../sanity/src/desk/components/RenderActionCollectionState.tsx", "../../../sanity/src/desk/components/RenderBadgeCollectionState.tsx", "../../../sanity/src/desk/components/paneRouter/PaneRouterProvider.tsx", "../../../sanity/src/desk/components/pane/helpers/_calcPaneResize.ts", "../../../sanity/src/desk/components/pane/helpers/_getDOMPath.ts", "../../../sanity/src/desk/components/pane/helpers/_sortElements.ts", "../../../sanity/src/desk/components/pane/paneLayoutController.ts", "../../../sanity/src/desk/components/pane/PaneLayout.tsx", "../../../sanity/src/desk/panes/document/documentInspector/DocumentInspectorPanel.tsx", "../../../sanity/src/desk/structureResolvers/PaneResolutionError.ts", "../../../sanity/src/desk/structureResolvers/assignId.ts", "../../../sanity/src/desk/structureResolvers/memoBind.ts", "../../../sanity/src/desk/structureResolvers/createPaneResolver.ts", "../../../sanity/src/desk/structureResolvers/resolveIntent.ts", "../../../sanity/src/desk/structureResolvers/createResolvedPaneNodeStream.ts", "../../../sanity/src/desk/structureResolvers/useResolvedPanes.ts", "../../../sanity/src/desk/components/deskTool/intentResolver/utils.ts", "../../../sanity/src/desk/components/deskTool/intentResolver/IntentResolver.tsx", "../../../sanity/src/desk/components/deskTool/StructureError.tsx", "../../../sanity/src/desk/panes/unknown/UnknownPaneType.tsx", "../../../sanity/src/desk/panes/loading/getWaitMessages.ts", "../../../sanity/src/desk/panes/loading/LoadingPane.tsx", "../../../sanity/src/desk/panes/DeskToolPane.tsx", "../../../sanity/src/desk/panes/error/ErrorPane.tsx", "../../../sanity/src/desk/panes/document/DocumentOperationResults.tsx", "../../../sanity/src/desk/useDeskToolSetting.ts", "../../../sanity/src/desk/panes/document/inspectDialog/constants.ts", "../../../sanity/src/desk/panes/document/inspectDialog/helpers.ts", "../../../sanity/src/desk/panes/document/inspectDialog/InspectDialog.styles.tsx", "../../../sanity/src/desk/panes/document/inspectDialog/Search.tsx", "../../../sanity/src/desk/panes/document/inspectDialog/InspectDialog.tsx", "../../../sanity/src/desk/panes/document/documentPanel/ReferenceChangedBanner.tsx", "../../../sanity/src/desk/panes/document/documentPanel/PermissionCheckBanner.tsx", "../../../sanity/src/desk/panes/document/documentPanel/documentViews/useConditionalToast.ts", "../../../sanity/src/desk/panes/document/documentPanel/documentViews/FormView.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentHeaderTabs.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentHeaderTitle.tsx", "../../../sanity/src/desk/panes/document/documentPanel/header/DocumentPanelHeader.tsx", "../../../sanity/src/desk/panes/document/documentPanel/DocumentPanel.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/constants.ts", "../../../sanity/src/desk/panes/document/statusBar/dialogs/ConfirmDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/ModalDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/dialogs/PopoverDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/ActionStateDialog.tsx", "../../../sanity/src/desk/panes/document/statusBar/ActionMenuButton.tsx", "../../../sanity/src/desk/panes/document/statusBar/DocumentStatusBarActions.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/DocumentBadges.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/PublishStatus.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/ReviewChangesButton/AnimatedStatusIcon.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/ReviewChangesButton/ReviewChangesButton.tsx", "../../../sanity/src/desk/panes/document/statusBar/sparkline/DocumentSparkline.tsx", "../../../sanity/src/desk/panes/document/statusBar/DocumentStatusBar.tsx", "../../../sanity/src/desk/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx", "../../../sanity/src/desk/panes/document/DocumentPane.tsx", "../../../sanity/src/desk/components/deskTool/NoDocumentTypesScreen.tsx", "../../../sanity/src/desk/components/deskTool/DeskTool.tsx", "../../../sanity/src/desk/components/deskTool/DeskToolBoundary.tsx"],
  "sourcesContent": ["import React from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: DocumentActionProps\n  children: (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  onActionComplete?: () => void\n}\n\n/** @internal */\nexport const RenderActionCollectionState = (props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete} = props\n\n  return (\n    <GetHookCollectionState onReset={onActionComplete} hooks={actions} args={actionProps}>\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import React from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  onActionComplete?: () => void\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = (props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps, ...rest} = props\n\n  return (\n    <GetHookCollectionState {...rest} hooks={badges} args={badgeProps}>\n      {children}\n    </GetHookCollectionState>\n  )\n}\n", "import {omit} from 'lodash'\nimport React, {useCallback, useMemo} from 'react'\nimport {toString as pathToString} from '@sanity/util/paths'\nimport {RouterPaneGroup, RouterPanes, RouterPaneSibling} from '../../types'\nimport {ChildLink} from './ChildLink'\nimport {BackLink} from './BackLink'\nimport {ReferenceChildLink} from './ReferenceChildLink'\nimport {PaneRouterContext} from './PaneRouterContext'\nimport {ParameterizedLink} from './ParameterizedLink'\nimport {PaneRouterContextValue} from './types'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nconst emptyArray: never[] = []\n\n/**\n * @internal\n */\nexport function PaneRouterProvider(props: {\n  children: React.ReactNode\n  flatIndex: number\n  index: number\n  params: Record<string, string | undefined>\n  payload: unknown\n  siblingIndex: number\n}) {\n  const {children, flatIndex, index, params, payload, siblingIndex} = props\n  const {navigate, navigateIntent} = useRouter()\n  const routerState = useRouterState()\n  const routerPaneGroups: RouterPaneGroup[] = useMemo(\n    () => (routerState?.panes || emptyArray) as RouterPanes,\n    [routerState?.panes]\n  )\n\n  const groupIndex = index - 1\n\n  const modifyCurrentGroup = useCallback(\n    (modifier: (siblings: RouterPaneGroup, item: RouterPaneSibling) => RouterPaneGroup) => {\n      const currentGroup = routerPaneGroups[groupIndex] || []\n      const currentItem = currentGroup[siblingIndex]\n      const nextGroup = modifier(currentGroup, currentItem)\n      const nextPanes = [\n        ...routerPaneGroups.slice(0, groupIndex),\n        nextGroup,\n        ...routerPaneGroups.slice(groupIndex + 1),\n      ]\n      const nextRouterState = {...(routerState || {}), panes: nextPanes}\n\n      setTimeout(() => navigate(nextRouterState), 0)\n\n      return nextRouterState\n    },\n    [groupIndex, navigate, routerPaneGroups, routerState, siblingIndex]\n  )\n\n  const setPayload: PaneRouterContextValue['setPayload'] = useCallback(\n    (nextPayload) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, payload: nextPayload},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex]\n  )\n\n  const setParams: PaneRouterContextValue['setParams'] = useCallback(\n    (nextParams) => {\n      modifyCurrentGroup((siblings, item) => [\n        ...siblings.slice(0, siblingIndex),\n        {...item, params: nextParams},\n        ...siblings.slice(siblingIndex + 1),\n      ])\n    },\n    [modifyCurrentGroup, siblingIndex]\n  )\n\n  const handleEditReference: PaneRouterContextValue['handleEditReference'] = useCallback(\n    ({id, parentRefPath, type, template}) => {\n      navigate({\n        panes: [\n          ...routerPaneGroups.slice(0, groupIndex + 1),\n          [\n            {\n              id,\n              params: {template: template.id, parentRefPath: pathToString(parentRefPath), type},\n              payload: template.params,\n            },\n          ],\n        ],\n      })\n    },\n    [groupIndex, navigate, routerPaneGroups]\n  )\n\n  const ctx: PaneRouterContextValue = useMemo(\n    () => ({\n      // Zero-based index (position) of pane, visually\n      index: flatIndex,\n\n      // Zero-based index of pane group (within URL structure)\n      groupIndex,\n\n      // Zero-based index of pane within sibling group\n      siblingIndex,\n\n      // Payload of the current pane\n      payload,\n\n      // Params of the current pane\n      params,\n\n      // Whether or not the pane has any siblings (within the same group)\n      hasGroupSiblings: routerPaneGroups[groupIndex]\n        ? routerPaneGroups[groupIndex].length > 1\n        : false,\n\n      // The length of the current group\n      groupLength: routerPaneGroups[groupIndex] ? routerPaneGroups[groupIndex].length : 0,\n\n      // Current router state for the \"panes\" property\n      routerPanesState: routerPaneGroups,\n\n      // Curried StateLink that passes the correct state automatically\n      ChildLink,\n\n      // Curried StateLink that pops off the last pane group\n      BackLink,\n\n      // A specialized `ChildLink` that takes in the needed props to open a\n      // referenced document to the right\n      ReferenceChildLink,\n\n      // Similar to `ReferenceChildLink` expect without the wrapping component\n      handleEditReference,\n\n      // Curried StateLink that passed the correct state, but merges params/payload\n      ParameterizedLink,\n\n      // Replaces the current pane with a new one\n      replaceCurrent: (opts = {}): void => {\n        modifyCurrentGroup(() => [\n          {id: opts.id || '', payload: opts.payload, params: opts.params || {}},\n        ])\n      },\n\n      // Removes the current pane from the group\n      closeCurrent: (): void => {\n        modifyCurrentGroup((siblings, item) =>\n          siblings.length > 1 ? siblings.filter((sibling) => sibling !== item) : siblings\n        )\n      },\n\n      // Duplicate the current pane, with optional overrides for payload, parameters\n      duplicateCurrent: (options): void => {\n        modifyCurrentGroup((siblings, item) => {\n          const duplicatedItem = {\n            ...item,\n            payload: options?.payload || item.payload,\n            params: options?.params || item.params,\n          }\n\n          return [\n            ...siblings.slice(0, siblingIndex),\n            duplicatedItem,\n            ...siblings.slice(siblingIndex),\n          ]\n        })\n      },\n\n      // Set the view for the current pane\n      setView: (viewId) => {\n        const restParams = omit(params, 'view')\n        return setParams(viewId ? {...restParams, view: viewId} : restParams)\n      },\n\n      // Set the parameters for the current pane\n      setParams,\n\n      // Set the payload for the current pane\n      setPayload,\n\n      // Proxied navigation to a given intent. Consider just exposing `router` instead?\n      navigateIntent,\n    }),\n    [\n      flatIndex,\n      groupIndex,\n      handleEditReference,\n      modifyCurrentGroup,\n      navigateIntent,\n      params,\n      payload,\n      routerPaneGroups,\n      setParams,\n      setPayload,\n      siblingIndex,\n    ]\n  )\n\n  return <PaneRouterContext.Provider value={ctx}>{children}</PaneRouterContext.Provider>\n}\n", "import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {PaneConfigOpts, PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n", "/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n", "import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n", "import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {PaneConfigOpts, PaneData, PaneResizeCache, PaneResizeData} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n", "import {CardProps, useElementRect} from '@sanity/ui'\nimport React, {useMemo, useState, useEffect} from 'react'\nimport {PaneLayoutContext} from './PaneLayoutContext'\nimport {PaneLayoutContextValue} from './types'\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, PaneLayoutState} from './paneLayoutController'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const controller = useMemo(() => createPaneLayoutController(), [])\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing]\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n", "import React, {ReactElement, createElement, useCallback} from 'react'\nimport {Box} from '@sanity/ui'\nimport {usePane} from '../../../components'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Resizable} from './Resizable'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(props: DocumentInspectorPanelProps): ReactElement | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useDeskTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const element = createElement(inspector.component, {\n    onClose: handleClose,\n    documentId,\n    documentType,\n  })\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n", "import {RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n", "import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n", "/* eslint-disable @typescript-eslint/ban-types */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never}\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n", "import {from, isObservable, Observable, of as observableOf, Subscribable} from 'rxjs'\n\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\n\nimport {PaneNode, RouterPaneSiblingContext, UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\nimport {isRecord} from 'sanity'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount()\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex))\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      })\n    )\n  )\n\n  return resolvePane\n}\n", "import {omit} from 'lodash'\nimport {firstValueFrom, Observable} from 'rxjs'\nimport {PaneNode, RouterPanes, RouterPaneSiblingContext, UnresolvedPaneNode} from '../types'\nimport {StructureContext} from '../structureBuilder'\nimport {assignId} from './assignId'\nimport {memoBind} from './memoBind'\nimport {createPaneResolver, PaneResolverMiddleware} from './createPaneResolver'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          })\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {Observable, NEVER, of as observableOf, concat} from 'rxjs'\nimport {switchMap, map, scan, distinctUntilChanged, pairwise, startWith} from 'rxjs/operators'\nimport {\n  DocumentPaneNode,\n  PaneNode,\n  RouterPaneSiblingContext,\n  RouterPanes,\n  RouterPaneSibling,\n  PaneNodeResolver,\n  UnresolvedPaneNode,\n} from '../types'\nimport {StructureContext} from '../structureBuilder'\nimport {assignId} from './assignId'\nimport {createPaneResolver, PaneResolver, PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown}\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes]))\n        )\n      })\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          }))\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      })\n    )\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[]\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    })\n  )\n}\n", "import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {LOADING_PANE} from '../constants'\nimport {RouterPanes, PaneNode, RouterPaneGroup} from '../types'\nimport {useDeskTool} from '../useDeskTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\nimport {RouterState, useRouter} from 'sanity/router'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined>\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\ninterface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const routerStateSubject = useMemo(() => new ReplaySubject<RouterState>(1), [])\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject]\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useDeskTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      })\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n", "import {uuid} from '@sanity/uuid'\nimport {first} from 'rxjs/operators'\nimport {firstValueFrom, Observable} from 'rxjs'\nimport {PaneResolutionError} from '../../../structureResolvers'\nimport {getPublishedId, DocumentStore} from 'sanity'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n", "import {memo, useCallback, useEffect, useState} from 'react'\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {ensureDocumentIdAndType} from './utils'\nimport {useRouter, useRouterState} from 'sanity/router'\nimport {isRecord, useDocumentStore} from 'sanity'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, [])\n  )\n  const {rootPaneNode, structureContext} = useDeskTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      // eslint-disable-next-line no-inner-declarations\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n", "import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {Box, Button, Card, Code, Container, Heading, Label, Stack, Text} from '@sanity/ui'\nimport React, {useCallback} from 'react'\nimport styled from 'styled-components'\nimport {SyncIcon} from '@sanity/icons'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">Encountered an error while reading structure</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Label>Structure path</Label>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Label>Error</Label>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  View documentation\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button text=\"Reload\" icon={SyncIcon} tone=\"primary\" onClick={handleReload} />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n", "import {Box, Text} from '@sanity/ui'\nimport React from 'react'\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\nimport {isRecord} from 'sanity'\n\ninterface UnknownPaneProps {\n  isSelected: boolean\n  pane: unknown\n  paneKey: string\n}\n\n/**\n * @internal\n */\nexport function UnknownPane(props: UnknownPaneProps) {\n  const {isSelected, pane, paneKey} = props\n  const type = (isRecord(pane) && pane.type) || null\n\n  return (\n    <Pane id={paneKey} selected={isSelected}>\n      <PaneHeader title=\"Unknown pane type\" />\n      <PaneContent>\n        <Box padding={4}>\n          {typeof type === 'string' ? (\n            <Text as=\"p\" muted>\n              Structure item of type <code>{type}</code> is not a known entity.\n            </Text>\n          ) : (\n            <Text as=\"p\" muted>\n              Structure item is missing required <code>type</code> property.\n            </Text>\n          )}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n", "import {Observable, of, merge} from 'rxjs'\nimport {mapTo, delay} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<string> {\n  const thresholds = [\n    {ms: 300, message: 'Loading…'},\n    {ms: 5000, message: 'Still loading…'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(...thresholds.map(({ms, message}) => src.pipe(mapTo(message), delay(ms))))\n}\n", "import {Box, CardTone, Flex, Spinner, Text, _raf2} from '@sanity/ui'\nimport React, {memo, useMemo, useState, useEffect} from 'react'\nimport {Observable} from 'rxjs'\nimport styled from 'styled-components'\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {getWaitMessages} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<string>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE = 'Loading…'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return DEFAULT_MESSAGE\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe === 'function') return undefined\n\n    const sub = resolvedMessage.subscribe(setCurrentMessage)\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <Spinner muted />\n\n      {(title || currentMessage) && (\n        <Box marginTop={3}>\n          <Text align=\"center\" muted size={1}>\n            {title || currentMessage}\n          </Text>\n        </Box>\n      )}\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'LoadingPane'\n", "import React, {memo, lazy, Suspense} from 'react'\nimport {isEqual} from 'lodash'\nimport {PaneNode} from '../types'\nimport {PaneRouterProvider} from '../components/paneRouter'\nimport {UnknownPane} from './unknown'\nimport {LoadingPane} from './loading'\n\ninterface DeskToolPaneProps {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  pane: PaneNode\n  paneKey: string\n  params: Record<string, string | undefined>\n  payload: unknown\n  path: string\n  selected: boolean\n  siblingIndex: number\n}\n\n// TODO: audit this creates separate chunks\nconst paneMap = {\n  component: lazy(() => import('./userComponent')),\n  document: lazy(() => import('./document')),\n  documentList: lazy(() => import('./documentList')),\n  list: lazy(() => import('./list')),\n}\n\n/**\n * NOTE: The same pane might appear multiple times (split pane), so use index as tiebreaker\n *\n * @internal\n */\nexport const DeskToolPane = memo(\n  function DeskToolPane(props: DeskToolPaneProps) {\n    const {\n      active,\n      childItemId,\n      groupIndex,\n      index,\n      itemId,\n      pane,\n      paneKey,\n      params,\n      payload,\n      path,\n      selected,\n      siblingIndex,\n    } = props\n\n    const PaneComponent = paneMap[pane.type] || UnknownPane\n\n    return (\n      <PaneRouterProvider\n        flatIndex={index}\n        index={groupIndex}\n        params={params}\n        payload={payload}\n        siblingIndex={siblingIndex}\n      >\n        <Suspense fallback={<LoadingPane paneKey={paneKey} path={path} selected={selected} />}>\n          <PaneComponent\n            childItemId={childItemId || ''}\n            index={index}\n            itemId={itemId}\n            isActive={active}\n            isSelected={selected}\n            paneKey={paneKey}\n            // @ts-expect-error TS doesn't know how to handle this intersection\n            pane={pane}\n          />\n        </Suspense>\n      </PaneRouterProvider>\n    )\n  },\n  (\n    {params: prevParams = {}, payload: prevPayload = null, ...prev},\n    {params: nextParams = {}, payload: nextPayload = null, ...next}\n  ) => {\n    // deeply compare these objects (it's okay, they're small)\n    if (!isEqual(prevParams, nextParams)) return false\n    if (!isEqual(prevPayload, nextPayload)) return false\n\n    const keys = new Set([...Object.keys(prev), ...Object.keys(next)]) as Set<\n      keyof typeof next | keyof typeof prev\n    >\n\n    // then shallow equal the rest\n    for (const key of keys) {\n      if (prev[key] !== next[key]) return false\n    }\n\n    return true\n  }\n)\n", "import React from 'react'\nimport {Box, CardTone} from '@sanity/ui'\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n", "import {useToast} from '@sanity/ui'\nimport React, {memo, useEffect, useRef} from 'react'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentOperationEvent} from 'sanity'\n\nfunction getOpErrorTitle(op: string): string {\n  if (op === 'delete') {\n    return `An error occurred while attempting to delete this document.\n      This usually means that there are other documents that refers to it.`\n  }\n  if (op === 'unpublish') {\n    return `An error occurred while attempting to unpublish this document.\n      This usually means that there are other documents that refers to it.`\n  }\n  return `An error occurred during ${op}`\n}\n\nfunction getOpSuccessTitle(op: string): string {\n  if (op === 'publish') {\n    return `The document was published`\n  }\n  if (op === 'unpublish') {\n    return `The document was unpublished. A draft has been created from the latest published version.`\n  }\n  if (op === 'discardChanges') {\n    return `All changes since last publish has now been discarded. The discarded draft can still be recovered from history`\n  }\n  if (op === 'delete') {\n    return `The document was successfully deleted`\n  }\n  return `Successfully performed ${op} on document`\n}\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType} = useDocumentPane()\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: getOpErrorTitle(event.op),\n        description: (\n          <details>\n            <summary>Details</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: getOpSuccessTitle(event.op),\n      })\n    }\n\n    prevEvent.current = event\n  }, [event, pushToast])\n\n  return null\n})\n", "import {useCallback, useEffect, useMemo, useState} from 'react'\nimport {useSettingsStore} from 'sanity'\n\n/**\n * @internal\n */\nexport function useDeskToolSetting<ValueType>(\n  namespace: string | null,\n  key: string,\n  defaultValue?: ValueType\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const settingsStore = useSettingsStore()\n  const [value, setValue] = useState<ValueType | undefined>(defaultValue)\n\n  const deskToolSettings = useMemo(() => settingsStore.forNamespace('desk-tool'), [settingsStore])\n\n  const settings = useMemo(() => {\n    if (namespace) {\n      return deskToolSettings.forNamespace(namespace).forKey(key)\n    }\n\n    return deskToolSettings.forKey(key)\n  }, [deskToolSettings, namespace, key])\n\n  useEffect(() => {\n    const sub = settings.listen(defaultValue).subscribe({\n      next: setValue as any,\n    })\n\n    return () => sub?.unsubscribe()\n  }, [defaultValue, key, namespace, settings])\n\n  const set = useCallback(\n    (newValue: ValueType) => {\n      setValue(newValue)\n      settings.set(newValue as any)\n    },\n    [settings]\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n", "export const VIEW_MODE_PARSED = {id: 'parsed', title: 'Parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'Raw JSON'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n", "import {SanityDocumentLike} from '@sanity/types'\nimport HLRU from 'hashlru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = HLRU(1000)\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n", "import {rem, Theme} from '@sanity/ui'\nimport styled, {css} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[2].fontSize}px;\n      line-height: ${fonts.code.sizes[2].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n", "import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport React, {useCallback} from 'react'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange]\n  )\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder=\"Search\"\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n", "import {SanityDocument} from '@sanity/types'\nimport {Card, Code, Dialog, Flex, Tab, TabList, TabPanel} from '@sanity/ui'\nimport React, {useCallback} from 'react'\nimport JSONInspector from '@rexxars/react-json-inspector'\nimport {DocTitle} from '../../../components'\nimport {useDeskToolSetting} from '../../../useDeskToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useDeskToolSetting(\n    'desk-tool',\n    `inspect-view-preferred-view-mode-${paneKey}`,\n    'parsed'\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  return (\n    <Dialog\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <>\n            Inspecting{' '}\n            <em>\n              <DocTitle document={value} />\n            </em>\n          </>\n        ) : (\n          <em>No value</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      width={3}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card padding={3} shadow={1} style={{position: 'sticky', bottom: 0, zIndex: 3}}>\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              fontSize={1}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={VIEW_MODE_PARSED.title}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              fontSize={1}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={VIEW_MODE_RAW.title}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JSONInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n", "import {Box, Button, Card, Container, Flex, Text} from '@sanity/ui'\nimport {WarningOutlineIcon, SyncIcon, CloseIcon} from '@sanity/icons'\nimport React, {memo, useCallback, useMemo} from 'react'\nimport styled from 'styled-components'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {KeyedSegment, Reference} from '@sanity/types'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {concat, Observable, of} from 'rxjs'\nimport {useMemoObservable} from 'react-rx'\nimport {RouterPaneGroup} from '../../../types'\nimport {usePaneRouter} from '../../../components'\nimport {DocumentAvailability, useDocumentPreviewStore, getPublishedId} from 'sanity'\n\nconst Root = styled(Card)`\n  position: relative;\n  z-index: 50;\n`\n\nconst TextOneLine = styled(Text)`\n  & > * {\n    overflow: hidden;\n    overflow: clip;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n`\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {draft: DocumentAvailability; published: DocumentAvailability}\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfo = useMemoObservable(\n    (): Observable<ParentReferenceInfo> => {\n      const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n      // short-circuit: this document pane is not a child reference pane\n      if (!parentId || !parentRefPathSegment || !parentRefPath) {\n        return of({loading: false})\n      }\n\n      const publishedId = getPublishedId(parentId)\n      const path = pathFromString(parentRefPathSegment)\n\n      // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n      const keyedSegmentIndex = path.findIndex(\n        (p): p is KeyedSegment => typeof p == 'object' && '_key' in p\n      )\n\n      return concat(\n        // emit a loading state instantly\n        of({loading: true}),\n        // then emit the values from watching the published ID's path\n        documentPreviewStore\n          .unstable_observePathsDocumentPair(\n            publishedId,\n            (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][]\n          )\n          .pipe(\n            // this debounce time is needed to prevent flashing banners due to\n            // the router state updating faster than the content-lake state. we\n            // debounce to wait for more emissions because the value pulled\n            // initially could be stale.\n            debounceTime(750),\n            map(\n              ({draft, published}): ParentReferenceInfo => ({\n                loading: false,\n                result: {\n                  availability: {\n                    draft: draft.availability,\n                    published: published.availability,\n                  },\n                  refValue: pathGet<Reference>(draft.snapshot || published.snapshot, parentRefPath)\n                    ?._ref,\n                },\n              })\n            )\n          )\n      )\n    },\n    [documentPreviewStore, parentId, parentRefPath],\n    {loading: true}\n  )\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Root shadow={1} tone=\"caution\" data-testid=\"reference-changed-banner\">\n      <Container paddingX={4} paddingY={2} sizing=\"border\" width={1}>\n        <Flex align=\"center\">\n          <Text size={1}>\n            <WarningOutlineIcon />\n          </Text>\n\n          {referenceInfo.result?.refValue ? (\n            <>\n              <Box flex={1} marginLeft={3}>\n                <TextOneLine title=\"This reference has changed since you opened it.\" size={1}>\n                  This reference has changed since you opened it.\n                </TextOneLine>\n              </Box>\n              <Box marginLeft={3}>\n                <Button\n                  onClick={handleReloadReference}\n                  icon={SyncIcon}\n                  fontSize={1}\n                  mode=\"ghost\"\n                  padding={2}\n                  space={2}\n                  text=\"Reload reference\"\n                />\n              </Box>\n            </>\n          ) : (\n            <>\n              <Box flex={1} marginLeft={3}>\n                <TextOneLine title=\"This reference has been removed since you opened it.\" size={1}>\n                  This reference has been removed since you opened it.\n                </TextOneLine>\n              </Box>\n              <Box marginLeft={3}>\n                <Button\n                  as={BackLink}\n                  icon={CloseIcon}\n                  fontSize={1}\n                  mode=\"ghost\"\n                  padding={2}\n                  space={2}\n                  text=\"Close reference\"\n                />\n              </Box>\n            </>\n          )}\n        </Flex>\n      </Container>\n    </Root>\n  )\n})\n\nReferenceChangedBanner.displayName = 'ReferenceChangedBanner'\n", "import React from 'react'\nimport {Box, Card, Container, Flex, Text} from '@sanity/ui'\nimport {ReadOnlyIcon} from '@sanity/icons'\nimport styled from 'styled-components'\nimport {useCurrentUser} from 'sanity'\n\nconst Root = styled(Card)`\n  position: relative;\n  z-index: 50;\n`\n\ninterface PermissionCheckBannerProps {\n  granted: boolean\n  requiredPermission: string\n}\n\nexport function PermissionCheckBanner({granted, requiredPermission}: PermissionCheckBannerProps) {\n  const currentUser = useCurrentUser()\n  const plural = currentUser?.roles?.length !== 1\n\n  const roles = join(\n    currentUser?.roles?.map((r) => <code key={r.name}>{r.title}</code>) || [],\n    ', '\n  )\n\n  if (granted) return null\n\n  return (\n    <Root data-testid=\"permission-check-banner\" shadow={1} tone=\"transparent\">\n      <Container paddingX={4} paddingY={3} sizing=\"border\" width={1}>\n        <Flex align=\"flex-start\">\n          <Text size={1}>\n            <ReadOnlyIcon />\n          </Text>\n\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              Your role{plural && 's'} {roles} {plural ? 'do' : 'does'} not have permissions to{' '}\n              {requiredPermission} this document.\n            </Text>\n          </Box>\n        </Flex>\n      </Container>\n    </Root>\n  )\n}\n\nfunction join<T, S>(array: Array<T>, sep: S): Array<T | S> | null {\n  return array.reduce((result: Array<T | S> | null, item: T | S) => {\n    if (result === null) {\n      return [item]\n    }\n\n    return result.concat([sep, item])\n  }, null)\n}\n", "import {useEffect, useRef} from 'react'\nimport {ToastParams, useToast} from '@sanity/ui'\n\nfunction usePrevious<T>(value: T) {\n  const ref = useRef<T>()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  const wasEnabled = usePrevious(params.enabled)\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (!wasEnabled && params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    if (wasEnabled && !params.enabled) {\n      toast.push({\n        ...params,\n        // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n        duration: 0.01,\n      })\n    }\n  }, [params, toast, wasEnabled])\n}\n", "/* eslint-disable no-nested-ternary */\n\nimport {Box, Container, Flex, Spinner, Text, focusFirstDescendant} from '@sanity/ui'\nimport React, {forwardRef, useEffect, useMemo, useRef, type Ref, useCallback, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Delay} from '../../../../components/Delay'\nimport {useConditionalToast} from './useConditionalToast'\nimport {\n  DocumentMutationEvent,\n  DocumentRebaseEvent,\n  FormBuilder,\n  PatchMsg,\n  PresenceOverlay,\n  createPatchChannel,\n  fromMutationPatches,\n  useDocumentPresence,\n  useDocumentStore,\n} from 'sanity'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: React.FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n  } = useDocumentPane()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const patchChannel = useMemo(() => createPatchChannel(), [])\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n\n  useConditionalToast({\n    id: `sync-lock-${documentId}`,\n    status: 'warning',\n    enabled: isLocked,\n    title: `Syncing document…`,\n    description: `Please hold tight while the document is synced. This usually happens right after the document has been published, and it shouldn't take more than a few seconds`,\n  })\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        })\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel])\n\n  const hasRev = Boolean(value?._rev)\n  useEffect(() => {\n    if (hasRev) {\n      // this is a workaround for an issue that caused the document pushed to withDocument to get\n      // stuck at the first initial value.\n      // This effect is triggered only when the document goes from not having a revision, to getting one\n      // so it will kick in as soon as the document is received from the backend\n      patchChannel.publish({\n        type: 'mutation',\n        patches: [],\n        snapshot: value,\n      })\n    }\n    // React to changes in hasRev only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (ready && !formState?.focusPath.length && formRef) {\n      focusFirstDescendant(formRef)\n    }\n    // We only want to run it on first mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref]\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: React.ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {ready ? (\n            formState === null ? (\n              <Box padding={2}>\n                <Text>This form is hidden</Text>\n              </Box>\n            ) : (\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focusPath={formState.focusPath}\n                changed={formState.changed}\n                focused={formState.focused}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                presence={presence}\n                readOnly={formState.readOnly}\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={formState.value}\n              />\n            )\n          ) : (\n            <Delay ms={300}>\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    Loading document\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches)\n    ),\n  }\n}\n", "import React, {useCallback} from 'react'\nimport {Tab, TabList} from '@sanity/ui'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {usePaneRouter} from '../../../../components'\n\nexport function DocumentHeaderTabs() {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n  const tabPanelId = `${paneKey}tabpanel`\n\n  return (\n    <TabList space={1}>\n      {views.map((view, index) => (\n        <DocumentHeaderTab\n          icon={view.icon}\n          id={`${paneKey}tab-${view.id}`}\n          isActive={activeViewId === view.id}\n          key={view.id}\n          label={<>{view.title}</>}\n          tabPanelId={tabPanelId}\n          viewId={index === 0 ? null : view.id ?? null}\n        />\n      ))}\n    </TabList>\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  isActive: boolean\n  label: React.ReactNode\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {isActive, tabPanelId, viewId} = props\n  const {ready} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...props} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready}\n      fontSize={1}\n      selected={isActive}\n      onClick={handleClick}\n    />\n  )\n}\n", "import React, {ReactElement} from 'react'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {unstable_useValuePreview as useValuePreview} from 'sanity'\n\nexport function DocumentHeaderTitle(): ReactElement {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue) && connectionState === 'connected'\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n\n  if (connectionState !== 'connected') {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return <>New {schemaType?.title || schemaType?.name}</>\n  }\n\n  if (error) {\n    return <>Error: {error.message}</>\n  }\n\n  return <>{value?.title || <span style={{color: 'var(--card-muted-fg-color)'}}>Untitled</span>}</>\n}\n", "import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Button, Flex, Text, Tooltip} from '@sanity/ui'\nimport React, {createElement, memo, forwardRef, useMemo} from 'react'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {TimelineMenu} from '../../timeline'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {useDeskTool} from '../../../../useDeskTool'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {useFieldActions, useTimelineSelector} from 'sanity'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {}\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) {\n    const {\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItems,\n      menuItemGroups,\n      schemaType,\n      timelineStore,\n      ready,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useDeskTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems]\n    )\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    // Subscribe to external timeline state changes\n    const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button) do the same thing and shouldn't be shown at the same time)\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !features.backButton\n\n    return (\n      <PaneHeader\n        ref={ref}\n        loading={!ready}\n        title={<DocumentHeaderTitle />}\n        tabs={showTabs && <DocumentHeaderTabs />}\n        tabIndex={tabIndex}\n        backButton={\n          features.backButton &&\n          index > 0 && (\n            <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" padding={2} />\n          )\n        }\n        subActions={<TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />}\n        actions={\n          <Flex align=\"center\" gap={1}>\n            {unstable_languageFilter.length > 0 && (\n              <>\n                {unstable_languageFilter.map((languageFilterComponent, idx) => {\n                  return createElement(languageFilterComponent, {\n                    // eslint-disable-next-line react/no-array-index-key\n                    key: `language-filter-${idx}`,\n                    schemaType,\n                  })\n                })}\n              </>\n            )}\n\n            {menuButtonNodes.map((item) => (\n              <PaneHeaderActionButton key={item.key} node={item} />\n            ))}\n\n            <PaneContextMenuButton nodes={contextMenuNodes} key=\"context-menu\" />\n\n            {showSplitPaneButton && (\n              <Tooltip\n                content={\n                  <Text size={1} style={{whiteSpace: 'nowrap'}}>\n                    Split pane right\n                  </Text>\n                }\n                padding={2}\n                placement=\"bottom\"\n                portal\n              >\n                <Button\n                  aria-label=\"Split pane right\"\n                  icon={SplitVerticalIcon}\n                  key=\"split-pane-button\"\n                  mode=\"bleed\"\n                  onClick={onPaneSplit}\n                />\n              </Tooltip>\n            )}\n\n            {showSplitPaneCloseButton && (\n              <Button\n                icon={CloseIcon}\n                key=\"close-view-button\"\n                mode=\"bleed\"\n                onClick={onPaneClose}\n                title=\"Close split pane\"\n              />\n            )}\n\n            {showPaneGroupCloseButton && (\n              <Button\n                icon={CloseIcon}\n                key=\"close-view-button\"\n                mode=\"bleed\"\n                title=\"Close pane group\"\n                as={BackLink}\n              />\n            )}\n          </Flex>\n        }\n      />\n    )\n  })\n)\n", "import {\n  BoundaryElementProvider,\n  Flex,\n  PortalProvider,\n  usePortal,\n  useElementRect,\n  Box,\n} from '@sanity/ui'\nimport React, {createElement, useEffect, useMemo, useRef, useState} from 'react'\nimport styled, {css} from 'styled-components'\nimport {PaneContent, usePane, usePaneLayout} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {ReferenceChangedBanner} from './ReferenceChangedBanner'\nimport {PermissionCheckBanner} from './PermissionCheckBanner'\nimport {FormView} from './documentViews'\nimport {DocumentPanelHeader} from './header'\nimport {ScrollContainer, VirtualizerScrollInstanceProvider} from 'sanity'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  rootElement: HTMLDivElement | null\n  isInspectOpen: boolean\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {footerHeight, isInspectOpen, rootElement, setDocumentPanelPortalElement} = props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useDeskTool()\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n  const headerRect = useElementRect(headerElement)\n  const portalRef = useRef<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views]\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? portalRef.current || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerRect?.height || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerRect])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(\n    () =>\n      activeView.type === 'component' &&\n      activeView.component &&\n      createElement(activeView.component, {\n        document: {\n          draft: editState?.draft || null,\n          displayed: displayed || value,\n          historical: displayed,\n          published: editState?.published || null,\n        },\n        documentId,\n        options: activeView.options,\n        schemaType,\n      }),\n    [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value]\n  )\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n\n  return (\n    <>\n      <DocumentPanelHeader ref={setHeaderElement} />\n\n      <PaneContent>\n        <Flex height=\"fill\">\n          {(features.resizablePanes || !showInspector) && (\n            <DocumentBox flex={2} overflow=\"hidden\">\n              <PortalProvider\n                element={portalElement}\n                __unstable_elements={{documentScrollElement: documentScrollElement}}\n              >\n                <BoundaryElementProvider element={documentScrollElement}>\n                  <VirtualizerScrollInstanceProvider\n                    scrollElement={documentScrollElement}\n                    containerElement={formContainerElement}\n                  >\n                    {activeView.type === 'form' && !isPermissionsLoading && ready && (\n                      <>\n                        <PermissionCheckBanner\n                          granted={Boolean(permissions?.granted)}\n                          requiredPermission={requiredPermission}\n                        />\n                        <ReferenceChangedBanner />\n                      </>\n                    )}\n\n                    <Scroller\n                      $disabled={layoutCollapsed || false}\n                      data-testid=\"document-panel-scroller\"\n                      ref={setDocumentScrollElement}\n                    >\n                      <FormView\n                        hidden={formViewHidden}\n                        key={documentId + (ready ? '_ready' : '_pending')}\n                        margins={margins}\n                        ref={formContainerElement}\n                      />\n                      {activeViewNode}\n                    </Scroller>\n\n                    {inspectDialog}\n\n                    <div data-testid=\"document-panel-portal\" ref={portalRef} />\n                  </VirtualizerScrollInstanceProvider>\n                </BoundaryElementProvider>\n              </PortalProvider>\n            </DocumentBox>\n          )}\n\n          {showInspector && (\n            <BoundaryElementProvider element={rootElement}>\n              <DocumentInspectorPanel\n                documentId={documentId}\n                documentType={schemaType.name}\n                flex={1}\n              />\n            </BoundaryElementProvider>\n          )}\n        </Flex>\n      </PaneContent>\n    </>\n  )\n}\n", "import {DialogProps, Placement} from '@sanity/ui'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n", "import {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Popover,\n  Text,\n  useClickOutside,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport React, {useCallback, useState} from 'react'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\nimport {DocumentActionConfirmDialogProps} from 'sanity'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onCancel()\n  }, [isTopLayer, onCancel])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel]\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return (\n    <Flex direction=\"column\" ref={setElement} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || 'Cancel'}\n          />\n          <Button\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || 'Confirm'}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n", "import {Box, Dialog} from '@sanity/ui'\nimport React, {useId} from 'react'\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\nimport {DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n", "import {Popover, useClickOutside, useGlobalKeyDown, useLayer} from '@sanity/ui'\nimport React, {useCallback, useState} from 'react'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\nimport {DocumentActionPopoverDialogProps} from 'sanity'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const [element, setElement] = useState<HTMLElement | null>(null)\n\n  const handleClickOutside = useCallback(() => {\n    if (isTopLayer) onClose()\n  }, [isTopLayer, onClose])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose]\n  )\n\n  useClickOutside(handleClickOutside, [element])\n  useGlobalKeyDown(handleGlobalKeyDown)\n\n  return <div ref={setElement}>{content}</div>\n}\n", "import {Box, Dialog, usePortal, PortalProvider} from '@sanity/ui'\nimport React, {useId} from 'react'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\nimport {DocumentActionDialogProps} from 'sanity'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: React.ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={2}\n    >\n      <Box padding={4}>\n        {unknownModal.content || (\n          <>\n            Unexpected modal type (<code>{unknownModal.type}</code>)\n          </>\n        )}\n      </Box>\n    </Dialog>\n  )\n}\n", "import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Flex,\n  Hotkeys,\n  Menu,\n  MenuButton,\n  MenuItem,\n  PopoverProps,\n  Text,\n  Tooltip,\n} from '@sanity/ui'\nimport React, {\n  createElement,\n  isValidElement,\n  useCallback,\n  useRef,\n  useState,\n  useMemo,\n  useId,\n} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {ActionStateDialog} from './ActionStateDialog'\nimport {DocumentActionDescription, LegacyLayerProvider} from 'sanity'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\n  const [actionIndex, setActionIndex] = useState(-1)\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    []\n  )\n\n  const currentAction = actionStates[actionIndex]\n\n  return (\n    <>\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <Button\n            data-testid=\"action-menu-button\"\n            aria-label=\"Open document actions\"\n            disabled={disabled}\n            icon={ChevronDownIcon}\n            mode=\"ghost\"\n            ref={buttonRef}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n    </>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nfunction ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const tooltipContent = actionState.title && (\n    <Box padding={2}>\n      <Text size={1}>{actionState.title}</Text>\n    </Box>\n  )\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      onClick={handleClick}\n      padding={0}\n      tone={actionState.tone}\n    >\n      <Tooltip\n        content={tooltipContent}\n        disabled={!tooltipContent}\n        fallbackPlacements={['left', 'bottom']}\n        placement=\"top\"\n        portal\n      >\n        <Flex align=\"center\" paddingX={3}>\n          <Flex flex={1} paddingY={3}>\n            {actionState.icon && (\n              <Box marginRight={3}>\n                <Text>\n                  {isValidElement(actionState.icon) && actionState.icon}\n                  {isValidElementType(actionState.icon) && createElement(actionState.icon)}\n                </Text>\n              </Box>\n            )}\n\n            <Text>{actionState.label}</Text>\n          </Flex>\n\n          {actionState.shortcut && (\n            <Box marginLeft={3}>\n              <Hotkeys\n                keys={String(actionState.shortcut)\n                  .split('+')\n                  .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))}\n              />\n            </Box>\n          )}\n        </Flex>\n      </Tooltip>\n    </MenuItem>\n  )\n}\n", "import {Box, Flex, Tooltip, Stack, Button, Hotkeys, LayerProvider, Text} from '@sanity/ui'\nimport React, {memo, useMemo, useState} from 'react'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\nimport {DocumentActionDescription, useTimelineSelector} from 'sanity'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nfunction DocumentStatusBarActionsInner(props: DocumentStatusBarActionsInnerProps) {\n  const {disabled, showMenu, states} = props\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex padding={2} style={{maxWidth: 300}} align=\"center\">\n        <Text size={1}>{firstActionState.title}</Text>\n        {firstActionState.shortcut && (\n          <Box marginLeft={firstActionState.title ? 2 : 0}>\n            <Hotkeys\n              keys={String(firstActionState.shortcut)\n                .split('+')\n                .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n            />\n          </Box>\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  return (\n    <Flex>\n      {firstActionState && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} portal placement=\"top\">\n            <Stack flex={1}>\n              <Button\n                data-testid={`action-${firstActionState.label}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n\n      {showMenu && menuActionStates.length > 0 && (\n        <Box marginLeft={1}>\n          <ActionMenuButton actionStates={menuActionStates} disabled={disabled} />\n        </Box>\n      )}\n\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n}\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  if (!actions || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      // @ts-expect-error TODO: fix the document actions\n      actionProps={editState}\n    >\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected'}\n          // isMenuOpen={isMenuOpen}\n          // onMenuOpen={handleMenuOpen}\n          // onMenuClose={handleMenuClose}\n          showMenu={actions.length > 1}\n          states={states}\n          // Use document ID as key to make sure that the actions state is reset when the document changes\n          key={documentId}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {connectionState, editState, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const revTime = useTimelineSelector(timelineStore, (state) => state.revTime)\n\n  const revision = revTime?.id || ''\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n  const historyActions = useMemo(() => [HistoryRestoreAction], [])\n\n  return (\n    <RenderActionCollectionState actions={historyActions} actionProps={actionProps as any}>\n      {({states}) => (\n        <DocumentStatusBarActionsInner\n          disabled={connectionState !== 'connected' || Boolean(disabled)}\n          showMenu={false}\n          states={states}\n        />\n      )}\n    </RenderActionCollectionState>\n  )\n})\n", "import {Badge, BadgeTone, Box, Inline, Text, Tooltip} from '@sanity/ui'\nimport React from 'react'\nimport {RenderBadgeCollectionState} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentBadgeDescription} from 'sanity'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nfunction DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={\n            badge.title && (\n              <Box padding={2}>\n                <Text size={1}>{badge.title}</Text>\n              </Box>\n            )\n          }\n          disabled={!badge.title}\n          key={String(index)}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n}\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState as any}>\n      {({states}) => <DocumentBadgesInner states={states} />}\n    </RenderBadgeCollectionState>\n  )\n}\n", "import {Box, Button, Flex, Stack, Text, Tooltip} from '@sanity/ui'\nimport {PlayIcon, PublishIcon} from '@sanity/icons'\nimport React from 'react'\nimport styled from 'styled-components'\nimport {useTimeAgo} from 'sanity'\n\ninterface PublishStatusProps {\n  collapsed?: boolean\n  disabled: boolean\n  lastPublished?: string\n  lastUpdated?: string\n  liveEdit: boolean\n}\n\nconst Root = styled(Flex)`\n  cursor: default;\n`\n\nexport function PublishStatus(props: PublishStatusProps) {\n  const {collapsed, disabled, lastPublished, lastUpdated, liveEdit} = props\n\n  // Label with abbreviations and suffix\n  const lastPublishedTimeAgo = useTimeAgo(lastPublished || '', {minimal: true, agoSuffix: true})\n  // Label with abbreviation and no suffix\n  const lastPublishedTime = useTimeAgo(lastPublished || '', {minimal: true})\n\n  // Label with abbreviations and suffix\n  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {minimal: true, agoSuffix: true})\n  // Label with abbreviation and no suffix\n  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {minimal: true})\n\n  // Accessible labels without abbreviations or suffixes\n  const a11yUpdatedAgo = useTimeAgo(lastUpdated || '', {minimal: false, agoSuffix: true})\n  const a11yPublishedAgo = useTimeAgo(lastPublished || '', {minimal: false, agoSuffix: true})\n  const a11yLabel = liveEdit\n    ? `Last updated ${a11yUpdatedAgo}`\n    : `Last published ${a11yPublishedAgo}`\n\n  return (\n    <Root align=\"center\" data-ui=\"SessionLayout\" sizing=\"border\">\n      <Tooltip\n        placement=\"top\"\n        portal\n        content={\n          <Stack padding={3} space={3}>\n            <Text size={1}>\n              {liveEdit ? (\n                <>\n                  Last updated{' '}\n                  <abbr aria-label={lastUpdated ? a11yUpdatedAgo : a11yPublishedAgo}>\n                    {lastUpdated ? lastUpdatedTimeAgo : lastPublishedTimeAgo}\n                  </abbr>\n                </>\n              ) : (\n                <>\n                  Last published <abbr aria-label={a11yPublishedAgo}>{lastPublishedTimeAgo}</abbr>\n                </>\n              )}\n            </Text>\n          </Stack>\n        }\n      >\n        <Button\n          mode=\"bleed\"\n          tone={liveEdit ? 'critical' : 'positive'}\n          tabIndex={-1}\n          disabled={disabled}\n          aria-label={a11yLabel}\n        >\n          <Flex align=\"center\">\n            <Box marginRight={collapsed ? 0 : 3}>\n              <Text size={2} aria-hidden=\"true\">\n                {liveEdit ? <PlayIcon /> : <PublishIcon />}\n              </Text>\n            </Box>\n            {!collapsed && (\n              <Text size={1} weight=\"medium\">\n                {liveEdit ? (\n                  <abbr aria-label={a11yLabel}>\n                    {lastUpdated ? lastUpdatedTime : lastPublishedTime}\n                  </abbr>\n                ) : (\n                  <abbr aria-label={a11yLabel}>{lastPublishedTime}</abbr>\n                )}\n              </Text>\n            )}\n          </Flex>\n        </Button>\n      </Tooltip>\n    </Root>\n  )\n}\n", "import React, {ComponentProps} from 'react'\nimport {motion} from 'framer-motion'\nimport styled, {keyframes} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\nconst Edit = (props: MotionPathProps) => (\n  <motion.path d=\"M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\nconst edit = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  changes: {\n    pathLength: 1,\n    transition: {\n      duration: 0.4,\n      delay: 0.5,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n        <Edit variants={edit} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n", "import React, {useMemo} from 'react'\nimport {Box, Button, ButtonProps, Flex, Stack, Text, Tooltip} from '@sanity/ui'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\nimport {useTimeAgo} from 'sanity'\n\ninterface ReviewChangesButtonProps extends React.HTMLProps<HTMLButtonElement> {\n  status?: 'changes' | 'saved' | 'syncing'\n  lastUpdated?: string\n  collapsed?: boolean\n}\n\nconst ReviewButton = React.forwardRef(function ReviewButton(\n  props: ReviewChangesButtonProps & ButtonProps,\n  ref: React.ForwardedRef<HTMLButtonElement>\n) {\n  const {collapsed, status, lastUpdated, ...rest} = props\n  const lastUpdatedTime = useTimeAgo(lastUpdated || '', {minimal: true})\n  const lastUpdatedTimeAgo = useTimeAgo(lastUpdated || '', {minimal: true, agoSuffix: true})\n  const a11yUpdatedAgo = useTimeAgo(lastUpdated || '', {minimal: false, agoSuffix: true})\n\n  const buttonProps: ButtonProps = useMemo(() => {\n    if (status === 'syncing') {\n      return {\n        text: 'Saving...',\n        tone: undefined,\n      }\n    }\n    if (status === 'changes') {\n      return {\n        text: lastUpdatedTime,\n        tone: 'caution',\n      }\n    }\n    if (status === 'saved') {\n      return {\n        text: 'Saved!',\n        tone: 'positive',\n      }\n    }\n\n    return {}\n  }, [status, lastUpdatedTime])\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <Tooltip\n      placement=\"top\"\n      portal\n      disabled={status !== 'changes'}\n      content={\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"semibold\">\n            Review changes\n          </Text>\n          <Text size={1} muted>\n            Changes saved <abbr aria-label={a11yUpdatedAgo}>{lastUpdatedTimeAgo}</abbr>\n          </Text>\n        </Stack>\n      }\n    >\n      <Button\n        mode=\"bleed\"\n        justify=\"flex-start\"\n        tone={buttonProps?.tone}\n        {...rest}\n        data-testid=\"review-changes-button\"\n        ref={ref}\n        aria-label=\"Review changes\"\n      >\n        <Flex align=\"center\">\n          <Box marginRight={collapsed ? 0 : 3} aria-hidden=\"true\">\n            <Text>\n              <AnimatedStatusIcon status={status} />\n            </Text>\n          </Box>\n          {!collapsed && (\n            <Text size={1} weight=\"medium\">\n              {buttonProps?.text}\n            </Text>\n          )}\n        </Flex>\n      </Button>\n    </Tooltip>\n  )\n})\n\nexport const ReviewChangesButton = React.memo(ReviewButton)\n", "import {Box, Flex, useElementRect} from '@sanity/ui'\nimport React, {useEffect, useMemo, useState, memo, useLayoutEffect} from 'react'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentBadges} from './DocumentBadges'\nimport {PublishStatus} from './PublishStatus'\nimport {ReviewChangesButton} from './ReviewChangesButton'\nimport {useSyncState, useTimelineSelector} from 'sanity'\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport const DocumentSparkline = memo(function DocumentSparkline() {\n  const {\n    changesOpen,\n    documentId,\n    documentType,\n    editState,\n    onHistoryClose,\n    onHistoryOpen,\n    timelineStore,\n    value,\n  } = useDocumentPane()\n  const syncState = useSyncState(documentId, documentType)\n\n  const lastUpdated = value?._updatedAt\n  const lastPublished = editState?.published?._updatedAt\n  const liveEdit = Boolean(editState?.liveEdit)\n  const published = Boolean(editState?.published)\n  const changed = Boolean(editState?.draft)\n\n  const [rootFlexElement, setRootFlexElement] = useState<HTMLDivElement | null>(null)\n  const rootFlexRect = useElementRect(rootFlexElement)\n  const collapsed = !rootFlexRect || rootFlexRect?.width < 300\n\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n\n  // Subscribe to TimelineController changes and store internal state.\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  const reviewButton = useMemo(\n    () => (\n      <ReviewChangesButton\n        lastUpdated={lastUpdated}\n        status={status || (changed ? 'changes' : undefined)}\n        onClick={changesOpen ? onHistoryClose : onHistoryOpen}\n        disabled={showingRevision}\n        selected={changesOpen}\n        collapsed={collapsed}\n      />\n    ),\n    [\n      changed,\n      changesOpen,\n      onHistoryClose,\n      onHistoryOpen,\n      lastUpdated,\n      showingRevision,\n      status,\n      collapsed,\n    ]\n  )\n\n  const publishStatus = useMemo(\n    () =>\n      (liveEdit || published) && (\n        <Box marginRight={1}>\n          <PublishStatus\n            disabled={showingRevision}\n            lastPublished={lastPublished}\n            lastUpdated={lastUpdated}\n            liveEdit={liveEdit}\n            collapsed={collapsed}\n          />\n        </Box>\n      ),\n    [collapsed, lastPublished, lastUpdated, liveEdit, published, showingRevision]\n  )\n\n  return (\n    <Flex align=\"center\" data-ui=\"DocumentSparkline\" ref={setRootFlexElement}>\n      {publishStatus}\n\n      <Flex align=\"center\" flex={1}>\n        {reviewButton}\n        {!collapsed && (\n          <Box marginLeft={3}>\n            <DocumentBadges />\n          </Box>\n        )}\n      </Flex>\n    </Flex>\n  )\n})\n", "import React, {useMemo} from 'react'\nimport styled from 'styled-components'\nimport {Box, Flex} from '@sanity/ui'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentSparkline} from './sparkline/DocumentSparkline'\nimport {useTimelineSelector} from 'sanity'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: React.Ref<HTMLDivElement>\n}\n\nconst DocumentActionsBox = styled(Box)`\n  min-width: 10em;\n  max-width: 16em;\n`\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef} = props\n  const {badges, timelineStore} = useDocumentPane()\n\n  // Subscribe to external timeline state changes\n  const showingRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n\n  return useMemo(\n    () => (\n      <Box paddingLeft={2} paddingRight={[2, 3]} paddingY={2}>\n        <Flex align=\"center\">\n          <Box flex={[1, 2]}>{badges && <DocumentSparkline />}</Box>\n\n          <DocumentActionsBox flex={1} marginLeft={[1, 3]} ref={actionsBoxRef}>\n            {showingRevision ? <HistoryStatusBarActions /> : <DocumentStatusBarActions />}\n          </DocumentActionsBox>\n        </Flex>\n      </Box>\n    ),\n    [actionsBoxRef, badges, showingRevision]\n  )\n}\n", "import isHotkey from 'is-hotkey'\nimport React, {ElementType, createElement, useCallback, useMemo, useState} from 'react'\nimport {ActionStateDialog} from '../statusBar'\nimport {RenderActionCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentActionDescription, DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: React.Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nfunction KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'height'>\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event)\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states]\n  )\n\n  return createElement(\n    as,\n    {\n      id,\n      onKeyDown: handleKeyDown,\n      tabIndex: -1,\n      ...rest,\n      ref: rootRef,\n    },\n    [\n      children,\n      activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      ),\n    ]\n  )\n}\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: React.Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = React.memo(\n  (props: DocumentActionShortcutsProps & Omit<React.HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState]\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {({states}) => (\n          <KeyboardShortcutResponder\n            {...rest}\n            activeIndex={activeIndex}\n            actionsBoxElement={actionsBoxElement}\n            as={as}\n            onActionStart={onActionStart}\n            states={states}\n          >\n            {children}\n          </KeyboardShortcutResponder>\n        )}\n      </RenderActionCollectionState>\n    )\n  }\n)\n\nDocumentActionShortcuts.displayName = 'DocumentActionShortcuts'\n", "import {\n  Card,\n  Code,\n  DialogProvider,\n  DialogProviderProps,\n  Flex,\n  PortalProvider,\n  Stack,\n  Text,\n  useElementRect,\n} from '@sanity/ui'\nimport React, {memo, useCallback, useMemo, useState} from 'react'\nimport styled from 'styled-components'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {Path} from '@sanity/types'\nimport {DocumentPaneNode} from '../../types'\nimport {Pane, PaneFooter, usePaneRouter} from '../../components'\nimport {usePaneLayout} from '../../components/pane/usePaneLayout'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../constants'\nimport {DocumentOperationResults} from './DocumentOperationResults'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {DocumentPanel} from './documentPanel'\nimport {DocumentActionShortcuts} from './keyboardShortcuts'\nimport {DocumentStatusBar} from './statusBar'\nimport {DocumentPaneProviderProps} from './types'\nimport {useDocumentPane} from './useDocumentPane'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from './constants'\nimport {\n  ChangeConnectorRoot,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  isDev,\n  useDocumentType,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useZIndex,\n} from 'sanity'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrow screens (< 512px).\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <DocumentPaneInner {...props} />\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n              ? 'selected'\n              : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  if (options.type === '*' && !isLoaded) {\n    return <LoadingPane flex={2.5} minWidth={320} paneKey={paneKey} title=\"Loading document…\" />\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={<>The document was not found</>}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            The document type is not defined, and a document with the <code>{options.id}</code>{' '}\n            identifier could not be found.\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProvider\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <InnerDocumentPane />\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProvider>\n  )\n}\n\nfunction usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {}\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n\nfunction InnerDocumentPane() {\n  const {\n    changesOpen,\n    documentType,\n    inspector,\n    inspectOpen,\n    onFocus,\n    onPathOpen,\n    onHistoryOpen,\n    onKeyUp,\n    paneKey,\n    schemaType,\n    value,\n  } = useDocumentPane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const zOffsets = useZIndex()\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null\n  )\n  const footerRect = useElementRect(footerElement)\n  const footerH = footerRect?.height\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus]\n  )\n\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  if (!schemaType) {\n    return (\n      <ErrorPane\n        currentMinWidth={currentMinWidth}\n        flex={2.5}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        title={\n          <>\n            Unknown document type: <code>{documentType}</code>\n          </>\n        }\n        tone=\"caution\"\n      >\n        <Stack space={4}>\n          {documentType && (\n            <Text as=\"p\">\n              This document has the schema type <code>{documentType}</code>, which is not defined as\n              a type in the local content studio schema.\n            </Text>\n          )}\n\n          {!documentType && (\n            <Text as=\"p\">\n              This document does not exist, and no schema type was specified for it.\n            </Text>\n          )}\n\n          {isDev && value && (\n            <>\n              <Text as=\"p\">Here is the JSON representation of the document:</Text>\n              <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n                <Code language=\"json\" size={[1, 1, 2]}>\n                  {JSON.stringify(value, null, 2)}\n                </Code>\n              </Card>\n            </>\n          )}\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentActionShortcuts\n      actionsBoxElement={actionsBoxElement}\n      as={Pane}\n      currentMinWidth={currentMinWidth}\n      data-testid=\"document-pane\"\n      flex={2.5}\n      id={paneKey}\n      minWidth={minWidth}\n      onKeyUp={onKeyUp}\n      rootRef={setRootElement}\n    >\n      <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n        <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n          <StyledChangeConnectorRoot\n            data-testid=\"change-connector-root\"\n            isReviewChangesOpen={changesOpen}\n            onOpenReviewChanges={onHistoryOpen}\n            onSetFocus={onConnectorSetFocus}\n          >\n            <DocumentPanel\n              footerHeight={footerH || null}\n              isInspectOpen={inspectOpen}\n              rootElement={rootElement}\n              setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n            />\n          </StyledChangeConnectorRoot>\n        </Flex>\n      </DialogProvider>\n\n      {/* These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane. */}\n      {/* The portal element comes from `DocumentPanel`. */}\n      <PortalProvider\n        __unstable_elements={{[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}}\n      >\n        <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n          <PaneFooter ref={setFooterElement}>\n            <DocumentStatusBar actionsBoxRef={setActionsBoxElement} />\n          </PaneFooter>\n        </DialogProvider>\n      </PortalProvider>\n\n      <DocumentOperationResults />\n    </DocumentActionShortcuts>\n  )\n}\n", "import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport React from 'react'\n\nexport function NoDocumentTypesScreen() {\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"bold\">\n                  No document types\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  Please define at least one document type in your schema.\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Learn how to add a document type &rarr;\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n", "import {PortalProvider, useToast} from '@sanity/ui'\nimport React, {memo, Fragment, useState, useEffect, useCallback} from 'react'\nimport styled from 'styled-components'\nimport isHotkey from 'is-hotkey'\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, DeskToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {PaneNode} from '../../types'\nimport {PaneLayout} from '../pane'\nimport {useDeskTool} from '../../useDeskTool'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {useSchema, _isCustomDocumentTypeDefinition} from 'sanity'\nimport {useRouterState} from 'sanity/router'\n\ninterface DeskToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const DeskTool = memo(function DeskTool({onPaneChange}: DeskToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useDeskTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', [])\n  )\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={512}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <DeskToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          )\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n", "import React, {useEffect, useState} from 'react'\nimport {ErrorBoundary} from '@sanity/ui'\nimport {DeskToolOptions} from '../../types'\nimport {DeskToolProvider} from '../../DeskToolProvider'\nimport {setActivePanes} from '../../getIntentState'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {DeskTool} from './DeskTool'\nimport {SourceProvider, useWorkspace, Tool} from 'sanity'\n\ninterface DeskToolBoundaryProps {\n  tool: Tool<DeskToolOptions>\n}\n\nexport function DeskToolBoundary({tool: {options}}: DeskToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <DeskToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <DeskTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </DeskToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBa,IAAAA,8BAA+BC,WAAuC;AACjF,QAAM;IAACC;IAASC;IAAUC;IAAaC;MAAoBJ;AAGzD,aAAAK,wBAACC,wBAAAA;IAAuBC,SAASH;IAAkBI,OAAOP;IAASQ,MAAMN;IACtED;EACH,CAAA;AAEJ;ACPa,IAAAQ,6BAA8BV,WAAsC;AAC/E,QAAM;IAACW;IAAQT;IAAUU;IAAY,GAAGC;EAAQ,IAAAb;AAG9C,aAAAK,wBAACC,wBAAAA;IAAwB,GAAGO;IAAML,OAAOG;IAAQF,MAAMG;IACpDV;EACH,CAAA;AAEJ;AClBA,IAAMY,aAAsB,CAAA;AAKrB,SAASC,mBAAmBf,OAOhC;AACD,QAAM;IAACE;IAAUc;IAAWC,OAAAA;IAAOC;IAAQC;IAASC;EAAgB,IAAApB;AACpE,QAAM;IAACqB;IAAUC;EAAc,IAAIC,UAAU;AAC7C,QAAMC,cAAcC,eAAe;AACnC,QAAMC,uBAAsCC,sBAC1C,OAAOH,eAAAA,OAAAA,SAAAA,YAAaI,UAASd,YAC7B,CAACU,eAAAA,OAAAA,SAAAA,YAAaI,KAAK,CAAA;AAGrB,QAAMC,aAAaZ,SAAQ;AAE3B,QAAMa,yBAAqBC,0BACxBC,cAAsF;AACrF,UAAMC,eAAeP,iBAAiBG,UAAU,KAAK,CAAA;AAC/C,UAAAK,cAAcD,aAAab,YAAY;AACvC,UAAAe,YAAYH,SAASC,cAAcC,WAAW;AACpD,UAAME,YAAY,CAChB,GAAGV,iBAAiBW,MAAM,GAAGR,UAAU,GACvCM,WACA,GAAGT,iBAAiBW,MAAMR,aAAa,CAAC,CAAA;AAE1C,UAAMS,kBAAkB;MAAC,GAAId,eAAe,CAAA;MAAKI,OAAOQ;;AAExDG,eAAW,MAAMlB,SAASiB,eAAe,GAAG,CAAC;AAEtC,WAAAA;EACT,GACA,CAACT,YAAYR,UAAUK,kBAAkBF,aAAaJ,YAAY,CAAA;AAGpE,QAAMoB,iBAAmDT,0BACtDU,iBAAgB;AACIX,uBAAA,CAACY,UAAUC,SAAS,CACrC,GAAGD,SAASL,MAAM,GAAGjB,YAAY,GACjC;MAAC,GAAGuB;MAAMxB,SAASsB;IAAW,GAC9B,GAAGC,SAASL,MAAMjB,eAAe,CAAC,CAAA,CACnC;EACH,GACA,CAACU,oBAAoBV,YAAY,CAAA;AAGnC,QAAMwB,gBAAiDb,0BACpDc,gBAAe;AACKf,uBAAA,CAACY,UAAUC,SAAS,CACrC,GAAGD,SAASL,MAAM,GAAGjB,YAAY,GACjC;MAAC,GAAGuB;MAAMzB,QAAQ2B;IAAU,GAC5B,GAAGH,SAASL,MAAMjB,eAAe,CAAC,CAAA,CACnC;EACH,GACA,CAACU,oBAAoBV,YAAY,CAAA;AAGnC,QAAM0B,0BAAqEf,0BACzEgB,UAAyC;AAAA,QAAxC;MAACC;MAAIC;MAAeC;MAAMC;QAAcJ;AAC9B1B,aAAA;MACPO,OAAO,CACL,GAAGF,iBAAiBW,MAAM,GAAGR,aAAa,CAAC,GAC3C,CACE;QACEmB;QACA9B,QAAQ;UAACiC,UAAUA,SAASH;UAAIC,eAAeG,SAAaH,aAAa;UAAGC;QAAI;QAChF/B,SAASgC,SAASjC;MACpB,CAAA,CACF;IACF,CACD;EACH,GACA,CAACW,YAAYR,UAAUK,gBAAgB,CAAA;AAGzC,QAAM2B,UAA8B1B,sBAClC,OAAO;;IAELV,OAAOD;;IAGPa;;IAGAT;;IAGAD;;IAGAD;;IAGAoC,kBAAkB5B,iBAAiBG,UAAU,IACzCH,iBAAiBG,UAAU,EAAE0B,SAAS,IACtC;;IAGJC,aAAa9B,iBAAiBG,UAAU,IAAIH,iBAAiBG,UAAU,EAAE0B,SAAS;;IAGlFE,kBAAkB/B;;IAGlBgC;;IAGAC;;;IAIAC;;IAGAd;;IAGAe;;IAGAC,gBAAgB,WAAqB;AAAA,UAApBC,OAAOC,UAAAT,SAAA,KAAAS,UAAA,CAAA,MAAAC,SAAAD,UAAA,CAAA,IAAA,CAAA;AACtBlC,yBAAmB,MAAM,CACvB;QAACkB,IAAIe,KAAKf,MAAM;QAAI7B,SAAS4C,KAAK5C;QAASD,QAAQ6C,KAAK7C,UAAU,CAAA;MAAE,CAAA,CACrE;IACH;;IAGAgD,cAAcA,MAAY;AACxBpC,yBAAmB,CAACY,UAAUC,SAC5BD,SAASa,SAAS,IAAIb,SAASyB,OAAQC,aAAYA,YAAYzB,IAAI,IAAID,QAAA;IAE3E;;IAGA2B,kBAAmBC,aAAkB;AAChBxC,yBAAA,CAACY,UAAUC,SAAS;AACrC,cAAM4B,iBAAiB;UACrB,GAAG5B;UACHxB,UAASmD,WAAS,OAAA,SAAAA,QAAAnD,YAAWwB,KAAKxB;UAClCD,SAAQoD,WAAS,OAAA,SAAAA,QAAApD,WAAUyB,KAAKzB;QAAA;AAG3B,eAAA,CACL,GAAGwB,SAASL,MAAM,GAAGjB,YAAY,GACjCmD,gBACA,GAAG7B,SAASL,MAAMjB,YAAY,CAAA;MAChC,CACD;IACH;;IAGAoD,SAAUC,YAAW;AACb,YAAAC,iBAAaC,YAAAA,SAAKzD,QAAQ,MAAM;AAC/B,aAAA0B,UAAU6B,SAAS;QAAC,GAAGC;QAAYE,MAAMH;MAAA,IAAUC,UAAU;IACtE;;IAGA9B;;IAGAJ;;IAGAlB;EAAA,IAEF,CACEN,WACAa,YACAiB,qBACAhB,oBACAR,gBACAJ,QACAC,SACAO,kBACAkB,WACAJ,YACApB,YAAA,CACF;AAGF,aAAA,wBAAQyD,kBAAkBC,UAAlB;IAA2BC,OAAO1B;IAAMnD;EAAS,CAAA;AAC3D;ACrMO,SAAS8E,gBACdC,OACAC,MACAC,OACAC,QACsE;AARxE,MAAAC,KAAAC;AASE,QAAMC,MAAM;IACVC,MAAMP,MAAMC,KAAKM,OAAOP,MAAME,MAAMK;IACpCC,OAAOR,MAAMC,KAAKO,QAAQR,MAAME,MAAMM;EAAA;AAGlC,QAAAC,gBAAeL,MAAKH,KAAAS,aAAL,OAAiBN,MAAAO;AAChC,QAAAC,iBAAgBP,MAAMH,MAAAQ,aAAN,OAAkBL,MAAAM;AAElC,QAAAE,eAAeC,KAAKC,IAAId,KAAKe,YAAYC,UAAUX,IAAIE,QAAQI,aAAa;AAC5E,QAAAM,gBAAgBJ,KAAKC,IAAIb,MAAMc,YAAYC,UAAUX,IAAIE,QAAQC,YAAY;AAG/E,MAAAU,YAAYV,eAAeT,MAAMC,KAAKO;AACpC,QAAAY,iBAAiBpB,MAAME,MAAMM,QAAQU;AAC3C,MAAIC,YAAYC,gBAAgB;AAClBD,gBAAAC;EACd;AAGI,MAAAC,YAAYrB,MAAME,MAAMM,QAAQI;AAC9B,QAAAU,gBAAgBT,eAAeb,MAAMC,KAAKO;AAChD,MAAIa,YAAYC,eAAe;AACjBD,gBAAAC;EACd;AAEM,QAAAC,UAAUT,KAAKC,IAAID,KAAKU,IAAIrB,QAAQgB,SAAS,GAAGE,SAAS;AAEzD,QAAAI,QAAQzB,MAAMC,KAAKO,QAAQe;AAC3B,QAAAG,SAAS1B,MAAME,MAAMM,QAAQe;AAEnC,QAAMI,WAAYF,QAAQnB,IAAIE,QAASF,IAAIC;AAC3C,QAAMqB,YAAaF,SAASpB,IAAIE,QAASF,IAAIC;AAE7C,SAAO;IAACoB;IAAUF;IAAOG;IAAWF;EAAM;AAC5C;ACxCgB,SAAAG,YAAYC,aAA0BC,IAA2B;AAC/E,QAAMC,OAAiB,CAAA;AAEvB,MAAIC,IAAIF;AAER,SAAOE,MAAMH,aAAa;AACxB,UAAMI,gBAAgBD,EAAEC;AAExB,QAAI,CAACA;AAAsB,aAAAF;AAE3B,UAAM/G,WAAWkH,MAAMC,KAAKF,cAAcG,UAAU;AAC9C,UAAArG,SAAQf,SAASqH,QAAQL,CAAC;AAEhCD,SAAKO,QAAQvG,MAAK;AAElB,QAAIkG,kBAAkBJ,aAAa;AAC1B,aAAAE;IACT;AAEIC,QAAAC;EACN;AAEO,SAAAF;AACT;ACxBA,IAAMQ,aAAuB,CAAA;AAKb,SAAAC,cAAcX,aAA0BY,UAA+B;AAG/E,QAAAC,OAAA,oBAAUC,QAA+B;AAE/C,aAAWC,WAAWH,UAAU;AAC9BC,IAAAA,KAAIG,IAAID,SAAShB,YAAYC,aAAae,OAAO,CAAC;EACpD;AAEM,QAAAE,qBAAqBA,CAACC,GAAgBC,MAAmB;AAC7D,UAAM7C,MAAKuC,KAAIO,IAAIF,CAAC,KAAKR;AACzB,UAAMnC,MAAKsC,KAAIO,IAAID,CAAC,KAAKT;AAEzB,UAAMW,MAAMrC,KAAKU,IAAIpB,IAAG9B,QAAQ+B,IAAG/B,MAAM;AAGzC,aAAS8E,IAAI,GAAGA,IAAID,KAAKC,KAAK,GAAG;AACzB,YAAAC,SAASjD,IAAGgD,CAAC,KAAK;AAClB,YAAAE,SAASjD,IAAG+C,CAAC,KAAK;AAExB,UAAIC,WAAWC,QAAQ;AACrB,eAAOD,SAASC;MAClB;IACF;AAEO,WAAA;EAAA;AAGTZ,WAASa,KAAKR,kBAAkB;AAClC;ACdO,SAASS,6BAAmD;AACjE,QAAMC,YAAuC,CAAA;AAC7C,QAAMf,WAA0B,CAAA;AAC1B,QAAAgB,aAAA,oBAAiBd,QAAkE;AACnF,QAAAe,0BAAA,oBAA8BC,IAAiB;AACrD,QAAM5D,QAAkC,CAAA;AAGxC,MAAI8B,cAAkC;AACtC,MAAI+B,YAAY;AAChB,MAAIC,kBAAsC;AACtC,MAAAC,gBAAA,oBAAoBC,IAAiC;AACzD,MAAIC,WAAW;AAEf,WAASC,SAASrB,SAAsB;AACtCc,4BAAwBQ,IAAItB,OAAO;AAEnC,QAAIiB,oBAAoBjB,SAAS;AACbiB,wBAAA;IACpB;AAEiBM,qBAAA;EACnB;AAEA,WAASC,OAAOxB,SAAsB;AACpCc,4BAAwBW,OAAOzB,OAAO;AAEpBiB,sBAAAjB;AAEDuB,qBAAA;EACnB;AAES,WAAAG,MAAM1B,SAAsBxD,SAAyB;AAC5DqE,eAAWZ,IAAID,SAAS;MAAC,GAAGxD;MAASmF,UAAUnF;KAAQ;AAEvDqD,aAAS+B,KAAK5B,OAAO;AAErB,QAAIf,aAAa;AACfW,oBAAcX,aAAaY,QAAQ;IACrC;AAEA2B,WAAOxB,OAAO;AAEd,WAAO,MAAM;AACL,YAAA6B,MAAMhC,SAASJ,QAAQO,OAAO;AAEpC,UAAI6B,MAAM,IAAI;AACHhC,iBAAAiC,OAAOD,KAAK,CAAC;MACxB;AAEAhB,iBAAWY,OAAOzB,OAAO;AAERuB,uBAAA;IAAA;EAErB;AAGS,WAAAQ,OAAO3G,MAAgC4G,aAA0B1E,QAAgB;AA/E5F,QAAAC,KAAAC,KAAAyE,KAAAC;AAgFU,UAAAC,YAAYtC,SAASJ,QAAQuC,WAAW;AACxC,UAAAI,cAAcvB,WAAWR,IAAI2B,WAAW;AAE9C,QAAI,CAACI;AAAa;AAEZ,UAAAC,eAAexC,SAASsC,YAAY,CAAC;AACrC,UAAAG,eAAezB,WAAWR,IAAIgC,YAAY;AAEhD,QAAI,CAACC;AAAc;AAEnB,QAAIlH,SAAS,SAAS;AACTgG,iBAAA;AAEXjE,YAAMC,OAAO;QACX4C,SAASgC;QACTtE,MAAM0E,YAAY1E,QAAQ;QAC1BC,OAAOqE,YAAYO;MAAA;AAGrBpF,YAAME,QAAQ;QACZ2C,SAASqC;QACT3E,MAAM4E,aAAa5E,QAAQ;QAC3BC,OAAO0E,aAAaE;MAAA;AAGLhB,uBAAA;IACnB;AAEA,QAAInG,SAAS,UAAU+B,MAAMC,QAAQD,MAAME,OAAO;AAChD6D,sBAAA,oBAAoBC,IAAiC;AAErD,YAAM;QAACvC;QAAOC;QAAQC;QAAUC;MAAa,IAAA7B,gBAC3CC,OACAiF,aACAE,cACAhF,MAAA;AAIF4D,oBAAcjB,IAAI+B,aAAa;QAACtE,MAAMoB;QAAUnB,OAAOiB;OAAM;AAC7DsC,oBAAcjB,IAAIoC,cAAc;QAAC3E,MAAMqB;QAAWpB,OAAOkB;OAAO;AAE/C0C,uBAAA;IACnB;AAEA,QAAInG,SAAS,OAAO;AACPgG,iBAAA;AAEL,YAAAoB,iBAAiBtB,cAAcb,IAAI2B,WAAW;AAC9C,YAAAS,kBAAkBvB,cAAcb,IAAIgC,YAAY;AAGtDxB,iBAAWZ,IAAI+B,aAAa;QAC1B,GAAGI;QACHM,iBAAiB;QACjBC,kBAAiBpF,MAAY6E,YAAAjE,aAAZ,OAAwBZ,MAAAa;QACzCV,OAAMF,MAAAgF,kBAAA,OAAA,SAAAA,eAAgB9E,SAAhB,OAAAF,MAAwB4E,YAAY1E;MAAA,CAC3C;AAGDmD,iBAAWZ,IAAIoC,cAAc;QAC3B,GAAGC;QACHI,iBAAiB;QACjBC,kBAAiBV,MAAYG,YAAAjE,aAAZ,OAAwB8D,MAAA7D;QACzCV,OAAMwE,KAAAO,mBAAA,OAAA,SAAAA,gBAAiB/E,SAAjB,OAAAwE,KAAyBI,aAAa5E;MAAA,CAC7C;AAGDwD,sBAAA,oBAAoBC,IAAI;AAGxB,aAAOhE,MAAMC;AACb,aAAOD,MAAME;AAEIkE,uBAAA;IACnB;EACF;AAEA,WAASqB,eAAeC,iBAAqC;AAC7C5D,kBAAA4D;EAChB;AAEA,WAASC,aAAaC,eAAuB;AAC/B/B,gBAAA+B;AACKxB,qBAAA;EACnB;AAEA,WAASyB,UAAUC,UAAmC;AACpDrC,cAAUgB,KAAKqB,QAAQ;AAEvB,WAAO,MAAM;AACL,YAAApB,MAAMjB,UAAUgB,KAAKqB,QAAQ;AAEnC,UAAIpB,MAAM,IAAI;AACFjB,kBAAAkB,OAAOD,KAAK,CAAC;MACzB;IAAA;EAEJ;AAEA,SAAO;IAACR;IAAUG;IAAQE;IAAOK;IAAQa;IAAgBE;IAAcE;;AAGvE,WAASzB,mBAAmB;AAtL9B,QAAAhE,KAAAC,KAAAyE,KAAAC;AAuLI,QAAI,CAAClB;AAAW;AAIhB,UAAMkC,YAA2B,CAAA;AACjC,eAAWlD,WAAWH,UAAU;AAC9B,UAAIG,YAAYiB,iBAAiB;AAC/BiC,kBAAUxD,QAAQM,OAAO;MAC3B;IACF;AACA,QAAIiB,iBAAiB;AACnBiC,gBAAUxD,QAAQuB,eAAe;IACnC;AAEM,UAAAkC,UAAA,oBAAcpD,QAA+B;AACnD,UAAMO,MAAM4C,UAAUzH;AAChB,UAAA2H,cAAcF,UAAU,CAAC;AACzB,UAAAG,kBAAkB/C,MAAM,KAAKgD;AAEnC,QAAIC,eAAevC,YAAYqC;AAE/B,eAAWrD,WAAWkD,WAAW;AACzB,YAAA1G,UAAUqE,WAAWR,IAAIL,OAAO;AAEtC,UAAI,CAACxD,SAAS;AACZ;MACF;AAEA,YAAMqB,WAAWrB,QAAQkG,mBAAmBlG,QAAQqB,YAAYC;AAChE,YAAM0F,SAASxD,YAAYoD;AAIrB,YAAAK,gBAAgB3C,wBAAwB4C,IAAI1D,OAAO;AAEzD,YAAM2D,gBAAgB9F,WAAW0F;AAE3B,YAAAK,YAAYJ,SAAS,QAAQC,iBAAiBE;AAE9C,YAAAE,aAAa3C,cAAcb,IAAIL,OAAO;AAG5CmD,cAAQlD,IAAID,SAAS;QACnBA;QACA4D;QACAlB,kBAAiBnF,MAAAsG,cAAA,OAAA,SAAAA,WAAYlG,UAAZ,OAAAJ,MAAqBf,QAAQkG;QAC9CC,kBAAiBnF,MAAAqG,cAAA,OAAA,SAAAA,WAAYlG,UAAZ,OAAAH,MAAqBhB,QAAQmG;QAC9CjF,OAAMwE,MAAYD,MAAA4B,cAAA,OAAA,SAAAA,WAAAnG,SAAZ,OAAoBuE,MAAAzF,QAAQkB,SAA5B,OAAoCwE,KAAA;MAAA,CAC3C;AAGD,UAAI0B,WAAW;AACGL,wBAAAD;MAAA,OACX;AACLC,wBAAgB1F,WAAWyF;MAC7B;IACF;AAEA,UAAMxJ,QAAoB,CAAA;AAE1B,eAAWkG,WAAWH,UAAU;AACxB,YAAAiE,OAAOX,QAAQ9C,IAAIL,OAAO;AAE5B,UAAA8D;AAAMhK,cAAM8H,KAAKkC,IAAI;IAC3B;AAEA,eAAWb,YAAYrC,WAAW;AACvBqC,eAAA;QACPhC,iBAAiBA,mBAAmBpB,SAASA,SAASpE,SAAS,CAAC,KAAK;QACrE3B;QACAsH;MAAA,CACD;IACH;EACF;AACF;AC1OO,SAAS2C,WACd7L,OAGA;AACA,QAAM;IAACE;IAAUyF;IAAUmG;IAAYC;IAAU,GAAGC;EAAa,IAAAhM;AACjE,QAAMiM,iBAAatK,sBAAQ,MAAM8G,2BAA2B,GAAG,CAAA,CAAE;AACjE,QAAM,CAAC1B,aAAa2D,cAAc,QAAIwB,uBAAgC,IAAI;AACpE,QAAAC,WAAWC,eAAerF,WAAW;AACrC,QAAAtB,SAAQ0G,YAAAA,OAAAA,SAAAA,SAAU1G,UAAS;AACjC,QAAMiG,YAAYjG,UAAU,UAAa,CAACE,WAAW,SAAYF,QAAQE;AACzE,QAAM,CAAC0G,OAAOC,QAAQ,QAAIJ,uBAA0B;IAClDnD,iBAAiB;IACjBnH,OAAO,CAAA;IACPsH,UAAU;EAAA,CACX;AAGSqD,8BAAA,MAAMN,WAAWvB,eAAe3D,WAAW,GAAG,CAACkF,YAAYlF,WAAW,CAAC;AAGvEwF,8BAAA,MAAMN,WAAWrB,aAAanF,KAAK,GAAG,CAACwG,YAAYxG,KAAK,CAAC;AAGnE8G,8BAAU,MAAMN,WAAWnB,UAAUwB,QAAQ,GAAG,CAACL,UAAU,CAAC;AAG5DM,8BAAU,MAAM;AACd,QAAIb,cAAc;AAAW;AAC7B,QAAIA,aAAaI;AAAuBA,iBAAA;AACxC,QAAI,CAACJ,aAAaK;AAAmBA,eAAA;EACpC,GAAA,CAACL,WAAWI,YAAYC,QAAQ,CAAC;AAGpC,QAAMS,iBAAqC7K,sBACzC,OAAO;IACLwH,UAAU8C,WAAW9C;IACrBuC;IACApC,QAAQ2C,WAAW3C;IACnBP,iBAAiBsD,MAAMtD;IACvBS,OAAOyC,WAAWzC;IAClB5H,OAAOyK,MAAMzK;IACbiI,QAAQoC,WAAWpC;IACnBX,UAAUmD,MAAMnD;EAAA,IAElB,CAACwC,WAAWO,YAAYI,MAAMtD,iBAAiBsD,MAAMzK,OAAOyK,MAAMnD,QAAQ,CAAA;AAG5E,aACG7I,wBAAAoM,kBAAkB3H,UAAlB;IAA2BC,OAAOyH;IACjCtM,cAAAG,wBAACqM,QAAA;MACC,WAAQ;MACP,GAAGV;MACJ,kBAAgBN,YAAY,KAAK;MAEjC,iBAAeW,MAAMnD,WAAW,KAAK;MAGrC,gBAAczD,QAAQ,KAAK;MAC3BkH,KAAKjC;MAEJxK;IAAA,CAEL;EAAA,CAAA;AAEJ;AC1EO,SAAS0M,uBAAuB5M,OAAyD;AAC9F,QAAM;IAAC6M;IAAYC;IAActH;EAAA,IAAQxF;AACnC,QAAA;IAAC0L;MAAaqB,QAAQ;AAC5B,QAAM;IAACC;IAAgBC;EAAS,IAAIC,gBAAgB;AAC9C,QAAA;IAACC;MAAYC,YAAY;AAEzB,QAAAC,kBAActL,0BAAY,MAAM;AAChC,QAAAkL;AAAWD,qBAAeC,UAAUK,IAAI;EAAA,GAC3C,CAACN,gBAAgBC,SAAS,CAAC;AAE9B,MAAIvB,aAAa,CAACuB;AAAkB,WAAA;AAE9B,QAAAnF,cAAUyF,4BAAcN,UAAUO,WAAW;IACjDC,SAASJ;IACTR;IACAC;EAAA,CACD;AAED,MAAIK,SAASO,gBAAgB;AAEzB,eAAArN,wBAACsN,WAAA;MACCC,IAAG;MACH,WAAQ;MACRpI;MACAS,UAAU4H;MACVlI,UAAUmI;MAET5N,UAAA4H;IAAA,CAAA;EAGP;AAEA,aAAA,wBACGiG,KAAI;IAAAH,IAAG;IAAQ,WAAQ;IAAyBpI;IAC9CtF,UACH4H;EAAA,CAAA;AAEJ;;;;;;;;;;;;ACrCO,IAAMkG,sBAAN,cAAkCC,MAAM;EAK7CC,YAAAA,OAA2E;AAAA,QAA/D;MAACC;MAASC;MAASC;MAAQC;QAAoCC;AACzE,UAAMJ,OAAO;AALfK,kBAAA,MAAA,OAAA;AACAA,kBAAA,MAAA,SAAA;AACAA,kBAAA,MAAA,QAAA;AAIE,SAAKJ,UAAUA;AACf,SAAKC,SAASA;AACd,SAAKC,QAAQA;EACf;AACF;ACrBA,IAAMG,gBAAA,oBAAoB5G,QAAwB;AAQ3C,SAAS6G,SAASC,KAAqB;AACtC,QAAAC,cAAcH,cAActG,IAAIwG,GAAG;AACrC,MAAAC;AAAoB,WAAAA;AAExB,QAAM5L,KAAK6L,OAAO;AACJJ,gBAAA1G,IAAI4G,KAAK3L,EAAE;AAClB,SAAAA;AACT;AChBA,IAAM8L,YAAA,oBAAgBjH,QAAuC;AAU7C,SAAAkH,SAASJ,KAA8BK,WAA6B;AAClF,QAAMC,eAAeH,UAAU3G,IAAIwG,GAAG,KAAA,oBAAS1F,IAAsB;AACrE,MAAIgG,cAAc;AACVC,UAAAA,SAAQD,aAAa9G,IAAI6G,SAAS;AACpCE,QAAAA;AAAcA,aAAAA;EACpB;AAEM,QAAAC,SAASR,IAAIK,SAAS;AAExB,MAAA,OAAOG,WAAW,YAAY;AAChC,UAAM,IAAIlB,MACR,sBAAuBmB,OAAAJ,WAAS,6BAA+B,EAAAI,OAAA,OAAOD,QAAM,WAAA,CAAA;EAEhF;AAEM,QAAAD,QAAQC,OAAOE,KAAKV,GAAG;AAChBM,eAAAlH,IAAIiH,WAAWE,KAAK;AACvBJ,YAAA/G,IAAI4G,KAAKM,YAAY;AAExB,SAAAC;AACT;ACrBA,IAAMI,YAAaC,WAA8C;AAC/D,SAAO,CAAC,CAACA,SAAS,QAAOA,SAAAA,OAAAA,SAAAA,MAAOC,UAAS;AAC3C;AACA,IAAMC,iBAAkBF,WAA0C;AAC5D,MAAA,CAACG,WAASH,KAAK;AAAU,WAAA;AACtB,SAAA,OAAOA,MAAMI,cAAc;AACpC;AAcA,IAAMC,kCACHC,UAAS,CAACC,gBAAgB1B,SAASpN,cAAc;AAC5C,MAAA;AACK,WAAA6O,KAAKC,gBAAgB1B,SAASpN,SAAS;WACvCkG,GAAG;AAEV,QAAIA,aAAa8G,qBAAqB;AAC9B,YAAA9G;IACR;AAIA,UAAM,IAAI8G,oBAAoB;MAC5BG,SAAS,QAAOjH,KAAA,OAAA,SAAAA,EAAGiH,aAAY,WAAWjH,EAAEiH,UAAU;MACtDC;MACAE,OAAOpH;IAAA,CACR;EACH;AACF;AAEF,IAAM6I,wBACHF,UACD,WAAa;AACJ,SAAAA,KAAK,GAAA7L,SAAO,EAAEgM;;;;IAInBC,cAAc,CAAC;IACfC,SAAS;EAAA;AAEb;AAEK,SAASC,mBAAmBC,YAAkD;AAKnF,QAAMC,cAAcT,gCAClBG,sBACEK,WAAW,CAACN,gBAAgB1B,SAASpN,cAAc;AACjD,QAAI,CAAC8O,gBAAgB;AACnB,YAAM,IAAI9B,oBAAoB;QAC5BG,SAAS;QACTC;QACAC,QAAQ;MAAA,CACT;IACH;AAEA,QAAIiB,UAAUQ,cAAc,KAAKQ,aAAaR,cAAc,GAAG;AACtD,aAAAzI,KAAKyI,cAAc,EAAEE,KAC1BO,UAAWC,YAAWH,YAAYG,QAAQpC,SAASpN,SAAS,CAAC,CAAA;IAEjE;AAEI,QAAAyO,eAAeK,cAAc,GAAG;AAClC,aAAOO,YAAYP,eAAeH,UAAUvB,OAAO,GAAGA,SAASpN,SAAS;IAC1E;AAEI,QAAA,OAAO8O,mBAAmB,YAAY;AACxC,aAAOO,YAAYP,eAAe1B,QAAQpL,IAAIoL,OAAO,GAAGA,SAASpN,SAAS;IAC5E;AAEA,WAAOyP,GAAaX,cAAc;EAAA,CACnC,CACH,CAAA;AAGK,SAAAO;AACT;AC1DA,eAAsBK,cAAcpM,SAAqD;AACjF,QAAAqM,oBAAA,oBAAwB1H,IAAkC;AAGhE,QAAM2H,UAAmCC,YAAW,CAACf,gBAAgB1B,SAASpN,cAAc;AACpF,UAAA8P,MAAMhB,kBAAkB,GAAGV,OAASV,SAAAoB,cAAc,GAAC,GAAI,EAAAV,OAAAhB,QAAQnH,KAAK8J,KAAK,IAAI,CAAA;AACnF,UAAMC,qBAAqBF,OAAOH,kBAAkBxI,IAAI2I,GAAG;AACvD,QAAAE;AAA2B,aAAAA;AAE/B,UAAMR,SAASK,OAAOf,gBAAgB1B,SAASpN,SAAS;AACpD,QAAA8P;AAAuBH,wBAAA5I,IAAI+I,KAAKN,MAAM;AACnC,WAAAA;EAAA;AAGH,QAAAH,cAAcF,mBAAmBS,OAAO;AAE9C,QAAMK,sBAAmC,CACvC,CACE;IACEjO,IAAI,WAAWoM,OAAA9K,QAAQpD,OAAO8B,EAAA;IAC9B9B,QAAQ;MAAC,OAAGyD,YAAAA,SAAKL,QAAQpD,QAAQ,CAAC,IAAI,CAAC;MAAGgC,MAAMoB,QAAQpD,OAAOgC;IAAI;IACnE/B,SAASmD,QAAQnD;EACnB,CAAA,CACF;AAGF,iBAAe+P,SAASC,OAatB;AAAA,QAbsB;MACtBC;MACApQ;MACAqQ;MACAnQ;MACAoQ,QAAAA;MACArK;MACA9F;MACA2O;MACAyB;MACAC;IAAA,IAGAL;AAjFJ,QAAA9L;AAkFI,QAAI,CAACyK;AAAgB,aAAO,CAAA;AAE5B,UAAM;MAAC9M,IAAIyO;MAAUvO,MAAMwO;MAAgB,GAAGC;IAAe,IAAAzQ;AAC7D,UAAMkN,UAAoC;MACxCpL,IAAIoO;MACJQ,YAAY;MACZN,QAAAA;MACArK;MACAhG,OAAOD;MACPE,QAAQ,CAAC;MACTC,SAAS;MACTqQ;IAAA;AAEF,UAAMK,eAAe,MAAMC,eAAezB,YAAYP,gBAAgB1B,SAASpN,SAAS,CAAC;AAIzF,QAAI6Q,aAAa3O,SAAS,cAAc2O,aAAa7O,OAAOyO,UAAU;AAC7D,aAAA,CACL;QACE7P,OAAO,CACL,GAAGqF,KAAK5E,MAAM,GAAG4E,KAAK1D,SAAS,CAAC,EAAEqE,IAAKS,OAAM,CAAC;UAACrF,IAAIqF;QAAE,CAAA,CAAC,GACtD,CAAC;UAACrF,IAAIyO;UAAUvQ,QAAQyQ;UAAaxQ;SAAQ,CAAA;QAE/C4Q,YAAY9K,KAAK1D;QACjBgO;MACF,CAAA;IAEJ;AAIA;;QAEElM,MAAawM,aAAAG,oBAAb,OAA+B,SAAA3M,IAAA4M,KAAAJ,cAAAR,QAAQnQ,QAAQ;QAC7CgR,MAAML;QACN5Q,OAAOD;MAAA,CACT;;MAGC6Q,aAAa3O,SAAS;MAErB2O,aAAaH,mBAAmBA;;;;;MAMhCG,aAAavN,QAAQH,WAAW;MAClC;AACO,aAAA,CACL;QACEvC,OAAO;;UAEL,GAAGqF,KAAKW,IAAK5E,QAAO,CAAC;YAACA;UAAE,CAAC,CAAC;;UAE1B,CAAC;YAACA,IAAI9B,OAAO8B;YAAI9B,QAAQyQ;YAAaxQ;WAAQ;QAAA;QAEhD4Q,YAAY9K,KAAK1D;QACjBgO;MACF,CAAA;IAEJ;AAEA,QAAIM,aAAa3O,SAAS,UAAU2O,aAAaM,SAASN,aAAaO,OAAO;AAC5E,cACE,MAAMC,QAAQC,IACZT,aAAaO,MAAMxK,IAAI,CAACjF,MAAM4P,mBAAmB;AAC/C,YAAI5P,KAAKO,SAAS;AAAkB,iBAAAmP,QAAQG,QAAQ,CAAA,CAAE;AAEtD,eAAOtB,SAAS;UACdE,WAAWzO,KAAK8P,OAAO9P,KAAKK;UAC5BhC,WAAWA,YAAY;UACvBqQ;UACAnQ;UACAoQ,QAAQO;UACR5K,MAAM,CAAC,GAAGA,MAAMtE,KAAKK,EAAE;UACvB7B;UACA2O,gBACE,OAAO+B,aAAaM,UAAU,aAC1BpD,SAAS8C,cAAc,OAAO,IAC9BA,aAAaM;UACnBZ,YAAYgB;UACZf;QAAA,CACD;MAAA,CACF,CAAA,GAEHkB,KAAK;IACT;AAEA,WAAO,CAAA;EACT;AAEM,QAAAC,gBAAgB,MAAMzB,SAAS;IACnCE,WAAW;IACXpQ,WAAW;IACXuQ,YAAY;IACZF,QAAQ/M,QAAQ+M;IAChBnQ,QAAQoD,QAAQpD;IAChBoQ,QAAQ;IACRrK,MAAM,CAAA;IACN9F,SAASmD,QAAQnD;IACjB2O,gBAAgBxL,QAAQsO;IACxBpB,kBAAkBlN,QAAQkN;EAAA,CAC3B;AAED,QAAMqB,oBAAoBF,cAAcnK,KAAK,CAACP,GAAGC,MAAM;AAEjD,QAAAD,EAAE8J,eAAe7J,EAAE6J;AAAmB,aAAA9J,EAAEsJ,aAAarJ,EAAEqJ;AACpD,WAAAtJ,EAAE8J,aAAa7J,EAAE6J;EAAA,CACzB,EAAE,CAAC;AAEJ,MAAIc,mBAAmB;AACrB,WAAOA,kBAAkBjR;EAC3B;AAEO,SAAAqP;AACT;AChLA,IAAM6B,sBAAwCA,CAACC,QAAQ3E,YAA8B;AACnF,QAAMpL,KAAK+P,OAAOC,QAAQ,aAAa,EAAE;AACnC,QAAA;IACJ9R;IACAC;IACAqQ,kBAAkB;MAACyB;IAAmB;EACpC,IAAA7E;AACE,QAAA;IAAClL;IAAMC;EAAY,IAAAjC;AAEzB,MAAI,CAACgC,MAAM;AACT,UAAM,IAAI+K,MACR,sCAAsCmB,OAAEpM,IAAA,yCAAA,CAAA;EAE5C;AAEI,MAAAkQ,yBAAyBD,oBAAoB;IAACE,YAAYjQ;IAAM2J,YAAY7J;GAAG,EAAEA,GAAG,QAAQ;AAEhG,MAAIG,UAAU;AACZ+P,6BAAyBA,uBAAuBE,qBAC9CjQ,UACAhC,OAAA;EAEJ;AAEA,SAAO+R,uBAAuBvD,UAAU;AAC1C;AAMA,SAAS0D,YAAYjF,SAA2C;AAtDhE,MAAA/I,KAAAC;AAuDS,SAAA,eAAe8J,OAAAA,KAAKkE,UAAU;IACnCtQ,IAAIoL,QAAQpL;IACZuQ,UAAUjC,UAAU5C,SAAS4C,MAAM;IACnCrK,MAAMmH,QAAQnH;IACdhG,OAAOmN,QAAQnN;IACf2Q,YAAYxD,QAAQwD;IACpB4B,wBAAuBnO,MAAQ+I,QAAAqF,qBAAR,OAA0B,SAAApO,IAAApE;IACjDyS,uBAAsBpO,MAAQ8I,QAAAqF,qBAAR,OAA0B,SAAAnO,IAAA2B;EAAA,CACjD,GAAC,GAAA;AACJ;AAMA,IAAM0M,uBAAwBC,UAAmC;AAC/D,QAAMC,aAAa;IACjB3Q,MAAM0Q,KAAK1Q;IACXF,IAAI4Q,KAAKE,kBAAkB9Q;IAC3B9B,QAAQ0S,KAAKE,kBAAkB5S,UAAU,CAAC;IAC1CC,SAASyS,KAAKE,kBAAkB3S,WAAW;IAC3CH,WAAW4S,KAAK5S;IAChBa,YAAY+R,KAAK/R;IACjBT,cAAcwS,KAAKxS;IACnB6F,MAAM2M,KAAK3M;IACX8M,UAAUH,KAAK1Q,SAAS,iBAAiBwL,SAASkF,KAAKG,QAAQ,IAAI;EAAA;AAGrE,SAAO,YAAY3E,OAAA4E,KAAKV,UAAUO,UAAU,GAAC,GAAA;AAC/C;AAkFA,SAASI,gBAAgBC,OAOkC;AAAA,MAPlC;IACvBpE;IACAqE;IACA7C,QAAAA;IACArK;IACAoJ;IACAmB;EACF,IAA2D0C;AACzD,QAAM,CAACE,SAAS,GAAGvT,IAAI,IAAIsT;AACrB,QAAAtE,OAAOhP,KAAK,CAAC;AAEnB,QAAMuN,UAAoC;IACxCpL,IAAIoR,QAAQN,kBAAkB9Q;IAC9B4O,YAAYwC,QAAQhT;IACpBkQ,QAAAA;IACArK,MAAM,CAAC,GAAGA,MAAMmN,QAAQN,kBAAkB9Q,EAAE;IAC5C/B,OAAOmT,QAAQpT;IACfE,QAAQkT,QAAQN,kBAAkB5S,UAAU,CAAC;IAC7CC,SAASiT,QAAQN,kBAAkB3S;IACnCqQ;EAAA;AAGE,MAAA;AACF,WAAOnB,YAAYP,gBAAgB1B,SAASgG,QAAQpT,SAAS,EAAEgP;;MAE7DO,UAAWwD,cAAa;AAEtB,cAAMM,mBAAqC;UACzCnR,MAAM;UACN,GAAGkR;UACHL;UACA9M,MAAMmH,QAAQnH;QAAA;AAIhB,cAAMqN,eAAezT,KAAK+G,IAAI,CAACS,GAAGkM,cAAc;AAC9C,gBAAMC,kBAAkB,CACtB,GAAGpG,QAAQnH,MACX,GAAGpG,KAAKwB,MAAMkS,SAAS,EAAE3M,IAAI,CAAC6M,GAAGC,iBAAiB,IAAItF,OAAE/G,EAAArH,YAAY0T,cAAY,GAAG,CAAA,CAAA;AAGrF,gBAAMC,cAAgC;YACpCzR,MAAM;YACN+D,MAAMuN;YACNT,UAAU;YACV,GAAG1L;UAAA;AAGE,iBAAAsM;QAAA,CACR;AAEG,YAAA,CAAC9T,KAAK0C,QAAQ;AACT,iBAAAkN,GAAa,CAAC4D,gBAAgB,CAAC;QACxC;AAEI,YAAAO;AAEJ;;UAEE/E,QAAA,OAAA,SAAAA,KAAMiE,kBAAkB9Q,GAAG6R,WAAW,UAAA;UACtC;AACAD,uBAAaX,gBAAgB;YAC3BnE,gBAAgBgD;YAChBqB,sBAAsBtT;YACtByQ,QAAAA;YACArK,MAAMmH,QAAQnH;YACdoJ;YACAmB;UAAA,CACD;QAAA,WACQ4C,QAAQvS,gBAAegO,QAAA,OAAA,SAAAA,KAAMhO,aAAY;AAIlD+S,uBAAaX,gBAAgB;YAC3BnE;YACAqE,sBAAsBtT;YACtByQ,QAAAA;YACArK;YACAoJ;YACAmB;UAAA,CACD;QAAA,OACI;AAELoD,uBAAaX,gBAAgB;YAC3BnE,gBACE,OAAOiE,SAAS5B,UAAU,aACrBpD,SAASgF,UAAU,OAAO,IAC3BA,SAAS5B;YACfgC,sBAAsBtT;YACtByQ,QAAQyC;YACR9M,MAAMmH,QAAQnH;YACdoJ;YACAmB;UAAA,CACD;QACH;AAEO,eAAApC;;UAELqB,GAAa,CAAC4D,kBAAkB,GAAGC,YAAY,CAAC;;UAEhDM,WAAW5E,KAAKpI,IAAKkN,uBAAsB,CAACT,kBAAkB,GAAGS,iBAAiB,CAAC,CAAC;QAAA;MACtF,CACD;IAAA;WAEI5N,GAAG;AACV,QAAIA,aAAa8G,qBAAqB;AACpC,UAAI9G,EAAEkH,SAAS;AACL2G,gBAAAC,KACN,kCAAkC5F,OAAAA,EAAEhB,QAAQnN,KAAA,EAC1CmO,OAAAA,EAAEhB,QAAQwD,aAAa,IAAI,yBAAyBxC,OAAElI,EAAAkH,QAAQwD,UAAAA,IAAe,IAC/E,IAAA,EAAKxC,OAAAA,EAAEjB,OAAU,EAAAiB,OAAAlI,EAAEmH,SAAS,UAAUe,OAAA6F,gBAAgB/N,EAAEmH,MAAM,CAAM,IAAA,EAAA,GACpEnH,CAAA;MAEJ;AAEI,UAAAA,EAAEmH,WAAW,oCAAoC;AAG5C,eAAAoC,GAAa,CAAA,CAAE;MACxB;IACF;AAEM,UAAAvJ;EACR;AACF;AAMO,SAASgO,6BAA6BC,OAU2B;AAAA,MAV3B;IAC3CC;IACAxC;IACAyC,oBAAoB;MAClBC,sBAAsB,CAAA;MACtBnB,sBAAsB,CAAA;MACtBxD,mBAAA,oBAAuB1H,IAAI;MAC3BoH,aAAaA,MAAMkF;IACrB;IACA/D;EACF,IAAwE2D;AACtE,QAAMK,iBAAiBJ,kBAAkBpF;;IAEvCpI,IAAK6N,oBAAmB,CAAC,CAAC;MAACzS,IAAI;IAAO,CAAA,GAAG,GAAGyS,cAAc,CAAC;;IAE3D7N,IAAK8N,iBAAgB;AACnB,YAAMvB,uBAA8CuB,YACjDC,QAAQ,CAACC,iBAAiB/T,eACzB+T,gBAAgBhO,IAAI,CAACkM,mBAAmB1S,kBAAkB;QACxD0S;QACAjS;QACAT;MAAA,EACA,CAAA,EAGHwG,IAAI,CAACS,GAAGpH,YAAW;QAAC,GAAGoH;QAAGrH,WAAWC;MAAO,EAAA;AAExC,aAAAkT;IAAA,CACR;;IAED0B,UAAU,CAAA,CAA2B;IACrCC,SAAS;IACTlO,IAAImO,WAAkB;AAAA,UAAjB,CAACC,MAAMC,IAAI,IAAMF;AACpB,eAAS1N,IAAI,GAAGA,IAAI4N,KAAK1S,QAAQ8E,KAAK;AAC9B,cAAA6N,YAAYF,KAAK3N,CAAC;AAClB,cAAA8N,YAAYF,KAAK5N,CAAC;AAExB,YAAI,KAAC+N,eAAAA,SAAQF,WAAWC,SAAS,GAAG;AAC3B,iBAAA;YACLhC,sBAAsB8B;YACtBI,WAAWhO;UAAA;QAEf;MACF;AAEO,aAAA;QACL8L,sBAAsB8B;QACtBI,WAAWJ,KAAK1S;MAAA;IAClB,CACD;;IAED+S,KAAK,CAACC,KAAK1G,SAAS;AACZ,YAAA;QAACyF;QAAsB3E;MAAqB,IAAA4F;AAC5C,YAAA;QAACpC;QAAsBkC;MAAa,IAAAxG;AAI1C,YAAM2G,kBAAkBlB,qBAAqBjT,MAAM,GAAGgU,YAAY,CAAC;AACnE,YAAMI,iBAAiBnB,qBAAqBjT,MAAMgU,YAAY,CAAC;AAEzD,YAAAK,aAAa,IAAI7N,IAAI2N,gBAAgBb,QAASgB,YAAWvP,MAAMC,KAAKsP,MAAM,CAAC,CAAC;AAClF,YAAMC,eAAeH,eAClBd,QAASgB,YAAWvP,MAAMC,KAAKsP,MAAM,CAAC,EACtCxS,OAAQ2M,SAAQ,CAAC4F,WAAWlL,IAAIsF,GAAG,CAAC;AAEvC,iBAAWA,OAAO8F,cAAc;AAC9BjG,0BAAkBpH,OAAOuH,GAAG;MAC9B;AAIA,YAAMF,UAAmCC,YAAW,CAACf,gBAAgB1B,SAASpN,cAAc;AACpF,cAAA8P,MAAMhB,kBAAkB,GAAGV,OAAAV,SAASoB,cAAc,GAAC,GAAA,EAAIV,OAAAA,YAAYhB,OAAO,CAAA;AAChF,cAAM4C,qBAAqBF,OAAOH,kBAAkBxI,IAAI2I,GAAG;AACvD,YAAAE;AAA2B,iBAAAA;AAE/B,cAAMR,SAASK,OAAOf,gBAAgB1B,SAASpN,SAAS;AACxD,YAAI,CAAC8P;AAAY,iBAAAN;AAEjB,cAAMqG,cAAcvB,qBAAqBtU,SAAS,KAAA,oBAAS6H,IAAI;AAC/DgO,oBAAYzN,IAAI0H,GAAG;AACnBwE,6BAAqBtU,SAAS,IAAI6V;AAChBlG,0BAAA5I,IAAI+I,KAAKN,MAAM;AAC1B,eAAAA;MAAA;AAGF,aAAA;QACL2D;QACAmB;QACA3E;QACAN,aAAaF,mBAAmBS,OAAO;MAAA;OAExCyE,iBAAiB;;IAEpB9E,UAAUuG,WAAA;AAAA,UAAC;QAAC3C;QAAsB9D;;aAChC4D,gBAAgB;QACdnE,gBAAgB8C;QAChBuB;QACA7C,QAAQ;QACRrK,MAAM,CAAA;QACNoJ;QACAmB;MAAA,CACD;IAAA,CACH;EAAA;AAMF,SAAOgE,eAAexF;;;;;IAKpBsG,KACE,CAACN,MAAMnG,SACLA,KAAKjI,IAAI,CAACmP,UAAU9V,WAAU;AACtB,YAAA+V,WAAWhB,KAAK/U,MAAK;AAC3B,UAAI,CAAC+V;AAAiB,eAAAD;AACtB,UAAIA,SAAS7T,SAAS;AAAkB,eAAA6T;AAExC,UAAIC,SAASlD,kBAAkB9Q,OAAO+T,SAASjD,kBAAkB9Q,IAAI;AAC5D,eAAAgU;MACT;AACO,aAAAD;IAAA,CACR,GACH,CAAA,CACF;;IAEAE,qBAAqB,CAACjB,MAAMnG,SAAS;AAC/B,UAAAmG,KAAKzS,WAAWsM,KAAKtM;AAAe,eAAA;AAExC,eAAS8E,IAAI,GAAGA,IAAIwH,KAAKtM,QAAQ8E,KAAK;AAC9B,cAAA6N,YAAYF,KAAK3N,CAAC;AAClB,cAAA6O,YAAYrH,KAAKxH,CAAC;AACxB,YAAIsL,qBAAqBuC,SAAS,MAAMvC,qBAAqBuD,SAAS,GAAG;AAChE,iBAAA;QACT;MACF;AAEO,aAAA;IAAA,CACR;EAAA;AAEL;ACzZA,SAASC,uBAAuB;AACxB,QAAAC,yBAAqBzV,sBAAQ,MAAM,IAAI0V,cAA2B,CAAC,GAAG,CAAA,CAAE;AAC9E,QAAMC,mBAAe3V,sBACnB,MACEyV,mBACGG,aAAa,EACbvH,KAAKpI,IAAK4P,mBAAkBA,gBAAc,OAAA,SAAAA,aAAA5V,UAAS,CAAA,CAAkB,CAAC,GAC3E,CAACwV,kBAAkB,CAAA;AAErB,QAAM;IAAC/K,OAAO7K;EAAW,IAAID,UAAU;AACvCgL,8BAAU,MAAM;AACd6K,uBAAmBvH,KAAKrO,WAAW;EAAA,GAClC,CAACA,aAAa4V,kBAAkB,CAAC;AAE7B,SAAAE;AACT;AAEO,SAASG,mBAA0B;AAIxC,QAAM,CAACC,OAAOC,QAAQ,QAAIzL,uBAAkB;AACxC,MAAAwL;AAAa,UAAAA;AAEjB,QAAM;IAAClG;IAAkBoB;EAAY,IAAIxF,YAAY;AAErD,QAAM,CAACxB,MAAMgM,OAAO,QAAI1L,uBAAgB;IACtC2L,eAAe,CAAA;IACfC,eAAe,CAAA;IACfpC,aAAa,CAAA;EAAC,CACf;AAED,QAAMN,oBAAoB+B,qBAAqB;AAE/C5K,8BAAU,MAAM;AACd,UAAMiJ,iBAAiBN,6BAA6B;MAClDtC;MACAwC;MACA5D;IACD,CAAA,EAAExB,KACDpI,IAAKkQ,mBAAkB;AACrB,YAAMpC,cAAcoC,cAAcC,OAAoB,CAACxB,KAAK1G,SAAS;AACnE,cAAM5N,eAAesU,IAAI1G,KAAKhO,UAAU,KAAK,CAAA;AAChCI,qBAAA4N,KAAKzO,YAAY,IAAIyO,KAAKiE;AACnCyC,YAAA1G,KAAKhO,UAAU,IAAII;AAChB,eAAAsU;MACT,GAAG,CAAA,CAAE;AAEL,YAAMyB,YAAYtC,YAAYnS;AAE9B,YAAMsU,gBAAgBC,cAAclQ,IAAKsK,UAAS;AAhF1D,YAAA7M;AAiFU,cAAM;UAACxD;UAAYb;UAAWI;UAAc0S;UAAmB7M;QAAQ,IAAAiL;AACvE,cAAM+F,SAASnE,kBAAkB9Q;AAC3B,cAAAb,YAAYuT,YAAY7T,aAAa,CAAC;AAE5C,cAAMqW,eAAyB;UAC7BC,QAAQtW,eAAemW,YAAY;UACnCI,cAAa/S,MAAAlD,aAAA,OAAA,SAAAA,UAAY,CAAG,EAAAa,OAAf,OAAqBqC,MAAA;UAClCpE,OAAOD;UACPiX,QAAQnE,kBAAkB9Q;UAC1BnB;UACAiP,KAAK,GACH1B,OAAA8C,KAAKhP,SAAS,YAAY,YAAYgP,KAAK6B,SAAS/Q,IACtD,GAAI,EAAAoM,OAAA6I,QAAM,GAAI,EAAA7I,OAAAhO,YAAA;UACd8Q,MAAMA,KAAKhP,SAAS,YAAYmV,eAAenG,KAAK6B;UACpD7S,QAAQ4S,kBAAkB5S,UAAU,CAAC;UACrC+F,MAAMA,KAAK8J,KAAK,GAAG;UACnB5P,SAAS2S,kBAAkB3S;UAC3BmX,UAAUtX,cAAc8W,cAAcvU,SAAS;UAC/CnC;QAAA;AAGK,eAAA8W;MAAA,CACR;AAEM,aAAA;QACLL;QACAnC;QACAoC,eAAeD,cAAcjQ,IAAKsK,UAASA,KAAKA,IAAI;MAAA;IACtD,CACD,CAAA;AAGG,UAAAqG,eAAe/C,eAAe1K,UAAU;MAC5C+E,MAAOW,YAAWoH,QAAQpH,MAAM;MAChCkH,OAAQxQ,OAAMyQ,SAASzQ,CAAC;IAAA,CACzB;AAEM,WAAA,MAAMqR,aAAaC,YAAY;EACrC,GAAA,CAAC5F,cAAcwC,mBAAmB5D,gBAAgB,CAAC;AAE/C,SAAA5F;AACT;ACtGsB,eAAA6M,wBACpBC,eACA1V,IACAE,MACqC;AACrC,MAAIF,MAAME;AAAa,WAAA;MAACF;MAAIE;;AAC5B,MAAI,CAACF,MAAME;AAAM,WAAO;MAACF,IAAI2V,WAAK;MAAGzV;IAAI;AACrC,MAAAF,MAAM,CAACE,MAAM;AACf,UAAM0V,eAAe,MAAM9G,eACzB4G,cAAcG,uBAAuB7V,EAAE,CAAA;AAGlC,WAAA;MAACA;MAAIE,MAAM0V;;EACpB;AAEA,QAAM,IAAI5K,oBAAoB;IAC5BG,SAAS;EAAA,CACV;AACH;AC/BA,IAAM2K,eAAwC,CAAA;AAMjC,IAAAC,qBAAiBC,mBAAK,SAASD,kBAAiB;AACrD,QAAA;IAAC1X;MAAYE,UAAU;AAC7B,QAAM0X,cAAcxX,mBAClBM,0BAAaP,iBAAgB;AAC3B,UAAM0X,aAAa,OAAO1X,YAAY6P,WAAW,WAAW7P,YAAY6P,SAAS;AACjF,WAAO6H,aACH;MACE7H,QAAQ6H;MACRhY,QAAQwO,WAASlO,YAAYN,MAAM,IAAIM,YAAYN,SAAS4X;MAC5D3X,SAASK,YAAYL;IAEvB,IAAA;EACN,GAAG,CAAA,CAAE,CAAA;AAEP,QAAM;IAACyR;IAAcpB;EAAgB,IAAIpE,YAAY;AACrD,QAAMsL,gBAAgBS,iBAAiB;AACvC,QAAM,CAACzB,OAAOC,QAAQ,QAAIzL,uBAAkB,IAAI;AAG5C,MAAAwL;AAAa,UAAAA;AAGjBnL,8BAAU,MAAM;AACd,QAAI0M,aAAa;AACf,YAAM;QAAC5H;QAAQnQ;QAAQC;MAAA,IAAW8X;AAElC,UAAIG,YAAY;AAEhB,qBAAeC,SAAS;AACtB,cAAM;UAACrW;UAAIE;QAAI,IAAI,MAAMuV,wBACvBC,eACA,OAAOxX,OAAO8B,OAAO,WAAW9B,OAAO8B,KAAK,QAC5C,OAAO9B,OAAOgC,SAAS,WAAWhC,OAAOgC,OAAO,MAAA;AAG9C,YAAAkW;AAAW;AAET,cAAAxX,QAAQ,MAAM8O,cAAc;UAChCW;UACAnQ,QAAQ;YAAC,GAAGA;YAAQ8B;YAAIE;UAAI;UAC5B/B;UACAyR;UACApB;QAAA,CACD;AAEG,YAAA4H;AAAW;AAEf/X,iBAAS;UAACO;QAAK,GAAG;UAACoR,SAAS;QAAK,CAAA;MACnC;AAEOqG,aAAA,EAAEC,MAAM3B,QAAQ;AAEvB,aAAO,MAAM;AACCyB,oBAAA;MAAA;IAEhB;EAAA,GACC,CAACV,eAAeO,aAAa5X,UAAUuR,cAAcpB,gBAAgB,CAAC;AAElE,SAAA;AACT,CAAC;;;;;;ACxED,IAAAnM;AAQA,IAAMkU,cAAcC,sCAAOC,KAAPpU,SAAWA,OAAAqU,aAAA,CAAA,gFAAA,CAAA,EAAA;AAO/B,SAASC,YAAYC,OAAe;AAEhC,SAAAA,MAEG5G,QAAQ,iBAAiB,YAAY,EAErCA,QAAQ,oCAAoC,EAAE,EAE9CA,QAAQ,iBAAiB,GAAG,EAE5BA,QAAQ,IAAI6G,OAAO,oBAAoBzK,OAAAA,OAAO0K,SAASC,IAAA,GAAQ,GAAG,GAAG,IAAI;AAEhF;AAMgB,SAAAC,eAAAC,OAA6C;AAAA,MAA9B;IAACvC;MAA6BuC;AACvD,MAAA,EAAEvC,iBAAiB1J,sBAAsB;AACrC,UAAA0J;EACR;AACM,QAAA;IAACpJ;EAAS,IAAAoJ;AAKV,QAAAkC,SAAQtL,SAAO,OAAA,SAAAA,MAAAsL,UAASlC,MAAMkC;AAC9B,QAAAM,YACJN,SAAS,EAAEtL,iBAAiB6L,mBAAmB,CAACzC,MAAMvJ,QAAQiM,SAAS,sBAAsB;AAE/F,QAAMnT,OAAOqH,iBAAiB6L,iBAAiB7L,MAAMrH,OAAO,CAAA;AAC5D,QAAMoH,SAAUC,iBAAiB6L,kBAAkB7L,MAAMD,UAAWqJ,MAAMrJ;AAEpE,QAAAgM,mBAAetY,0BAAY,MAAM;AACrCuY,WAAOR,SAASS,OAAO;EACzB,GAAG,CAAA,CAAE;AAEL,aACGla,wBAAAma,MAAA;IAAKC,QAAO;IAAOC,UAAS;IAAOC,SAAS;IAAGC,QAAO;IAASC,MAAK;IACnE3a,cAAAA,yBAAC4a,WACC;MAAA5a,UAAA,KAACG,wBAAA0a,SAAA;QAAQnN,IAAG;QAAK1N,UAA4C;OAAA,OAE5D8a,yBAAAR,MAAA;QAAKS,WAAW;QAAGN,SAAS;QAAGO,QAAQ;QAAGR,UAAS;QAAOS,QAAQ;QAAGN,MAAK;QACxE3a,UAAA,CAAA+G,KAAK1D,SAAS,SACZyX,yBAAAI,OAAA;UAAMC,OAAO;UACZnb,UAAA,KAAAG,wBAACib,OAAAA;YAAMpb,UAAc;UAAA,CAAA,OACrBG,wBAACkb,MAAAA;YAGErb,UAAK+G,KAAA5E,MAAM,CAAC,EAAEuF,IAAI,CAAC4T,SAASnT;;0CAE1BkR,aAAqC;gBAAArZ,UAAAsb;cAAA,GAApB,GAAGpM,OAAAoM,SAAO,GAAA,EAAIpM,OAAc/G,CAAA,CAAA;aAC/C;WACH,CAAA;SACF,OAGD2S,yBAAAI,OAAA;UAAMH,WAAW;UAAGI,OAAO;UAC1Bnb,UAAA,KAAAG,wBAACib,OAAAA;YAAMpb,UAAK;UAAA,CAAA,OAAA,wBACXqb,MAAM;YAAArb,UAAAga,YAAYP,YAAYC,KAAK,IAAIlC,MAAMvJ;WAAQ,CAAA;SACxD,GAECE,cACEhO,wBAAA0N,KAAA;UAAIkN,WAAW;UACd/a,cAAAG,wBAACob,MAAAA;YACCvb,cAACG,wBAAA,KAAA;cAAEqb,MAAMzG,gBAAgB5G,MAAM;cAAGsN,KAAI;cAAsBC,QAAO;cAAS1b,UAAA;aAE5E;WACF;QACF,CAAA,OAGDG,wBAAA0N,KAAA;UAAIkN,WAAW;UACd/a,cAAAA,wBAAC2b,QAAO;YAAAC,MAAK;YAASC,MAAMC;YAAUnB,MAAK;YAAUoB,SAAS5B;UAAc,CAAA;SAC9E,CAAA;OACF,CAAA;IACF,CAAA;EACF,CAAA;AAEJ;ACjFO,SAAS6B,YAAYlc,OAAyB;AACnD,QAAM;IAACmc;IAAYjK;IAAMkK;EAAA,IAAWpc;AACpC,QAAMkD,OAAQwM,WAASwC,IAAI,KAAKA,KAAKhP,QAAS;AAE9C,aACG8X,yBAAAqB,MAAA;IAAKrZ,IAAIoZ;IAAS9D,UAAU6D;IAC3Bjc,UAAA,KAACG,wBAAAic,YAAA;MAAWC,OAAM;IAAoB,CAAA,OACrClc,wBAAAmc,aAAA;MACCtc,cAACG,wBAAA0N,KAAA;QAAI4M,SAAS;QACXza,UAAA,OAAOgD,SAAS,eACd8X,yBAAAS,MAAA;UAAK7N,IAAG;UAAI6O,OAAK;UAACvc,UAAA,CAAA,+BACMG,wBAAC,QAAA;YAAMH,UAAKgD;UAAA,CAAA,GAAO,yBAAA;SAC5C,QAEC8X,yBAAAS,MAAA;UAAK7N,IAAG;UAAI6O,OAAK;UAACvc,UAAA,CAAA,2CACkBG,wBAAC,QAAA;YAAKH,UAAI;UAAA,CAAA,GAAO,YAAA;QACtD,CAAA;MAEJ,CAAA;KACF,CAAA;EACF,CAAA;AAEJ;AC7BO,SAASwc,gBAAgBzV,MAAoC;AAClE,QAAM0V,aAAa,CACjB;IAACC,IAAI;IAAKzO,SAAS;EAAU,GAC7B;IAACyO,IAAI;IAAMzO,SAAS;EAAgB,CAAA;AAGtC,MAAI0O,OAAO;AACT,UAAM1O,UAAU,CACd,6BACA,yCACAlH,KAAK1D,SAAS,IAAI,mBAAmB6L,OAAKnI,KAAA8J,KAAK,KAAK,CAAM,IAAA,EAAA;AAG5D4L,eAAWjT,KAAK;MACdkT,IAAI;MACJzO,SAASA,QAAQ4C,KAAK,IAAI;IAAA,CAC3B;EACH;AAEM,QAAA+L,MAAMC,GAAG,IAAI;AAEnB,SAAOC,MAAM,GAAGL,WAAW/U,IAAIqV,WAAA;AAAA,QAAC;MAACL;MAAIzO;IAAO,IAAA8O;AAAA,WAAMH,IAAI9M,KAAKkN,MAAM/O,OAAO,GAAGgP,MAAMP,EAAE,CAAC;EAAC,CAAA,CAAC;AACxF;;;;;;AC7BA,IAAAvX;AAqBA,IAAM+X,kBAAkB;AAExB,IAAMC,UAAU7D,sCAAO8D,IAAI,EAAXjY,SAAYA,OAAAqU,aAAA,CAAA,8FAAA,CAAA,EAAA;AAYf,IAAA6D,kBAAcvE,mBAAMhZ,WAA4B;AACrD,QAAA;IACJmd,OAAAA,SAAQ;IACR3X;IACA2I,SAASqP,cAAcd;IACvB/W;IACAyW;IACAnV;IACAqR;IACAiE;IACA1B;EACE,IAAA7a;AAEE,QAAAyd,sBAAkB9b,sBAAQ,MAAM;AAChC,QAAA,OAAO6b,gBAAgB,YAAY;AACrC,aAAOA,YAAYvW,OAAOA,KAAKyW,MAAM,GAAG,IAAI,CAAA,CAAE;IAChD;AAEO,WAAAF;EAAA,GACN,CAACA,aAAavW,IAAI,CAAC;AAEtB,QAAM,CAAC0W,gBAAgBC,iBAAiB,QAAI1R,uBAAwB,MAAM;AACxE,QAAI,OAAOuR,oBAAoB;AAAiB,aAAAA;AACzC,WAAAL;EAAA,CACR;AAED7Q,8BAAU,MAAM;AACd,QAAI,OAAOkR,oBAAoB;AAAiB,aAAA;AAC5C,QAAA,OAAOA,gBAAgB3S,cAAc;AAAmB,aAAA;AAEtD,UAAA+S,MAAMJ,gBAAgB3S,UAAU8S,iBAAiB;AAEhD,WAAA,MAAMC,IAAIrF,YAAY;EAAA,GAC5B,CAACiF,eAAe,CAAC;AAEpB,QAAM,CAACK,gBAAgBC,iBAAiB,QAAI7R,uBAAgC,IAAI;AAChF,QAAM,CAAC8R,SAASC,UAAU,QAAI/R,uBAAS,KAAK;AAE5CK,8BAAU,MAAM;AACd,QAAI,CAACuR;AAAuB,aAAA;AAC5B,WAAOI,MAAM,MAAMD,WAAW,IAAI,CAAC;EAAA,GAClC,CAACH,cAAc,CAAC;AAEnB,QAAMK,cACJnD,yBAACqC,SAAA;IACCe,OAAM;IACN,gBAAcJ,UAAU,KAAK;IAC7BK,WAAU;IACV5D,QAAO;IACP6D,SAAQ;IACR3R,KAAKoR;IAEL7d,UAAA,KAACG,wBAAAke,SAAA;MAAQ9B,OAAK;IAAC,CAAA,IAEbF,SAASoB,uBACTtd,wBAAC0N,KAAI;MAAAkN,WAAW;MACd/a,cAACG,wBAAAob,MAAA;QAAK2C,OAAM;QAAS3B,OAAK;QAAC+B,MAAM;QAC9Bte,UAAAqc,SAASoB;MACZ,CAAA;KACF,CAAA;EAAA,CAAA;AAKN,aAAA,wBACGtB,MAAK;IAAA7W;IAAYxC,IAAIoZ;IAASzW;IAAoB2S;IAAoBuC;IACrE3a,cAAAG,wBAACmc,aAAa;MAAAtc,UAA8Cie;KAAQ;EACtE,CAAA;AAEJ,CAAC;AAEDZ,YAAYkB,cAAc;ACnF1B,IAAMC,UAAU;EACdlR,eAAWmR,mBAAK,MAAM,OAAO,8BAAiB,CAAC;EAC/CC,cAAUD,mBAAK,MAAM,OAAO,8BAAY,CAAC;EACzCE,kBAAcF,mBAAK,MAAM,OAAO,8BAAgB,CAAC;EACjDG,UAAMH,mBAAK,MAAM,OAAO,8BAAQ,CAAC;AACnC;AAOO,IAAMI,mBAAe/F,mBAC1B,SAAS+F,cAAa/e,OAA0B;AACxC,QAAA;IACJmY;IACAC;IACAvW;IACAZ,OAAAA;IACAgX;IACA/F;IACAkK;IACAlb;IACAC;IACA8F;IACAqR;IACAlX;EACE,IAAApB;AAEJ,QAAMgf,gBAAgBN,QAAQxM,KAAKhP,IAAI,KAAKgZ;AAG1C,aAAA7b,wBAACU,oBAAA;IACCC,WAAWC;IACXA,OAAOY;IACPX;IACAC;IACAC;IAEAlB,cAAAG,wBAAC4e,uBAAAA;MAASC,cAAU7e,wBAACkd,aAAAA;QAAYnB;QAAkBnV;QAAYqR;OAAoB;MACjFpY,cAAAG,wBAAC2e,eAAA;QACC5G,aAAaA,eAAe;QAC5BnX,OAAAA;QACAgX;QACAkH,UAAUhH;QACVgE,YAAY7D;QACZ8D;QAEAlK;MAAA,CAAA;KAEJ;EAAA,CAAA;AAGN,GACA,CAAAkN,QAAAC,WAGK;AAAA,MAFH;IAACne,QAAQoe,aAAa,CAAA;IAAIne,SAASoe,cAAc;IAAM,GAAGvJ;EAAA,IAAA;MAC1D;IAAC9U,QAAQ2B,aAAa,CAAA;IAAI1B,SAASsB,cAAc;IAAM,GAAGoN;MACvDwP;AAEC,MAAA,KAACjJ,eAAAA,SAAQkJ,YAAYzc,UAAU;AAAU,WAAA;AACzC,MAAA,KAACuT,eAAAA,SAAQmJ,aAAa9c,WAAW;AAAU,WAAA;AAE/C,QAAM+c,OAAO,oBAAI3W,IAAI,CAAC,GAAG4W,OAAOD,KAAKxJ,IAAI,GAAG,GAAGyJ,OAAOD,KAAK3P,IAAI,CAAC,CAAC;AAKjE,aAAWiB,OAAO0O,MAAM;AACtB,QAAIxJ,KAAKlF,GAAG,MAAMjB,KAAKiB,GAAG;AAAU,aAAA;EACtC;AAEO,SAAA;AACT,CACF;ACzFO,SAAS4O,UAAU1f,OAQvB;AACK,QAAA;IACJE;IACAsK;IACAhF;IACAG;IACAyW;IACAG,QAAQ;IACR1B,OAAO;EACL,IAAA7a;AAGF,aAAAgb,yBAACqB,MAAA;IACC7R;IACAhF;IACAxC,IAAIoZ;IACJzW;IACAkV;IAEA3a,UAAA,KAAAG,wBAACic,YAAAA;MAAWC;KAAc,OAC1Blc,wBAACmc,aAAY;MAAA9B,UAAS;MACpBxa,cAAAG,wBAAC0N,KAAI;QAAA4R,UAAU;QAAGC,UAAU;QACzB1f;MAAA,CACH;IACF,CAAA,CAAA;EAAA,CAAA;AAGN;ACrCA,SAAS2f,gBAAgBC,IAAoB;AAC3C,MAAIA,OAAO,UAAU;AACZ,WAAA;EAET;AACA,MAAIA,OAAO,aAAa;AACf,WAAA;EAET;AACA,SAAO,4BAA4B1Q,OAAA0Q,EAAA;AACrC;AAEA,SAASC,kBAAkBD,IAAoB;AAC7C,MAAIA,OAAO,WAAW;AACb,WAAA;EACT;AACA,MAAIA,OAAO,aAAa;AACf,WAAA;EACT;AACA,MAAIA,OAAO,kBAAkB;AACpB,WAAA;EACT;AACA,MAAIA,OAAO,UAAU;AACZ,WAAA;EACT;AACA,SAAO,0BAA0B1Q,OAAE0Q,IAAA,cAAA;AACrC;AAEA,IAAME,aAAa,CAAC,SAAS,QAAQ;AAExB,IAAAC,+BAA2BjH,mBAAK,SAASiH,4BAA2B;AAC/E,QAAM;IAACvW,MAAMwW;EAAS,IAAIC,SAAS;AACnC,QAAM;IAACtT;IAAYC;EAAY,IAAII,gBAAgB;AAC7C,QAAAkT,QAAaC,0BAA0BxT,YAAYC,YAAY;AAC/D,QAAAwT,gBAAYC,qBAAOH,KAAK;AAE9B7T,8BAAU,MAAM;AACV,QAAA,CAAC6T,SAASA,UAAUE,UAAUlM;AAAS;AAEvC,QAAAgM,MAAMld,SAAS,SAAS;AAChBgd,gBAAA;QACRM,UAAU;QACVC,UAAU;;QACVC,QAAQ;QACRnE,OAAOsD,gBAAgBO,MAAMN,EAAE;QAC/Ba,iBAAA,yBACG,WACC;UAAAzgB,UAAA,KAAAG,wBAAC,WAAA;YAAQH,UAAO;UAAA,CAAA,GACfkgB,MAAM1I,MAAMvJ,OAAA;SACf;MAAA,CAEH;IACH;AAEI,QAAAiS,MAAMld,SAAS,aAAa,CAAC8c,WAAW5F,SAASgG,MAAMN,EAAE,GAAG;AACpDI,gBAAA;QACRM,UAAU;QACVE,QAAQ;QACRnE,OAAOwD,kBAAkBK,MAAMN,EAAE;MAAA,CAClC;IACH;AAEAQ,cAAUlM,UAAUgM;EAAA,GACnB,CAACA,OAAOF,SAAS,CAAC;AAEd,SAAA;AACT,CAAC;ACjEe,SAAAU,mBACdC,WACA/P,KACAgQ,cACsD;AACtD,QAAMC,gBAAgBC,iBAAiB;AACvC,QAAM,CAACjc,OAAOkc,QAAQ,QAAI/U,uBAAgC4U,YAAY;AAEhE,QAAAI,uBAAmBvf,sBAAQ,MAAMof,cAAcI,aAAa,WAAW,GAAG,CAACJ,aAAa,CAAC;AAEzF,QAAAK,eAAWzf,sBAAQ,MAAM;AAC7B,QAAIkf,WAAW;AACb,aAAOK,iBAAiBC,aAAaN,SAAS,EAAEQ,OAAOvQ,GAAG;IAC5D;AAEO,WAAAoQ,iBAAiBG,OAAOvQ,GAAG;EACjC,GAAA,CAACoQ,kBAAkBL,WAAW/P,GAAG,CAAC;AAErCvE,8BAAU,MAAM;AACd,UAAMsR,MAAMuD,SAASE,OAAOR,YAAY,EAAEhW,UAAU;MAClD+E,MAAMoR;IAAA,CACP;AAED,WAAO,MAAMpD,OAAK,OAAA,SAAAA,IAAArF,YAAA;KACjB,CAACsI,cAAchQ,KAAK+P,WAAWO,QAAQ,CAAC;AAE3C,QAAMrZ,UAAMhG,0BACTwf,cAAwB;AACvBN,aAASM,QAAQ;AACjBH,aAASrZ,IAAIwZ,QAAe;EAC9B,GACA,CAACH,QAAQ,CAAA;AAGJ,aAAAzf,sBAAQ,MAAM,CAACoD,OAAOgD,GAAG,GAAG,CAACA,KAAKhD,KAAK,CAAC;AACjD;ACzCO,IAAMyc,mBAAmB;EAACxe,IAAI;EAAUuZ,OAAO;AAAQ;AACvD,IAAMkF,gBAAgB;EAACze,IAAI;EAAOuZ,OAAO;AAAU;AAC7C,IAAAmF,aAAa,CAACF,kBAAkBC,aAAa;ACE1D,IAAME,UAAMC,eAAAA,SAAK,GAAI;AAEL,SAAAC,WAAWC,SAAc/c,OAAiB;AAClD,QAAAgd,SAASJ,IAAIxZ,IAAI2Z,OAAO;AAE9B,MAAIC,WAAW,QAAW;AACpBJ,QAAA5Z,IAAI+Z,SAAS1a,MAAM4a,QAAQjd,KAAK,KAAK2K,WAAS3K,KAAK,CAAC;AACjD,WAAA8c,WAAWC,SAAS/c,KAAK;EAClC;AAEO,SAAAgd;AACT;AAEO,SAASE,eAAe7B,OAAkB;AACzC,QAAA;IAACnZ;EAAQ,IAAAmZ;AACT,QAAAhM,UAAUuN,IAAIxZ,IAAIlB,IAAI;AAE5B,MAAImN,YAAY,QAAW;AAEzB;EACF;AAEIuN,MAAA5Z,IAAId,MAAM,CAACmN,OAAO;AACxB;AAEO,SAAS8N,cAAcpa,SAA4B;AAClD,QAAAqa,MAAM7H,OAAO8H,aAAa;AAEhC,MAAID,KAAK;AACD,UAAAE,QAAQzD,SAAS0D,YAAY;AAEnCH,QAAII,gBAAgB;AACpBF,UAAMG,mBAAmB1a,OAAO;AAChCqa,QAAIM,SAASJ,KAAK;EACpB;AACF;AAEO,SAASK,OAAOtC,OAAkB;AACvC8B,gBAAc9B,MAAMuC,aAAa;AACnC;AAEO,SAASC,eAAexC,OAAkB;AAC/C,QAAMyC,YAAYzC,MAAM0C,YAAY,OAAO1C,MAAM2C,WAAW3C,MAAM4C;AAElE,MAAI,CAACH,WAAW;AACd;EACF;AAEAzC,QAAM6C,eAAe;AAErBf,gBAAc9B,MAAMuC,aAAa;AACnC;AAEO,SAASO,eAAene,OAA6C;AACnE,SAAA2K,WAAS3K,KAAK,KAAKoe,SAASpe,MAAM0N,GAAG,KAAK0Q,SAASpe,MAAMqe,KAAK;AACvE;;;;;;AC3DA,IAAA/d;AAGO,IAAMge,uBAAuB7J,sCAAO8J,IAAIC,YAA6B;AAAA,MAA5B;IAACC;MAA2BD;AAC1E,QAAM;IAACE;IAAOC;IAAOrI;EAAA,IAASmI,MAAMG;AAE7B,SAAAC,GAAAve,SAAAA,OAAGqU,aAAAA,CAAAA,qGAG0B,wBACS,4BACI,8HAKhB,4GAID,w4BAmCS,+BACI,4BACI,qMAQJ,4BACI,sNASb,uQAaF,wIAKA,uFAIF,oFAIA,qFAIC,oFAID,icAAA,CAAA,IApGbgK,MAAMG,KAAKC,QACbJ,MAAMG,KAAKE,MAAM,CAAC,EAAEC,UAClBN,MAAMG,KAAKE,MAAM,CAAC,EAAEE,YAKnBC,IAAI7I,MAAM,CAAC,CAAC,GAIb6I,IAAI7I,MAAM,CAAC,CAAC,GAmCH6I,IAAI7I,MAAM,CAAC,CAAC,GACvBqI,MAAMG,KAAKE,MAAM,CAAC,EAAEC,UAClBN,MAAMG,KAAKE,MAAM,CAAC,EAAEE,YAQtBP,MAAMG,KAAKE,MAAM,CAAC,EAAEC,UAClBN,MAAMG,KAAKE,MAAM,CAAC,EAAEE,YASpBC,IAAI7I,MAAM,CAAC,IAAI,CAAC,GAatBoI,MAAMU,OAAOC,UAKbX,MAAMU,OAAOE,UAIPH,IAAI7I,MAAM,CAAC,CAAC,GAIlBoI,MAAMU,OAAOG,QAIbb,MAAMU,OAAOI,SAIbd,MAAMU,OAAOK,MAAA;AAqB5B,CAAC;AC9HM,SAASC,OAAOzkB,OAAuD;AACtE,QAAA;IAAC0kB;IAAUC;EAAS,IAAA3kB;AAE1B,QAAM4kB,mBAAe7iB,0BAClBqe,WAA+CsE,SAAStE,MAAMxE,OAAO7W,KAAK,GAC3E,CAAC2f,QAAQ,CAAA;AAIT,aAAArkB,wBAACwkB,WAAA;IACC9I,MAAM+I;IACNJ,UAAUE;IACVG,aAAY;IACZ7J,QAAQ;IACRnW,OAAO4f,SAAS;EAAA,CAAA;AAGtB;ACLO,SAASK,cAAchlB,OAA2B;AACjD,QAAA;IAAC+E;EAAS,IAAA/E;AAChB,QAAM;IAACilB;IAAgB7I;EAAO,IAAIlP,gBAAgB;AAC5C,QAAAgY,iBAAiB,GAAG9V,OAAOgN,SAAA,WAAA;AAK3B,QAAA,CAAC+I,YAAYC,gBAAgB,IAAIxE,mBACrC,aACA,oCAAoCxR,OAAAgN,OAAA,GACpC,QAAA;AAIF,QAAMiJ,WAAW3D,WAAW4D,KAAMC,UAASA,KAAKviB,OAAOmiB,UAAU;AAE3D,QAAAK,wBAAoBzjB,0BAAY,MAAM;AAC1CqjB,qBAAiB5D,iBAAiBxe,EAAE;EAAA,GACnC,CAACoiB,gBAAgB,CAAC;AAEf,QAAAK,qBAAiB1jB,0BAAY,MAAM;AACvCqjB,qBAAiB3D,cAAcze,EAAE;EAAA,GAChC,CAACoiB,gBAAgB,CAAC;AAGnB,aAAA/kB,wBAACqlB,QAAA;IACC1iB,IAAI,GAAGoM,OAAc8V,gBAAA,QAAA;IACrBS,QACEzC,eAAene,KAAK,QAChBiW,yBAAA4K,6BAAA;MAAA1lB,UAAA,CAAA,cACW,SAAA,wBACV,MACC;QAAAA,cAAAG,wBAACwlB,UAAS;UAAAjH,UAAU7Z;QAAO,CAAA;OAC7B,CAAA;IACF,CAAA,QAEC1E,wBAAA,MAAA;MAAGH,UAAQ;IAAA,CAAA;IAGhBuN,SAASwX;IACTa,gBAAgBb;IAChBxf,OAAO;IAEPvF,cAAC8a,yBAAAsC,MAAA;MAAKe,WAAU;MAAS5D,QAAO;MAC9Bva,UAAA,KAAAG,wBAACma,MAAAA;QAAKG,SAAS;QAAGQ,QAAQ;QAAG4K,OAAO;UAACC,UAAU;UAAUC,QAAQ;UAAGC,QAAQ;QAAA;QAC1EhmB,cAAC8a,yBAAAmL,SAAA;UAAQ9K,OAAO;UACdnb,UAAA,KAAAG,wBAAC+lB,KAAA;YACC,iBAAe,GAAGhX,OAAc8V,gBAAA,UAAA;YAChClB,UAAU;YACVhhB,IAAI,GAAGoM,OAAc8V,gBAAA,MAAA,EAAO9V,OAAiBoS,iBAAAxe,EAAA;YAC7CqjB,OAAO7E,iBAAiBjF;YACxBN,SAASuJ;YACTlN,UAAU+M,aAAa7D;UAAA,CACzB,OACAnhB,wBAAC+lB,KAAA;YACC,iBAAe,GAAGhX,OAAc8V,gBAAA,UAAA;YAChClB,UAAU;YACVhhB,IAAI,GAAGoM,OAAc8V,gBAAA,MAAA,EAAO9V,OAAcqS,cAAAze,EAAA;YAC1CqjB,OAAO5E,cAAclF;YACrBN,SAASwJ;YACTnN,UAAU+M,aAAa5D;UAAA,CACzB,CAAA;QAAA,CACF;MACF,CAAA,OAEAzG,yBAACsL,UAAA;QACC,mBAAiB,GAAGlX,OAAA8V,gBAAc,MAAO,EAAA9V,OAAA+V,UAAA;QACzC3f,MAAM;QACNxC,IAAI,GAAGoM,OAAc8V,gBAAA,UAAA;QACrBxK,UAAS;QACTC,SAAS;QACToL,OAAO;UAACQ,SAAS;QAAM;QAEtBrmB,UAAA,CAAamlB,aAAA7D,wBAAA,wBACX6B,sBACC;UAAAnjB,cAAAG,wBAACmmB,4BAAAA,SAAA;YACC5a,MAAM7G;YACN8c;YACA5F,SAASgG;YACTwE,QAAQhC;UAAA,CAAA;SAEZ,GAGDY,aAAa5D,qBACZphB,wBAACkb,MAAA;UACCmL,UAAS;UACTC,UAAU;UACVC,WAAWhE;UACXiE,eAAenE;UACfoE,SAASpE;UAERxiB,UAAK8T,KAAAV,UAAUvO,OAAO,MAAM,CAAC;QAAA,CAChC,CAAA;MAAA,CAEJ,CAAA;KACF;EAAA,CAAA;AAGN;;;;;;ACpHA,IAAAM;AAAA,IAAAC;AAaA,IAAMoH,SAAO8M,sCAAOgB,IAAI,EAAXnV,SAAYA,OAAAqU,aAAA,CAAA,2CAAA,CAAA,EAAA;AAKzB,IAAMqN,cAAcvN,sCAAOiC,IAAI,EAAXnW,SAAYA,OAAAoU,aAAA,CAAA,wHAAA,CAAA,EAAA;AAiBnB,IAAAsN,6BAAyBhO,mBAAK,MAAM;AAnCjD,MAAA3T,KAAAC,KAAAyE,KAAAC,IAAAid,IAAAC;AAoCE,QAAMC,uBAAuBC,wBAAwB;AACrD,QAAM;IAAClmB;IAAQW;IAAY4B;IAAkBK;IAAgBH,UAAAA;EAAA,IAAY0jB,cAAc;AACvF,QAAMC,qBAAoBjiB,MAAA5B,iBAAiB5B,UAAU,MAA3B,OAAA,SAAAwD,IAA+B,CAAG,EAAArC;AACtD,QAAAukB,cAAc9jB,iBAAiB5B,aAAa,CAAC;AACnD,QAAM2lB,gBAAgBD,eAAc,OAAA,SAAAA,YAAA,CAAA;AACpC,QAAMhU,WAAWiU,iBAAe,OAAA,SAAAA,cAAAxkB;AAChC,QAAMykB,iBAAiBC,SAAQpiB,MAAAkiB,iBAAAA,OAAAA,SAAAA,cAAetmB,WAAf,OAAA,SAAAoE,IAAuBqiB,GAAG;AACnD,QAAA1kB,oBAAgBtB,sBAAQ,MAAM;AAClC,YAAQT,UAAQ,OAAA,SAAAA,OAAA+B,kBAAiB2kB,WAAe1mB,OAAO+B,aAAa,KAAM;EAAA,GACzE,CAAC/B,UAAQ,OAAA,SAAAA,OAAA+B,aAAa,CAAC;AAa1B,QAAM4kB,gBAAgBC,kBACpB,MAAuC;AACrC,UAAMC,uBAAuB9kB,iBAAgB,OAAA,SAAAA,cAAA,CAAA;AAG7C,QAAI,CAACsQ,YAAY,CAACwU,wBAAwB,CAAC9kB,eAAe;AACxD,aAAO8Z,GAAG;QAACiL,SAAS;MAAM,CAAA;IAC5B;AAEM,UAAAC,cAAcC,eAAe3U,QAAQ;AACrC,UAAAtM,OAAO2gB,WAAeG,oBAAoB;AAGhD,UAAMI,oBAAoBlhB,KAAKmhB,UAC5BC,OAAyB,OAAOA,KAAK,YAAY,UAAUA,CAAA;AAGvD,WAAAjZ;;MAEL2N,GAAG;QAACiL,SAAS;OAAK;;MAElBb,qBACGmB,kCACCL,aACCE,sBAAsB,KAAKlhB,OAAOA,KAAK5E,MAAM,GAAG8lB,iBAAiB,CAAA,EAEnEnY;;;;;QAKCuY,aAAa,GAAG;QAChB3gB,IACE4gB,YAA0C;AAAA,cAAzC;YAACC;YAAOC;cAAiCF;AA3FxDnjB,cAAAA;AA2F4D,iBAAA;YAC5C2iB,SAAS;YACTxX,QAAQ;cACNmY,cAAc;gBACZF,OAAOA,MAAME;gBACbD,WAAWA,UAAUC;cACvB;cACAC,WAAUvjB,MAAAwjB,IAAmBJ,MAAMK,YAAYJ,UAAUI,UAAU7lB,aAAa,MAAtE,OAAA,SAAAoC,IACNtC;YACN;UAAA;QACF,CACF;MACF;IAAA;EAEN,GACA,CAACokB,sBAAsB5T,UAAUtQ,aAAa,GAC9C;IAAC+kB,SAAS;EAAI,CAAA;AAGV,QAAAe,4BAAwBhnB,0BAAY,MAAM;AA9GlDsD,QAAAA;AA+GI,QAAIwiB,cAAcG;AAAS;AAE3B,SAAI3iB,MAAAwiB,cAAcrX,WAAd,OAAA,SAAAnL,IAAsBujB,UAAU;AACnB9kB,qBAAA;QACbd,IAAI6kB,cAAcrX,OAAOoY;QACzB1nB;MAAA,CACD;IACH;EAAA,GACC,CAAC2mB,cAAcG,SAASH,cAAcrX,QAAQ1M,gBAAgB5C,MAAM,CAAC;AAElE,QAAA8nB;;IAEJ,CAACzV,YACD,CAACtQ;IAEDwkB;IAEAI,cAAcG;;;IAIb,GAACje,MAAA8d,cAAcrX,WAAd,OAAA,SAAAzG,IAAsB4e,aAAaF,MAAMQ,cACzC,GAACjf,KAAc6d,cAAArX,WAAd,OAAsB,SAAAxG,GAAA2e,aAAaD,UAAUO;MAEhDhC,KAAAY,cAAcrX,WAAd,OAAA,SAAAyW,GAAsB2B,cAAatB;;AAEjC,MAAA0B;AAAmB,WAAA;AAGrB,aAAA3oB,wBAACqM,QAAAA;IAAKyO,QAAQ;IAAGN,MAAK;IAAU,eAAY;IAC1C3a,cAACG,wBAAAya,WAAA;MAAU6E,UAAU;MAAGC,UAAU;MAAGhF,QAAO;MAASnV,OAAO;MAC1DvF,cAAA8a,yBAACsC,MAAK;QAAAc,OAAM;QACVle,UAAA,KAAAG,wBAACob,MAAK;UAAA+C,MAAM;UACVte,cAAAG,wBAAC6oB,oBAAAA,CAAmB,CAAA;SACtB,KAEChC,KAAcW,cAAArX,WAAd,OAAsB,SAAA0W,GAAA0B,gBAEnB5N,yBAAA4K,6BAAA;UAAA1lB,UAAA,KAAAG,wBAAC0N,KAAI;YAAAvI,MAAM;YAAG2jB,YAAY;YACxBjpB,cAAAG,wBAAC0mB,aAAY;cAAAxK,OAAM;cAAkDiC,MAAM;cAAGte,UAAA;YAE9E,CAAA;WACF,OACAG,wBAAC0N,KAAI;YAAAob,YAAY;YACfjpB,cAAAG,wBAACwb,QAAA;cACCI,SAAS8M;cACThN,MAAMC;cACNgI,UAAU;cACVuB,MAAK;cACL5K,SAAS;cACTU,OAAO;cACPS,MAAK;YAAA,CAAA;WAET,CAAA;QAAA,CACF,QAGEd,yBAAA4K,6BAAA;UAAA1lB,UAAA,KAAAG,wBAAC0N,KAAI;YAAAvI,MAAM;YAAG2jB,YAAY;YACxBjpB,cAAAG,wBAAC0mB,aAAY;cAAAxK,OAAM;cAAuDiC,MAAM;cAAGte,UAAA;YAEnF,CAAA;WACF,OACAG,wBAAC0N,KAAI;YAAAob,YAAY;YACfjpB,cAAAG,wBAACwb,QAAA;cACCjO,IAAIjK;cACJoY,MAAMqN;cACNpF,UAAU;cACVuB,MAAK;cACL5K,SAAS;cACTU,OAAO;cACPS,MAAK;YAAA,CAAA;WAET,CAAA;SACF,CAAA;OAEJ;KACF;EACF,CAAA;AAEJ,CAAC;AAEDkL,uBAAuBvI,cAAc;;;;;;AChMrC,IAAApZ;AAMA,IAAMqH,SAAO8M,sCAAOgB,IAAI,EAAXnV,SAAYA,OAAAqU,aAAA,CAAA,2CAAA,CAAA,EAAA;AAUlB,SAAS2P,sBAAsBC,QAA2D;AAAA,MAA3D;IAACC;IAASC;MAAiDF;AAhBjG,MAAAjkB,KAAAC;AAiBE,QAAMmkB,cAAcC,eAAe;AACnC,QAAMC,WAAStkB,MAAAokB,eAAA,OAAA,SAAAA,YAAaG,UAAb,OAAA,SAAAvkB,IAAoB9B,YAAW;AAE9C,QAAMqmB,QAAQ7Y,OACZzL,MAAamkB,eAAA,OAAA,SAAAA,YAAAG,UAAb,OAAoB,SAAAtkB,IAAAsC,IAAKiiB,WAAOxpB,wBAAA,QAAA;IAAmBH,UAAE2pB,EAAAtN;KAAXsN,EAAEvc,IAAe,CAAA,MAAY,CAAA,GACvE,IAAA;AAGE,MAAAic;AAAgB,WAAA;AAGlB,aAAAlpB,wBAACqM,QAAAA;IAAK,eAAY;IAA0ByO,QAAQ;IAAGN,MAAK;IAC1D3a,cAACG,wBAAAya,WAAA;MAAU6E,UAAU;MAAGC,UAAU;MAAGhF,QAAO;MAASnV,OAAO;MAC1DvF,cAAA8a,yBAACsC,MAAK;QAAAc,OAAM;QACVle,UAAA,KAAAG,wBAACob,MAAK;UAAA+C,MAAM;UACVte,cAAAG,wBAACypB,cAAAA,CAAa,CAAA;SAChB,OAEAzpB,wBAAC0N,KAAAA;UAAIvI,MAAM;UAAG2jB,YAAY;UACxBjpB,cAAA8a,yBAACS,MAAK;YAAA+C,MAAM;YAAGte,UAAA,CAAA,aACHypB,UAAU,KAAI,KAAEC,OAAM,KAAED,SAAS,OAAO,QAAO,4BAAyB,KACjFH,oBAAmB,iBAAA;UAAA,CACtB;QACF,CAAA,CAAA;OACF;KACF;EACF,CAAA;AAEJ;AAEA,SAASzY,KAAWgZ,OAAiBC,KAA6B;AAChE,SAAOD,MAAMhS,OAAO,CAACvH,QAA6B7N,SAAgB;AAChE,QAAI6N,WAAW,MAAM;AACnB,aAAO,CAAC7N,IAAI;IACd;AAEA,WAAO6N,OAAOpB,OAAO,CAAC4a,KAAKrnB,IAAI,CAAC;KAC/B,IAAI;AACT;ACpDA,SAASsnB,YAAellB,OAAU;AAChC,QAAM4H,UAAM4T,qBAAU;AACtBhU,8BAAU,MAAM;AACdI,QAAIyH,UAAUrP;EAAA,GACb,CAACA,KAAK,CAAC;AACV,SAAO4H,IAAIyH;AACb;AAGA,IAAM8V,+BAA+B,MAAO,KAAK,KAAK,KAAK;AAKpD,SAASC,oBAAoBjpB,QAAuD;AACzF,QAAMkpB,QAAQjK,SAAS;AAEjB,QAAAkK,aAAaJ,YAAY/oB,OAAOopB,OAAO;AAG7C/d,8BAAU,MAAM;AACV,QAAA,CAAC8d,cAAcnpB,OAAOopB,SAAS;AACjCF,YAAM1gB,KAAK;QAAC,GAAGxI;QAAQuf,UAAUyJ;OAA6B;IAChE;AACI,QAAAG,cAAc,CAACnpB,OAAOopB,SAAS;AACjCF,YAAM1gB,KAAK;QACT,GAAGxI;;QAEHuf,UAAU;MAAA,CACX;IACH;EACC,GAAA,CAACvf,QAAQkpB,OAAOC,UAAU,CAAC;AAChC;ACVA,IAAMpH,iBAAkBsH,QAAwBA,GAAGtH,eAAe;AAE3D,IAAMuH,eAAWC,yBAA0C,SAASD,UAASxqB,OAAO2M,KAAK;AA3BhG,MAAAtH;AA4BQ,QAAA;IAACqlB;IAAQC;EAAW,IAAA3qB;AAEpB,QAAA;IACJ4qB;IACAC;IACAC,WAAW/lB;IACXgmB;IACAle;IACAC;IACAke;IACAtG;IACAuG;IACAC;IACAC;IACArE;IACAsE;IACAC;IACAC;IACAC;IACAC;MACEte,gBAAgB;AACpB,QAAMwL,gBAAgBS,iBAAiB;AACjC,QAAAsS,WAAWC,oBAAoB7e,UAAU;AAM/C,QAAM8e,mBAAehqB,sBAAQ,MAAMiqB,mBAAmB,GAAG,CAAA,CAAE;AAErD,QAAAC,YAAWxmB,MAAW0lB,aAAA,OAAA,SAAAA,UAAAe,wBAAX,OAAgC,SAAAzmB,IAAAilB;AAE7BH,sBAAA;IAClBnnB,IAAI,aAAaoM,OAAAvC,UAAA;IACjB6T,QAAQ;IACR4J,SAASuB;IACTtP,OAAO;IACPoE,aAAa;EAAA,CACd;AAEDpU,8BAAU,MAAM;AACd,UAAMsR,MAAMnF,cAAcqT,KACvBC,eAAenf,YAAYC,YAAY,EACvCkD,KACCic,IAAK7L,WAAU;AACT,UAAAA,MAAMld,SAAS,YAAY;AAChByoB,qBAAAO,QAAQC,qBAAqB/L,KAAK,CAAC;MAClD;AAEI,UAAAA,MAAMld,SAAS,UAAU;AACdyoB,qBAAAO,QAAQE,mBAAmBhM,KAAK,CAAC;MAChD;IAAA,CACD,CAAA,EAEFtV,UAAU;AAEb,WAAO,MAAM;AACX+S,UAAIrF,YAAY;IAAA;KAEjB,CAAC3L,YAAY6L,eAAe5L,cAAc6e,YAAY,CAAC;AAEpD,QAAAU,SAAS3E,QAAQ3iB,SAAA,OAAA,SAAAA,MAAOunB,IAAI;AAClC/f,8BAAU,MAAM;AACd,QAAI8f,QAAQ;AAKVV,mBAAaO,QAAQ;QACnBhpB,MAAM;QACNqpB,SAAS,CAAA;QACTzD,UAAU/jB;MAAA,CACX;IACH;EAAA,GAGC,CAACsnB,MAAM,CAAC;AAEX,QAAM,CAACG,SAASC,UAAU,QAAIvgB,uBAAgC,IAAI;AAElEK,8BAAU,MAAM;AAGd,QAAI2e,SAAS,EAACC,aAAW,OAAA,SAAAA,UAAAuB,UAAUnpB,WAAUipB,SAAS;AACpDG,2BAAqBH,OAAO;IAC9B;EAAA,GAGC,CAACtB,KAAK,CAAC;AAEV,QAAM0B,aAAS7qB,0BACZ8qB,UAAgC;AAC/BJ,eAAWI,IAAI;AACX,QAAA,OAAOlgB,QAAQ,YAAY;AAC7BA,UAAIkgB,IAAI;eACClgB,KAAK;AACdA,UAAIyH,UAAUyY;IAChB;EACF,GACA,CAAClgB,GAAG,CAAA;AAcJ,aAAAtM,wBAACya,WAAA;IACC4P;IACA/K,UAAU;IACVmN,YAAY;IACZC,eAAe;IACfnS,QAAO;IACPnV,OAAO;IAEPvF,cAAAG,wBAAC2sB,iBAAAA;MAAgBrC;MACfzqB,cAAAG,wBAAC0N,KAAAA;QAAIH,IAAG;QAAOqf,UAAUhK;QAAgBtW,KAAKigB;QAC3C1sB,UAAAA,QACCirB,cAAc,WAAA,wBACXpd,KAAI;UAAA4M,SAAS;UACZza,cAACG,wBAAAob,MAAA;YAAKvb,UAAmB;UAAA,CAAA;QAAA,CAC3B,QAEAG,wBAAC6sB,aAAA;UACCC,yBAAyBnC;UACzBoC,yBAAyBzB;UACzBf;UACAC;UACA6B,WAAWvB,UAAUuB;UACrBW,SAASlC,UAAUkC;UACnBC,SAASnC,UAAUmC;UACnBC,QAAQpC,UAAUoC;UAClBvqB,IAAG;UACHwqB,SAASrC,UAAUqC;UACnB9I;UACA+I,oBAAoBjC;UACpBkC,YAAYtC;UACZuC,aAAa7G;UACbwE;UACAsC,wBAAwBrC;UACxBsC,oBAAoBxC;UACpBI;UACAqC,UAAU3C,UAAU2C;UACpB3a,YAAYgY,UAAUhY;UACtB8X;UACAlmB,OAAOomB,UAAUpmB;QAAA,CAAA,QAIrB1E,wBAAC0tB,OAAM;UAAAnR,IAAI;UACT1c,cAAC8a,yBAAAsC,MAAA;YAAKc,OAAM;YAASC,WAAU;YAAS5D,QAAO;YAAO6D,SAAQ;YAC5Dpe,UAAA,KAACG,wBAAAke,SAAA;cAAQ9B,OAAK;YAAC,CAAA,OACdpc,wBAAA0N,KAAA;cAAIkN,WAAW;cACd/a,cAACG,wBAAAob,MAAA;gBAAK2C,OAAM;gBAAS3B,OAAK;gBAAC+B,MAAM;gBAAGte,UAAAA;cAEpC,CAAA;aACF,CAAA;WACF;QAAA,CACF;MAEJ,CAAA;KACF;EAAA,CAAA;AAGN,CAAC;AAED,SAASisB,qBAAqB/L,OAAwC;AAC9D,QAAAmM,UAAUnM,MAAM4N,UAAUpmB,IAAKqmB,SAAQA,IAAIC,KAAK,EAAE/pB,OAAOujB,OAAO;AAE/D,SAAA;IACLxkB,MAAM;IACN4lB,UAAU1I,MAAMxB;IAChB2N,SAAS4B,oBAAoB/N,MAAMgO,QAAQ7B,OAAO;EAAA;AAEtD;AAEA,SAASH,mBAAmBhM,OAAsC;AAC1D,QAAAiO,gBAAgBjO,MAAMkO,gBAAgB1mB,IAAKqmB,SAAQA,IAAIC,KAAK,EAAE/pB,OAAOujB,OAAO;AAC5E,QAAA6G,eAAenO,MAAMoO,eAAe5mB,IAAKqmB,SAAQA,IAAIC,KAAK,EAAE/pB,OAAOujB,OAAO;AAEzE,SAAA;IACLxkB,MAAM;IACN4lB,UAAU1I,MAAMxB;IAChB2N,SAAS4B,oBAAoB,UAAUE,aAAa,EAAEjf,OACpD+e,oBAAoB,SAASI,YAAY,CAC3C;EAAA;AAEJ;ACxNO,SAASE,qBAAqB;AACnC,QAAM;IAACC;IAActS;IAASuS;MAASzhB,gBAAgB;AACjD,QAAA0hB,aAAa,GAAGxf,OAAOgN,SAAA,UAAA;AAG3B,aAAA/b,wBAAC8lB,SAAAA;IAAQ9K,OAAO;IACbnb,UAAAA,MAAM0H,IAAI,CAAChD,MAAM3D,WAAO;AAX/B,UAAAoE;AAYQ,iBAAAhF,wBAACwuB,mBAAA;QACC9S,MAAMnX,KAAKmX;QACX/Y,IAAI,GAAGoM,OAAOgN,SAAA,MAAA,EAAOhN,OAAKxK,KAAA5B,EAAA;QAC1Bmc,UAAUuP,iBAAiB9pB,KAAK5B;QAEhCqjB,WAAUhmB,wBAAAulB,6BAAA;UAAA1lB,UAAA0E,KAAK2X;SAAM;QACrBqS;QACAnqB,QAAQxD,WAAU,IAAI,QAAOoE,MAAAT,KAAK5B,OAAL,OAAWqC,MAAA;MAAA,GAHnCT,KAAK5B,EAAA;IAKb,CAAA;EACH,CAAA;AAEJ;AAEA,SAAS6rB,kBAAkB7uB,OAOxB;AACD,QAAM;IAACmf;IAAUyP;IAAYnqB;EAAA,IAAUzE;AACjC,QAAA;IAACkrB;MAAShe,gBAAgB;AAC1B,QAAA;IAAC1I;MAAW6iB,cAAc;AAC1B,QAAAyH,kBAAc/sB,0BAAY,MAAMyC,QAAQC,MAAM,GAAG,CAACD,SAASC,MAAM,CAAC;AAGtE,aAAApE,wBAAC+lB,KAAA;IACE,GAAGpmB;IACJ,iBAAe4uB;IACfG,UAAU,CAAC7D;IACXlH,UAAU;IACV1L,UAAU6G;IACVlD,SAAS6S;EAAA,CAAA;AAGf;AC7CO,SAASE,sBAAoC;AAClD,QAAM;IAACC;IAAiB9b;IAAYoJ;IAAOxX,OAAOmqB;EAAA,IAAiBhiB,gBAAgB;AACnF,QAAMiiB,aAAazH,QAAQwH,aAAa,KAAKD,oBAAoB;AAEjE,QAAM;IAACvX;IAAO3S;EAAK,IAAIqqB,mBAAgB;IACrC9E,SAAS6E;IACThc;IACApO,OAAOmqB;EAAA,CACR;AAED,MAAID,oBAAoB,aAAa;AACnC,eAAS5uB,wBAAAulB,6BAAA,CAAA,CAAA;EACX;AAEA,MAAIrJ,OAAO;AACT,eAAA,wBAAA,6BAAA;MAAUrc,UAAMqc;IAAA,CAAA;EAClB;AAEA,MAAI,CAAC2S,eAAe;AAClB,eAASlU,yBAAA4K,6BAAA;MAAA1lB,UAAA,CAAA,SAAKiT,cAAA,OAAA,SAAAA,WAAYoJ,WAASpJ,cAAY,OAAA,SAAAA,WAAA7F,KAAA;IAAK,CAAA;EACtD;AAEA,MAAIoK,OAAO;AACT,eAASsD,yBAAA4K,6BAAA;MAAA1lB,UAAA,CAAA,WAAQwX,MAAMvJ,OAAA;IAAQ,CAAA;EACjC;AAEO,aAAA9N,wBAAAulB,6BAAA;IAAG1lB,WAAO6E,SAAA,OAAA,SAAAA,MAAAwX,cAAUlc,wBAAA,QAAA;MAAK0lB,OAAO;QAACtC,OAAO;MAA+B;MAAAvjB,UAAA;KAAQ;EAAQ,CAAA;AAChG;ACVO,IAAMmvB,0BAAsBrW,uBACjCyR,yBAAW,SAAS4E,qBAClBC,QACA3iB,KACA;AACM,QAAA;IACJ4iB;IACAC;IACAC;IACAC;IACAC;IACAxc;IACAyc;IACA1E;IACAyD;IACAkB;MACE3iB,gBAAgB;AACd,QAAA;IAACC;MAAYC,YAAY;AAC/B,QAAM;IAACnM,OAAAA;IAAO0C,UAAAA;IAAUL;MAAoB+jB,cAAc;AAC1D,QAAM;IAACpnB,SAAS+qB;EAAY,IAAI8E,gBAAgB;AAChD,QAAMC,gBAAYpuB,sBAChB,MACEquB,iBAAiB;IAACC,eAAeV;IAAcvE;IAAc0E;IAAWC;GAAe,GACzF,CAACJ,cAAcvE,cAAc2E,gBAAgBD,SAAS,CAAA;AAElD,QAAAQ,sBAAkBvuB,sBAAQ,MAAMouB,UAAU5rB,OAAOgsB,gBAAgB,GAAG,CAACJ,SAAS,CAAC;AAC/E,QAAAK,uBAAmBzuB,sBAAQ,MAAMouB,UAAU5rB,OAAOksB,mBAAmB,GAAG,CAACN,SAAS,CAAC;AACnF,QAAAO,WAAW3B,MAAMprB,SAAS;AAGhC,QAAMokB,MAAM4I,oBAAoBX,eAAgBvjB,WAAUA,MAAMmkB,OAAO;AAEvE,QAAM;IAAC9kB;IAAWJ;EAAM,IAAIyB,QAAQ;AAEpC,QAAM4Z,WAAWrb,UAAU,CAACI,YAAY,KAAK;AAU7C,QAAM+kB,sBAAsBtjB,SAASujB,cAAcjB,eAAed,MAAMprB,SAAS;AAIjF,QAAMotB,2BAA2BF,uBAAuBntB;AAMxD,QAAMstB,2BAA2B,CAACD,4BAA4B,CAACxjB,SAAS0jB;AAGtE,aAAAxwB,wBAACic,YAAA;IACC3P;IACAqb,SAAS,CAACkD;IACV3O,WAAA,wBAAQyS,qBAAoB,CAAA,CAAA;IAC5B8B,MAAMR,gBAAYjwB,wBAACouB,oBAAmB,CAAA,CAAA;IACtC9H;IACAkK,YACE1jB,SAAS0jB,cACT5vB,SAAQ,SAAA,wBACL4a,QAAO;MAAAjO,IAAIjK;MAAU,WAAQ;MAAIoY,MAAMgV;MAAexL,MAAK;MAAQ5K,SAAS;KAAG;IAGpFqW,gBAAA,wBAAaC,cAAa;MAAAC,OAAOvJ;MAAKpC,MAAK;MAAM4L,WAAU;KAAa;IACxElxB,aACG+a,yBAAAsC,MAAA;MAAKc,OAAM;MAASgT,KAAK;MACvBlxB,UAAA,CAAA2vB,wBAAwBtsB,SAAS,SAChClD,wBAAAulB,6BAAA;QACG1lB,UAAAA,wBAAwB0H,IAAI,CAACypB,yBAAyB1nB,QAAQ;AAC7D,qBAAO4D,4BAAc8jB,yBAAyB;;YAE5CvgB,KAAK,mBAAmB1B,OAAAzF,GAAA;YACxBwJ;UAAA,CACD;QACF,CAAA;OACH,GAGD+c,gBAAgBtoB,IAAKjF,cACpBtC,wBAACixB,wBAAAA;QAAsCzE,MAAMlqB;MAAA,GAAhBA,KAAKmO,GAAiB,CACpD,OAEAzQ,wBAAAkxB,uBAAA;QAAsBC,OAAOpB;MAAA,GAAsB,cAAe,GAElEK,2BACCpwB,wBAACoxB,SAAA;QACCtT,aACG9d,wBAAAob,MAAA;UAAK+C,MAAM;UAAGuH,OAAO;YAAC2L,YAAY;UAAQ;UAAGxxB,UAE9C;QAAA,CAAA;QAEFya,SAAS;QACTwW,WAAU;QACVQ,QAAM;QAENzxB,cAAAG,wBAACwb,QAAA;UACC,cAAW;UACXE,MAAM6V;UAENrM,MAAK;UACLtJ,SAASwT;QAAA,GAFL,mBAGN;MAAA,CACF,GAGDkB,gCACCtwB,wBAACwb,QAAA;QACCE,MAAMqN;QAEN7D,MAAK;QACLtJ,SAASuT;QACTjT,OAAM;MAAA,GAHF,mBAIN,GAGDqU,gCACCvwB,wBAACwb,QAAA;QACCE,MAAMqN;QAEN7D,MAAK;QACLhJ,OAAM;QACN3O,IAAIjK;MAAA,GAHA,mBAIN,CAAA;KAEJ;EAAA,CAAA;AAEJ,CAEH,CACH;;;;;;AC5JA,IAAA0B;AA4BA,IAAMwsB,cAAcrY,sCAAOzL,GAAG,EAAE;EAC9BiY,UAAU;AACZ,CAAC;AAED,IAAM8L,WAAWtY,sCAAOuY,eAAe,EAAwBC,YAAiB;AAAA,MAAhB;IAACC;MAAeD;AAC9E,MAAIC,WAAW;AACN,WAAA;MAACxX,QAAQ;;EAClB;AAEA,SAAOmJ,GAAGve,SAAAA,OAAAqU,aAAA,CAAA,yHAAA,CAAA,EAAA;AAOZ,CAAC;AAEY,IAAAwY,gBAAgB,SAASA,eAAclyB,OAA2B;AAC7E,QAAM;IAACmyB;IAAcC;IAAerrB;IAAasrB;MAAiCryB;AAC5E,QAAA;IACJ0uB;IACA5D;IACAje;IACAke;IACA9d;IACAlI;IACA4pB;IACAzD;IACA/X;IACAmf;IACAC;MACErlB,gBAAgB;AACpB,QAAM;IAACxB,WAAW8mB;EAAe,IAAIC,cAAc;AAC7C,QAAA;IAAC/mB;MAAaqB,QAAQ;AAC5B,QAAM2lB,eAAeC,UAAU;AACzB,QAAA;IAACxlB;MAAYC,YAAY;AAC/B,QAAM,CAACwlB,eAAeC,gBAAgB,QAAI3mB,uBAAgC,IAAI;AACxE,QAAA4mB,aAAa1mB,eAAewmB,aAAa;AACzC,QAAAG,gBAAYxS,qBAA8B,IAAI;AACpD,QAAM,CAACyS,uBAAuBC,wBAAwB,QAAI/mB,uBAAgC,IAAI;AACxF,QAAAgnB,2BAAuB3S,qBAA8B,IAAI;AAEzD,QAAAiJ,qBAAqBzkB,MAAMouB,aAAa,WAAW;AAEzD,QAAMC,iBAAazxB,sBACjB,MAAMgtB,MAAMrJ,KAAM1gB,UAASA,KAAK5B,OAAO0rB,YAAY,KAAKC,MAAM,CAAC,KAAK;IAACzrB,MAAM;EAAM,GACjF,CAACwrB,cAAcC,KAAK,CAAA;AAItB,QAAM0E,gBAAoClmB,SAASmmB,aAC/CP,UAAU3e,WAAWse,aAAa5qB,UAClC4qB,aAAa5qB;AAGX,QAAA6iB,cAA4ChpB,sBAAQ,MAAM;AAC9D,QAAI6wB,iBAAiB;AACZ,aAAA,EAACM,cAAAA,OAAAA,SAAAA,WAAYrY,WAAU,GAAG,GAAG0X,eAAeA,eAAe,IAAI,GAAG,CAAC;IAC5E;AAEA,WAAO,CAAC,GAAG,GAAG,GAAG,CAAC;EACjB,GAAA,CAACK,iBAAiBL,cAAcW,UAAU,CAAC;AAExC,QAAAS,iBAAiBH,WAAWlwB,SAAS;AAE3C,QAAMswB,qBAAiB7xB,sBACrB,MACEyxB,WAAWlwB,SAAS,eACpBkwB,WAAW5lB,iBACXD,4BAAc6lB,WAAW5lB,WAAW;IAClCoR,UAAU;MACR6J,QAAOsC,aAAAA,OAAAA,SAAAA,UAAWtC,UAAS;MAC3BqC,WAAWA,aAAa/lB;MACxB0uB,YAAY3I;MACZpC,YAAWqC,aAAAA,OAAAA,SAAAA,UAAWrC,cAAa;IACrC;IACA7b;IACAvI,SAAS8uB,WAAW9uB;IACpB6O;EAAA,CACD,GACH,CAACigB,YAAYtI,WAAWje,YAAYke,aAAAA,OAAAA,SAAAA,UAAWtC,OAAOsC,aAAA,OAAA,SAAAA,UAAWrC,WAAWvV,YAAYpO,KAAK,CAAA;AAI/FwH,8BAAU,MAAM;AACd,QAAI,EAACymB,yBAAuB,OAAA,SAAAA,sBAAAU;AAAU;AAChBV,0BAAAU,SAAS,GAAG,CAAC;EAAA,GAClC,CAAC7mB,YAAYmmB,qBAAqB,CAAC;AAGtCzmB,8BAAU,MAAM;AACd,QAAI8mB,eAAe;AACjBhB,oCAA8BgB,aAAa;IAC7C;EAAA,GACC,CAACA,eAAehB,6BAA6B,CAAC;AAE3C,QAAAsB,oBAAgBhyB,sBAAQ,MAAM;AAClC,WAAOywB,oBAAiB/xB,wBAAA2kB,eAAA;MAAcjgB,OAAO+lB,aAAa/lB;KAAO,IAAK;EACrE,GAAA,CAACqtB,eAAetH,WAAW/lB,KAAK,CAAC;AAEpC,QAAM6uB,gBAAgBlM,QAAQ,CAAChc,aAAauB,SAAS;AAErD,aAEI+N,yBAAA4K,6BAAA;IAAA1lB,UAAA,KAACG,wBAAAgvB,qBAAA;MAAoB1iB,KAAKkmB;IAAkB,CAAA,OAE3CxyB,wBAAAmc,aAAA;MACCtc,cAAC8a,yBAAAsC,MAAA;QAAK7C,QAAO;QACTva,UAAA,EAASiN,SAAAO,kBAAkB,CAACkmB,sBAC5BvzB,wBAACwxB,aAAAA;UAAYrsB,MAAM;UAAGkV,UAAS;UAC7Bxa,cAAAG,wBAACwzB,gBAAA;YACC/rB,SAASurB;YACTS,qBAAqB;cAACd;YAA4C;YAElE9yB,cAAAG,wBAAC0zB,yBAAwB;cAAAjsB,SAASkrB;cAChC9yB,cAAA8a,yBAACgZ,mCAAA;gBACCC,eAAejB;gBACfkB,kBAAkBhB;gBAEjBhzB,UAAA,CAAAkzB,WAAWlwB,SAAS,UAAU,CAACqvB,wBAAwBrH,aAEpDlQ,yBAAA4K,6BAAA;kBAAA1lB,UAAA,KAAAG,wBAACgpB,uBAAA;oBACCE,SAAS7B,QAAQ4K,eAAA,OAAA,SAAAA,YAAa/I,OAAO;oBACrCC;kBAAA,CACF,OAAA,wBACCxC,wBAAuB,CAAA,CAAA,CAAA;iBAC1B,OAGFhM,yBAAC8W,UAAA;kBACCG,WAAWO,mBAAmB;kBAC9B,eAAY;kBACZ7lB,KAAKsmB;kBAEL/yB,UAAA,KAAAG,wBAACmqB,UAAA;oBACCE,QAAQ6I;oBAER5I;oBACAhe,KAAKumB;kBAAA,GAFArmB,cAAcqe,QAAQ,WAAW,WAGxC,GACCsI,cAAA;gBAAA,CACH,GAECG,mBAEAtzB,wBAAA,OAAA;kBAAI,eAAY;kBAAwBsM,KAAKomB;iBAAW,CAAA;cAAA,CAAA;aAE7D;UAAA,CAAA;SAEJ,GAGDa,qBACCvzB,wBAAC0zB,yBAAwB;UAAAjsB,SAASf;UAChC7G,cAAAG,wBAACuM,wBAAA;YACCC;YACAC,cAAcqG,WAAW7F;YACzB9H,MAAM;UAAA,CAAA;SAEV,CAAA;MAAA,CAEJ;IACF,CAAA,CAAA;EACF,CAAA;AAEJ;AChMa,IAAA2uB,8BAA2C,CAAC,QAAQ,QAAQ;AAElE,IAAMC,2BAAkE;EAC7EC,OAAO;EACPC,QAAQ;EACRC,OAAO;EACPC,MAAM;AACR;ACMO,SAASC,cAAcz0B,OAG3B;AACK,QAAA;IAAC00B;IAAQC;EAAoB,IAAA30B;AAGjC,aAAAK,wBAACu0B,SAAA;IACCzW,aAAU9d,wBAAAw0B,sBAAA;MAAqBH;IAAgB,CAAA;IAC/CI,oBAAoBX;IACpBY,MAAI;IACJ5D,WAAU;IACVQ,QAAM;IACNqD,iBAAe;IACfL;EAAA,CAAA;AAGN;AAEA,SAASE,qBAAqB70B,OAAmD;AACzE,QAAA;IAAC00B;EAAU,IAAA10B;AACX,QAAA;IACJi1B;IACAC;IACAC;IACAC;;IAEAjnB;IACAknB;IACAC;IACAza;EACE,IAAA6Z;AACE,QAAA;IAACa;MAAcC,SAAS;AAC9B,QAAM,CAAC1tB,SAAS2tB,UAAU,QAAIvpB,uBAA6B,IAAI;AAEzD,QAAAwpB,yBAAqB3zB,0BAAY,MAAM;AACvC,QAAAwzB;AAAqBF,eAAA;EAAA,GACxB,CAACE,YAAYF,QAAQ,CAAC;AAEzB,QAAMM,0BAAsB5zB,0BACzBqe,WAAe;AACV,QAAAA,MAAMtP,QAAQ,YAAYykB;AAAqBF,eAAA;EACrD,GACA,CAACE,YAAYF,QAAQ,CAAA;AAGPO,kBAAAF,oBAAoB,CAAC5tB,OAAO,CAAC;AAC7C+tB,mBAAiBF,mBAAmB;AAEpC,aACG3a,yBAAAsC,MAAA;IAAKe,WAAU;IAAS1R,KAAK8oB;IAAY1P,OAAO;MAACpgB,UAAU,MAAM;MAAIM,UAAU;IAC9E;IAAA/F,UAAA,KAACG,wBAAA0N,KAAA;MAAIvI,MAAM;MAAGkV,UAAS;MAAOC,SAAS;MACrCza,cAAAG,wBAACob,MAAM;QAAAvb,UAAAiO;MAAQ,CAAA;KACjB,OAAA,wBACCJ,KAAI;MAAA4R,UAAU;MAAGC,UAAU;MAAGmG,OAAO;QAAC+P,WAAW;MAAA;MAChD51B,cAAC8a,yBAAA+a,MAAA;QAAKC,SAAS;QAAG5E,KAAK;QACrBlxB,UAAA,KAAAG,wBAACwb,QAAA;UACCE,MAAMkZ;UACNhZ,SAASoZ;UACT9P,MAAK;UACLzJ,MAAMoZ,oBAAoB;QAAA,CAC5B,OACA70B,wBAACwb,QAAA;UACCE,MAAMoZ;UACNlZ,SAASqZ;UACTxZ,MAAMsZ,qBAAqB;UAC3Bva;QAAA,CACF,CAAA;MAAA,CACF;IACF,CAAA,CAAA;EACF,CAAA;AAEJ;AClFO,SAASob,YAAYj2B,OAAiD;AACrE,QAAA;IAAC00B;EAAU,IAAA10B;AACjB,QAAMk2B,eAAWC,oBAAM;AAEjB,QAAAC,SAAS1B,OAAO0B,cACnB/1B,wBAAA0N,KAAA;IAAI4R,UAAU;IAAGC,UAAU;IACzB1f,UAAAw0B,OAAO0B;EACV,CAAA;AAIA,aAAA/1B,wBAACg2B,qBAAoB;IAAAC,SAAQ;IAC3Bp2B,cAAAG,wBAACqlB,QAAA;MACC6Q,4BAA4B7B,OAAO8B,oBAAoB;MACvDJ;MACAzQ,QAAQ+O,OAAO/O;MACf3iB,IAAIkzB;MAEJzoB,SAASinB,OAAOjnB;MAEhBqY,gBAAgB4O,OAAOjnB;MACvBhI,OAAOivB,OAAOjvB,UAAU,SAAY,IAAI2uB,yBAAyBM,OAAOjvB,KAAK;MAE7EvF,cAACG,wBAAA0N,KAAA;QAAI4M,SAAS;QAAIza,UAAAA,OAAOie;OAAQ;IAAA,CAErC;EAAA,CAAA;AAEJ;AC3BO,SAASsY,cAAcz2B,OAG3B;AACK,QAAA;IAAC00B;IAAQC;EAAoB,IAAA30B;AAGjC,aAAAK,wBAACu0B,SAAA;IACCzW,aAAU9d,wBAAAq2B,sBAAA;MAAqBhC;IAAgB,CAAA;IAC/CI,oBAAoBX;IACpBY,MAAI;IACJ5D,WAAU;IACVQ,QAAM;IACNqD,iBAAe;IACfL;EAAA,CAAA;AAGN;AAEA,SAAS+B,qBAAqB12B,OAAmD;AACzE,QAAA;IAAC00B;EAAU,IAAA10B;AACX,QAAA;IAACme;IAAS1Q;EAAW,IAAAinB;AACrB,QAAA;IAACa;MAAcC,SAAS;AAC9B,QAAM,CAAC1tB,SAAS2tB,UAAU,QAAIvpB,uBAA6B,IAAI;AAEzD,QAAAwpB,yBAAqB3zB,0BAAY,MAAM;AACvC,QAAAwzB;AAAoB9nB,cAAA;EAAA,GACvB,CAAC8nB,YAAY9nB,OAAO,CAAC;AAExB,QAAMkoB,0BAAsB5zB,0BACzBqe,WAAe;AACV,QAAAA,MAAMtP,QAAQ,YAAYykB;AAAoB9nB,cAAA;EACpD,GACA,CAAC8nB,YAAY9nB,OAAO,CAAA;AAGNmoB,kBAAAF,oBAAoB,CAAC5tB,OAAO,CAAC;AAC7C+tB,mBAAiBF,mBAAmB;AAEpC,aAAQt1B,wBAAA,OAAA;IAAIsM,KAAK8oB;IAAav1B,UAAQie;EAAA,CAAA;AACxC;AC9BA,SAASwY,6BAA6B32B,OAAoC;AAClE,QAAA;IAACE;EAAY,IAAAF;AACnB,QAAM;IAAC8H;IAASH;EAAQ,IAAIgrB,UAAU;AAChC,QAAAU,iBAAgB1rB,YAAAA,OAAAA,SAAAA,SAAWivB,6BAAkC,MAAA9uB;AAEnE,aAAQzH,wBAAAwzB,gBAAA;IAAe/rB,SAASurB;IAAgBnzB;EAAS,CAAA;AAC3D;AAEO,SAAS22B,kBAAkB72B,OAA+B;AAC/D,QAAM;IAAC00B;IAAQC,mBAAmB;EAAA,IAAQ30B;AAC1C,QAAM82B,cAAUX,oBAAM;AAElB,MAAAzB,OAAOxxB,SAAS,WAAW;AACtB,eAAA7C,wBAACo0B,eAAc;MAAAC;MAAgBC;IAAoC,CAAA;EAC5E;AAEI,MAAAD,OAAOxxB,SAAS,WAAW;AACtB,eAAA7C,wBAACo2B,eAAc;MAAA/B;MAAgBC;IAAoC,CAAA;EAC5E;AAEA,MAAID,OAAOxxB,SAAS,YAAY,CAACwxB,OAAOxxB,MAAM;AAC5C,eACG7C,wBAAAs2B,8BAAA;MACCz2B,cAACG,wBAAA41B,aAAA;QAAYvB;OAAgB;IAC/B,CAAA;EAEJ;AAEI,MAAAA,OAAOxxB,SAAS,UAAU;AACrB,eAAA7C,wBAACs2B,8BAA8B;MAAAz2B,UAAAw0B,UAAA,OAAA,SAAAA,OAAQlnB;IAAU,CAAA;EAC1D;AAGA,QAAMupB,eAAoBrC;AAGlB3f,UAAAC,KAAK,0BAA0B5F,OAAA2nB,aAAa7zB,IAAM,CAAA;AAGxD,aAAA7C,wBAACqlB,QAAA;IACC1iB,IAAI8zB;IAEJrpB,SAASspB,aAAatpB;IAEtBqY,gBAAgBiR,aAAatpB;IAC7BhI,OAAO;IAEPvF,cAAAA,wBAAC6N,KAAI;MAAA4M,SAAS;MACXza,UAAA62B,aAAa5Y,eACVnD,yBAAA4K,6BAAA;QAAA1lB,UAAA,CAAA,+BACuBG,wBAAC,QAAM;UAAAH,UAAA62B,aAAa7zB;QAAK,CAAA,GAAO,GAAA;MAAA,CACzD;IAEJ,CAAA;EAAA,CAAA;AAGN;ACxCO,SAAS8zB,iBAAiBh3B,OAA8B;AACvD,QAAA;IAACi3B;IAAclI;EAAY,IAAA/uB;AACjC,QAAMk3B,eAAWf,oBAAM;AACjB,QAAAgB,gBAAY5W,qBAAiC,IAAI;AACvD,QAAM,CAAC6W,aAAaC,cAAc,QAAInrB,uBAAS,EAAE;AACjD,QAAM,CAACyoB,kBAAkB2C,mBAAmB,QAAIprB,uBAAmC,IAAI;AAEjF,QAAAqrB,mBAAex1B,0BAAa4H,SAAgB;AAChD0tB,mBAAe1tB,GAAG;EACpB,GAAG,CAAA,CAAE;AAEL,QAAM6tB,mBAA6B71B,sBACjC,OAAO;IACLwvB,WAAW;IACXQ,QAAQ;IACRqD,iBAAiB;EAAA,IAEnB,CAAA,CAAC;AAGG,QAAAyC,gBAAgBR,aAAaG,WAAW;AAE9C,aAEIpc,yBAAA4K,6BAAA;IAAA1lB,UAAA,KAAAG,wBAACq3B,YAAA;MACC10B,IAAI,GAAGoM,OAAQ8nB,UAAA,cAAA;MACfS,YACEt3B,wBAACwb,QAAA;QACC,eAAY;QACZ,cAAW;QACXkT;QACAhT,MAAM6b;QACNrS,MAAK;QACL5Y,KAAKwqB;MAAA,CACP;MAEFU,UAAA,wBACGC,MAAK;QAAAnd,SAAS;QACZza,UAAa+2B,aAAArvB,IAAI,CAACmwB,aAAapuB,YAC9BtJ,wBAAC23B,oBAAA;UACCD;UACAhJ;UACA9tB,OAAO0I;UAGPsuB,UAAUV;QAAA,GADL5tB,GAGR,CAAA;OACH;MAEFuuB,SAASV;MACT7qB,KAAK2qB;IAAA,CACP,GAECG,iBAAiBA,cAAc/C,cAC9Br0B,wBAACg2B,qBAAoB;MAAAC,SAAQ;MAC3Bp2B,cAAAG,wBAACw2B,mBAAkB;QAAAnC,QAAQ+C,cAAc/C;QAAQC;MAAoC,CAAA;KACvF,CAAA;EAEJ,CAAA;AAEJ;AASA,SAASqD,mBAAmBh4B,OAAgC;AAC1D,QAAM;IAAC+3B;IAAahJ;IAAU9tB,OAAAA;IAAOg3B;MAAYj4B;AAC3C,QAAA;IAACm4B;EAAY,IAAAJ;AAEb,QAAAjJ,kBAAc/sB,0BAAY,MAAM;AACpCk2B,aAASh3B,MAAK;AACV,QAAAk3B;AAAmBA,eAAA;EACtB,GAAA,CAACl3B,QAAOg3B,UAAUE,QAAQ,CAAC;AAE9B,QAAMC,iBAAiBL,YAAYxb,aACjClc,wBAAC0N,KAAI;IAAA4M,SAAS;IACZza,cAAAG,wBAACob,MAAK;MAAA+C,MAAM;MAAIte,UAAA63B,YAAYxb;KAAM;EACpC,CAAA;AAIA,aAAAlc,wBAACg4B,UAAA;IACC,eAAa,UAAUjpB,OAAA2oB,YAAY1R,MAAMrT,QAAQ,KAAK,EAAE,CAAA;IACxD+b,UAAUA,YAAYrH,QAAQqQ,YAAYhJ,QAAQ;IAClD9S,SAAS6S;IACTnU,SAAS;IACTE,MAAMkd,YAAYld;IAElB3a,cAAAG,wBAACoxB,SAAA;MACCtT,SAASia;MACTrJ,UAAU,CAACqJ;MACXtD,oBAAoB,CAAC,QAAQ,QAAQ;MACrC3D,WAAU;MACVQ,QAAM;MAENzxB,cAAC8a,yBAAAsC,MAAA;QAAKc,OAAM;QAASuB,UAAU;QAC7Bzf,UAAA,KAAA8a,yBAACsC,MAAK;UAAA9X,MAAM;UAAGoa,UAAU;UACtB1f,UAAA,CAAA63B,YAAYhc,YACV1b,wBAAA0N,KAAA;YAAIuqB,aAAa;YAChBp4B,cAAAA,yBAACub,MACE;cAAAvb,UAAA,KAAeq4B,6BAAAR,YAAYhc,IAAI,KAAKgc,YAAYhc,UAChDyc,oCAAmBT,YAAYhc,IAAI,SAAKxO,4BAAcwqB,YAAYhc,IAAI,CAAA;YAAA,CACzE;UACF,CAAA,OAGF1b,wBAACob,MAAM;YAAAvb,UAAA63B,YAAY1R;UAAM,CAAA,CAAA;SAC3B,GAEC0R,YAAYU,gBACVp4B,wBAAA0N,KAAA;UAAIob,YAAY;UACfjpB,cAAAG,wBAACq4B,SAAA;YACClZ,MAAMmZ,OAAOZ,YAAYU,QAAQ,EAC9B/a,MAAM,GAAG,EACT9V,IAAKgxB,OAAMA,EAAEv2B,MAAM,GAAG,CAAC,EAAEw2B,YAAAA,IAAgBD,EAAEv2B,MAAM,CAAC,CAAC;UAAA,CAAA;SAE1D,CAAA;OAEJ;IAAA,CACF;EAAA,CAAA;AAGN;AC/IA,SAASy2B,8BAA8B94B,OAA2C;AAChF,QAAM;IAAC+uB;IAAUgK;IAAUC;EAAA,IAAUh5B;AACrC,QAAM,CAACi5B,kBAAkB,GAAGC,gBAAgB,IAAIF;AAChD,QAAM,CAACG,eAAeC,gBAAgB,QAAIltB,uBAAmC,IAAI;AAE3E,QAAAksB,qBAAiBz2B,sBAAQ,MAAM;AACnC,QAAI,CAACs3B,oBAAqB,CAACA,iBAAiB1c,SAAS,CAAC0c,iBAAiBR;AAAkB,aAAA;AAGvF,eAAAzd,yBAACsC,MAAK;MAAA3C,SAAS;MAAGoL,OAAO;QAAC9f,UAAU;MAAM;MAAAmY,OAAM;MAC9Cle,UAAA,KAAAG,wBAACob,MAAK;QAAA+C,MAAM;QAAIte,UAAA+4B,iBAAiB1c;OAAM,GACtC0c,iBAAiBR,gBACfp4B,wBAAA0N,KAAA;QAAIob,YAAY8P,iBAAiB1c,QAAQ,IAAI;QAC5Crc,cAAAG,wBAACq4B,SAAA;UACClZ,MAAMmZ,OAAOM,iBAAiBR,QAAQ,EACnC/a,MAAM,GAAG,EACT9V,IAAKgxB,OAAMA,EAAEv2B,MAAM,GAAG,CAAC,EAAEw2B,YAAY,IAAID,EAAEv2B,MAAM,CAAC,EAAEg3B,YAAA,CAAa;QAAA,CAAA;OAExE,CAAA;IAEJ,CAAA;EAAA,GAED,CAACJ,gBAAgB,CAAC;AAErB,aAAA,yBACG3b,MACE;IAAApd,UAAA,CAAA+4B,wBAAA,wBACEK,eAAc;MAAAhD,SAAS;MACtBp2B,cAACG,wBAAAoxB,SAAA;QAAQ1C,UAAU,CAACqJ;QAAgBja,SAASia;QAAgBzG,QAAM;QAACR,WAAU;QAC5EjxB,cAACG,wBAAA+a,OAAA;UAAM5V,MAAM;UACXtF,cAAAG,wBAACwb,QAAA;YACC,eAAa,UAAUzM,OAAiB6pB,iBAAA5S,KAAA;YACxC0I,UAAUA,YAAYrH,QAAQuR,iBAAiBlK,QAAQ;YACvDhT,MAAMkd,iBAAiBld;YAEvBE,SAASgd,iBAAiBd;YAC1BxrB,KAAKysB;YACLtd,MAAMmd,iBAAiB5S;YACvBxL,MAAMoe,iBAAiBpe,QAAQ;UAAA,CAAA;QAEnC,CAAA;MACF,CAAA;KACF,GAGDke,YAAYG,iBAAiB31B,SAAS,SACpClD,wBAAA0N,KAAA;MAAIob,YAAY;MACfjpB,cAACG,wBAAA22B,kBAAA;QAAiBC,cAAciC;QAAkBnK;MAAoB,CAAA;KACxE,GAGDkK,oBAAoBA,iBAAiBvE,cACpCr0B,wBAACw2B,mBAAAA;MAAkBnC,QAAQuE,iBAAiBvE;MAAQC,kBAAkBwE;IAAe,CAAA,CAAA;EAEzF,CAAA;AAEJ;AAEa,IAAAI,+BAA2BvgB,mBAAK,SAASugB,4BAA2B;AAC/E,QAAM;IAACt5B;IAASgvB;IAAiBpiB;IAAYke;EAAA,IAAa7d,gBAAgB;AAMtE,MAAA,CAACjN,WAAW,CAAC8qB,WAAW;AACnB,WAAA;EACT;AAGE,aAAA1qB,wBAACN,6BAAA;IAGCE;IAEAE,aAAa4qB;IAEZ7qB,UAAAs5B,YAAA;AAAA,UAAC;QAACR;MAAA,IACDQ;AAAA,iBAAAn5B,wBAACy4B,+BAAA;QACC/J,UAAUE,oBAAoB;QAI9B8J,UAAU94B,QAAQsD,SAAS;QAC3By1B;MAAA,GAEKnsB,UACP;IAAA;EAAA,CAAA;AAIR,CAAC;AAEY,IAAA4sB,8BAA0BzgB,mBAAK,SAASygB,2BAA0B;AAC7E,QAAM;IAACxK;IAAiBlE;IAAW6E;MAAiB1iB,gBAAgB;AAGpE,QAAMsjB,UAAUD,oBAAoBX,eAAgBvjB,WAAUA,MAAMmkB,OAAO;AAErE,QAAAkJ,YAAWlJ,WAAAA,OAAAA,SAAAA,QAASxtB,OAAM;AAChC,QAAM+rB,aAAYhE,aAAW,OAAA,SAAAA,UAAAtC,WAASsC,aAAAA,OAAAA,SAAAA,UAAWrC,cAAa,CAAA,GAAI4D,SAASoN;AAC3E,QAAMv5B,kBAAcwB,sBAAQ,OAAO;IAAC,GAAIopB,aAAa,CAAA;IAAK2O;EAAQ,IAAI,CAAC3O,WAAW2O,QAAQ,CAAC;AAC3F,QAAMC,qBAAiBh4B,sBAAQ,MAAM,CAACi4B,oBAAoB,GAAG,CAAA,CAAE;AAG7D,aAAAv5B,wBAACN,6BAAAA;IAA4BE,SAAS05B;IAAgBx5B;IACnDD,UAAC25B,YAAA;AAAA,UAAA;QAACb;UACDa;AAAA,iBAAAx5B,wBAACy4B,+BAAA;QACC/J,UAAUE,oBAAoB,eAAevH,QAAQqH,QAAQ;QAC7DgK,UAAU;QACVC;MAAA,CAGN;IAAA;EAAA,CAAA;AAEJ,CAAC;ACxHD,IAAMc,cAAqD;EACzDC,SAAS;EACTC,SAAS;EACTC,SAAS;EACTC,QAAQ;AACV;AAEA,SAASC,oBAAAC,QAAwD;AAAA,MAApC;IAACpB;MAAmCoB;AAE7D,aAAA/5B,wBAACg6B,QAAAA;IAAOhf,OAAO;IACZnb,UAAAA,OAAO0H,IAAI,CAAC0yB,OAAOr5B,eAClBZ,wBAACoxB,SAAA;MACCtT,SACEmc,MAAM/d,aACJlc,wBAAC0N,KAAI;QAAA4M,SAAS;QACZza,cAAAG,wBAACob,MAAK;UAAA+C,MAAM;UAAIte,UAAAo6B,MAAM/d;QAAM,CAAA;OAC9B;MAGJwS,UAAU,CAACuL,MAAM/d;MAEjB4U,WAAU;MACVQ,QAAM;MAENzxB,cAAAG,wBAACk6B,OAAA;QACCvW,UAAU;QACVuB,MAAK;QACL5F,UAAU;QACVC,UAAU;QACV1E,QAAQ;QACRL,MAAMyf,MAAM7W,QAAQqW,YAAYQ,MAAM7W,KAAK,IAAI;QAC/CsC,OAAO;UAAC2L,YAAY;QAAQ;QAE3BxxB,UAAMo6B,MAAAjU;MAAA,CACT;IAAA,GAdKsS,OAAO13B,MAAK,CAgBpB,CAAA;EACH,CAAA;AAEJ;AAEO,SAASu5B,iBAAiB;AAC/B,QAAM;IAAC75B;IAAQoqB;EAAS,IAAI7d,gBAAgB;AAExC,MAAA,CAAC6d,aAAa,CAACpqB;AAAe,WAAA;AAElC,aACGN,wBAAAK,4BAAA;IAA2BC;IAAgBC,YAAYmqB;IACrD7qB,UAAAu6B,YAAA;AAAA,UAAC;QAACzB;MAAA,IAAYyB;AAAA,iBAAAp6B,wBAAC85B,qBAAoB;QAAAnB;MAAA,CAAgB;IACtD;EAAA,CAAA;AAEJ;;;;;;AC7DA,IAAA3zB;AAcA,IAAMqH,OAAO8M,sCAAO8D,IAAI,EAAXjY,SAAYA,OAAAqU,aAAA,CAAA,wBAAA,CAAA,EAAA;AAIlB,SAASghB,cAAc16B,OAA2B;AACvD,QAAM;IAAC0L;IAAWqjB;IAAU4L;IAAeC;IAAaC;EAAY,IAAA76B;AAG9D,QAAA86B,uBAAuBC,WAAWJ,iBAAiB,IAAI;IAACK,SAAS;IAAMC,WAAW;EAAA,CAAK;AAE7F,QAAMC,oBAAoBH,WAAWJ,iBAAiB,IAAI;IAACK,SAAS;GAAK;AAGnE,QAAAG,qBAAqBJ,WAAWH,eAAe,IAAI;IAACI,SAAS;IAAMC,WAAW;EAAA,CAAK;AAEzF,QAAMG,kBAAkBL,WAAWH,eAAe,IAAI;IAACI,SAAS;GAAK;AAG/D,QAAAK,iBAAiBN,WAAWH,eAAe,IAAI;IAACI,SAAS;IAAOC,WAAW;EAAA,CAAK;AAChF,QAAAK,mBAAmBP,WAAWJ,iBAAiB,IAAI;IAACK,SAAS;IAAOC,WAAW;EAAA,CAAK;AAC1F,QAAMM,YAAYV,WACd,gBAAgBzrB,OAAAisB,cAAA,IAChB,kBAAkBjsB,OAAAksB,gBAAA;AAEtB,aAAA,wBACG5uB,MAAK;IAAA0R,OAAM;IAAS,WAAQ;IAAgBxD,QAAO;IAClD1a,cAAAG,wBAACoxB,SAAA;MACCN,WAAU;MACVQ,QAAM;MACNxT,aACE9d,wBAAC+a,OAAM;QAAAT,SAAS;QAAGU,OAAO;QACxBnb,cAAAG,wBAACob,MAAK;UAAA+C,MAAM;UACTte,UAAA26B,eACG7f,yBAAA4K,6BAAA;YAAA1lB,UAAA,CAAA,gBACa,SACbG,wBAAC,QAAA;cAAK,cAAYu6B,cAAcS,iBAAiBC;cAC9Cp7B,UAAA06B,cAAcO,qBAAqBL;YACtC,CAAA,CAAA;UAAA,CACF,QAEE9f,yBAAA4K,6BAAA;YAAA1lB,UAAA,CAAA,uBACgBG,wBAAA,QAAA;cAAK,cAAYi7B;cAAmBp7B,UAAqB46B;aAAA,CAAA;UAC3E,CAAA;QAEJ,CAAA;OACF;MAGF56B,cAAAG,wBAACwb,QAAA;QACC0J,MAAK;QACL1K,MAAMggB,WAAW,aAAa;QAC9BlU,UAAU;QACVoI;QACA,cAAYwM;QAEZr7B,cAAA8a,yBAACsC,MAAK;UAAAc,OAAM;UACVle,UAAA,KAAAG,wBAAC0N,KAAAA;YAAIuqB,aAAa5sB,YAAY,IAAI;YAChCxL,cAAAG,wBAACob,MAAAA;cAAK+C,MAAM;cAAG,eAAY;cACxBte,UAAAA,eAAYG,wBAAAm7B,UAAA,CAAA,CAAS,QAAMn7B,wBAAAo7B,aAAA,CAAA,CAAY;aAC1C;UACF,CAAA,GACC,CAAC/vB,iBACCrL,wBAAAob,MAAA;YAAK+C,MAAM;YAAGkd,QAAO;YACnBx7B,UAAA26B,eACEx6B,wBAAA,QAAA;cAAK,cAAYk7B;cACfr7B,UAAA06B,cAAcQ,kBAAkBF;YACnC,CAAA,QAAA,wBAEC,QAAK;cAAA,cAAYK;cAAYr7B,UAAAg7B;YAAA,CAAkB;UAEpD,CAAA,CAAA;SAEJ;MAAA,CACF;IAAA,CAEJ;EAAA,CAAA;AAEJ;;;;;;AC3FA,IAAA71B;AAAA,IAAAC;AAAA,IAAAyE;AAIA,IAAM4xB,mBAAmBniB,sCAAOoiB,OAAO30B,IAAI,EAAlB5B,SAAmBA,OAAAqU,aAAA,CAAA,iCAAA,CAAA,EAAA;AAO5C,IAAMmiB,SAAU77B,eAAA,wBACb47B,OAAOE,QAAP;EAAcC,MAAK;EAAOlS,GAAE;EAAImS,IAAG;EAAOC,IAAG;EAAOC,aAAY;EAAO,GAAGl8B;AAAO,CAAA;AAEpF,IAAMm8B,SAAUn8B,eACdK,wBAACs7B,kBAAA;EACCI,MAAK;EACLK,GAAE;EACD,GAAGp8B;AAAA,CACN;AAEF,IAAMq8B,YAAar8B,eAChBK,wBAAAu7B,OAAO30B,MAAP;EAAYm1B,GAAE;EAAmC,GAAGp8B;AAAO,CAAA;AAE9D,IAAMs8B,OAAQt8B,eACXK,wBAAAu7B,OAAO30B,MAAP;EAAYm1B,GAAE;EAA+C,GAAGp8B;AAAO,CAAA;AAG1E,IAAMu8B,kBAAkBC,GAASl3B,OAAAA,KAAAoU,aAAA,CAAA,2FAAA,CAAA,EAAA;AAQjC,IAAM+iB,cAAcjjB,sCAAOkjB,EAAP3yB,OAAAA,KAAQ2P,aAAAA,CAAAA,wEAII,kCAAf,CAAA,IAAA6iB,eAAA;AAIjB,IAAMI,OAAO;EACXC,SAAS;IACPC,OAAO;IACPC,YAAY;MACVrc,UAAU;IACZ;EACF;EACAsc,OAAO;IACLF,OAAO,CAAC,GAAG,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,CAAC;IAClDC,YAAY;MACVrc,UAAU;MACVtD,OAAO;IACT;EACF;EACA6f,SAAS;IAACF,YAAY;MAACrc,UAAU;;EAAE;AACrC;AAEA,IAAMqb,SAAS;EACbc,SAAS;IACPK,iBAAiB;IACjBC,kBAAkB;IAClBC,SAAS;IACTL,YAAY;MACVrc,UAAU;IACZ;EACF;EACAsc,OAAO;IACLE,iBAAiB;IACjBC,kBAAkB;IAClBC,SAAS;IACTL,YAAY;MACVrc,UAAU;IACZ;EACF;EACAuc,SAAS;IACPC,iBAAiB;IACjBC,kBAAkB;IAClBC,SAAS;IACTL,YAAY;MACVrc,UAAU;IACZ;EACF;AACF;AAEA,IAAM2c,SAAS;EACbR,SAAS;IACPO,SAAS;IACTL,YAAY;MACVrc,UAAU;IACZ;EACF;EACAsc,OAAO;IACLI,SAAS;IACTL,YAAY;MACVrc,UAAU;IACZ;EACF;EACAuc,SAAS;IACPG,SAAS;EACX;AACF;AAEA,IAAME,YAAY;EAChBT,SAAS;IACPU,YAAY;IACZR,YAAY;MAACrc,UAAU;IAAC;EAC1B;EACAsc,OAAO;IACLO,YAAY;IACZR,YAAY;MACV3f,OAAO;MACPsD,UAAU;IACZ;EACF;EACAuc,SAAS;IACPM,YAAY;IACZR,YAAY;MACVrc,UAAU;IACZ;EACF;AACF;AAEA,IAAM8c,OAAO;EACXX,SAAS;IACPU,YAAY;IACZR,YAAY;MAACrc,UAAU;IAAC;EAC1B;EACAsc,OAAO;IACLO,YAAY;IACZR,YAAY;MAACrc,UAAU;IAAC;EAC1B;EACAuc,SAAS;IACPM,YAAY;IACZR,YAAY;MACVrc,UAAU;MACVtD,OAAO;IACT;EACF;AACF;AAMO,SAASqgB,mBAAmBx9B,OAAgC;AAC3D,QAAA;IAAC0gB;EAAU,IAAA1gB;AAEjB,MAAI,CAAC0gB,QAAQ;AACJ,WAAA;EACT;AAGE,aAAArgB,wBAAC,OAAA;IACCoF,OAAM;IACNgV,QAAO;IACPgjB,SAAQ;IACR1B,MAAK;IACL2B,QAAO;IACPxB,aAAY;IACZ,oBAAiB;IAEjBh8B,cAAA8a,yBAAC4gB,OAAOc,GAAP;MAASiB,UAAUhB;MAAMiB,SAASld;MAAQmd,SAASnd;MAClDxgB,UAAA,KAAA8a,yBAACyhB,aAAY;QAAA,eAAa/b,WAAW,YAAY,SAAY;QAC3DxgB,UAAA,KAAAG,wBAAC87B,QAAAA;UAAOwB,UAAUP;UAAQQ,SAASld;UAAQmd,SAASnd;SAAQ,OAAA,wBAC3Dmb,QAAO;UAAA8B,UAAU7B;UAAQ8B,SAASld;UAAQmd,SAASnd;SAAQ,CAAA;OAC9D,OAAA,wBACC2b,WAAU;QAAAsB,UAAUN;QAAWO,SAASld;QAAQmd,SAASnd;OAAQ,OAAA,wBACjE4b,MAAK;QAAAqB,UAAUJ;QAAMK,SAASld;QAAQmd,SAASnd;OAAQ,CAAA;KAC1D;EAAA,CAAA;AAGN;ACpKA,IAAMod,eAAeC,aAAAA,QAAMtT,WAAW,SAASqT,cAC7C99B,OACA2M,KACA;AACA,QAAM;IAACjB;IAAWgV;IAAQka;IAAa,GAAG/5B;EAAQ,IAAAb;AAClD,QAAMo7B,kBAAkBL,WAAWH,eAAe,IAAI;IAACI,SAAS;GAAK;AAC/D,QAAAG,qBAAqBJ,WAAWH,eAAe,IAAI;IAACI,SAAS;IAAMC,WAAW;EAAA,CAAK;AACnF,QAAAI,iBAAiBN,WAAWH,eAAe,IAAI;IAACI,SAAS;IAAOC,WAAW;EAAA,CAAK;AAEhF,QAAA+C,kBAA2Br8B,sBAAQ,MAAM;AAC7C,QAAI+e,WAAW,WAAW;AACjB,aAAA;QACL5E,MAAM;QACNjB,MAAM;MAAA;IAEV;AACA,QAAI6F,WAAW,WAAW;AACjB,aAAA;QACL5E,MAAMsf;QACNvgB,MAAM;MAAA;IAEV;AACA,QAAI6F,WAAW,SAAS;AACf,aAAA;QACL5E,MAAM;QACNjB,MAAM;MAAA;IAEV;AAEA,WAAO,CAAA;EAAC,GACP,CAAC6F,QAAQ0a,eAAe,CAAC;AAE5B,MAAI,CAAC1a,QAAQ;AACJ,WAAA;EACT;AAGE,aAAArgB,wBAACoxB,SAAA;IACCN,WAAU;IACVQ,QAAM;IACN5C,UAAUrO,WAAW;IACrBvC,aACGnD,yBAAAI,OAAA;MAAMT,SAAS;MAAGU,OAAO;MACxBnb,UAAA,KAAAG,wBAACob,MAAK;QAAA+C,MAAM;QAAGkd,QAAO;QAAWx7B,UAEjC;OAAA,OACC8a,yBAAAS,MAAA;QAAK+C,MAAM;QAAG/B,OAAK;QAACvc,UAAA,CAAA,sBACJG,wBAAA,QAAA;UAAK,cAAYg7B;UAAiBn7B,UAAmBi7B;SAAA,CAAA;OACtE,CAAA;KACF;IAGFj7B,cAAAG,wBAACwb,QAAA;MACC0J,MAAK;MACLjH,SAAQ;MACRzD,MAAMmjB,eAAa,OAAA,SAAAA,YAAAnjB;MAClB,GAAGha;MACJ,eAAY;MACZ8L;MACA,cAAW;MAEXzM,cAAA8a,yBAACsC,MAAK;QAAAc,OAAM;QACVle,UAAA,KAAAG,wBAAC0N,KAAI;UAAAuqB,aAAa5sB,YAAY,IAAI;UAAG,eAAY;UAC/CxL,cAAAG,wBAACob,MACC;YAAAvb,cAAAG,wBAACm9B,oBAAmB;cAAA9c;YAAA,CAAgB;UACtC,CAAA;SACF,GACC,CAAChV,iBACCrL,wBAAAob,MAAA;UAAK+C,MAAM;UAAGkd,QAAO;UACnBx7B,UAAA89B,eAAA,OAAA,SAAAA,YAAaliB;SAChB,CAAA;OAEJ;IAAA,CACF;EAAA,CAAA;AAGN,CAAC;AAEY,IAAAmiB,sBAAsBF,aAAAA,QAAM/kB,KAAK8kB,YAAY;ACjF1D,IAAMI,kBAAkB;AACxB,IAAMC,gBAAgB;AAET,IAAAC,wBAAoBplB,mBAAK,SAASolB,qBAAoB;AAXnE,MAAA/4B;AAYQ,QAAA;IACJg5B;IACAxxB;IACAC;IACAie;IACAuT;IACAC;IACA3O;IACA7qB;MACEmI,gBAAgB;AACd,QAAAsxB,YAAYC,aAAa5xB,YAAYC,YAAY;AAEvD,QAAM8tB,cAAc71B,SAAO,OAAA,SAAAA,MAAA25B;AACrB,QAAA/D,iBAAgBt1B,MAAW0lB,aAAA,OAAA,SAAAA,UAAArC,cAAX,OAAsB,SAAArjB,IAAAq5B;AACtC,QAAA7D,WAAWnT,QAAQqD,aAAA,OAAA,SAAAA,UAAW8P,QAAQ;AACtC,QAAAnS,YAAYhB,QAAQqD,aAAA,OAAA,SAAAA,UAAWrC,SAAS;AACxC,QAAA2E,UAAU3F,QAAQqD,aAAA,OAAA,SAAAA,UAAWtC,KAAK;AAExC,QAAM,CAACkW,iBAAiBC,kBAAkB,QAAI1yB,uBAAgC,IAAI;AAC5E,QAAA2yB,eAAezyB,eAAeuyB,eAAe;AACnD,QAAMjzB,YAAY,CAACmzB,iBAAgBA,gBAAA,OAAA,SAAAA,aAAcp5B,SAAQ;AAEzD,QAAM,CAACib,QAAQoe,SAAS,QAAI5yB,uBAAqC,IAAI;AAGrE,QAAM6yB,kBAAkBxO,oBAAoBX,eAAgBvjB,WAAUA,MAAM2yB,eAAe;AAG3FzyB,8BAAU,MAAM;AAGd,QAAImU,WAAW,aAAa,CAAC8d,UAAUS,WAAW;AAChD,YAAMC,UAAU38B,WAAW,MAAMu8B,UAAU,OAAO,GAAGZ,eAAe;AAC7D,aAAA,MAAMiB,aAAaD,OAAO;IACnC;AAEA,QAAIxe,WAAW,SAAS;AACtB,YAAMwe,UAAU38B,WAAW,MAAMu8B,UAAU,IAAI,GAAGX,aAAa;AACxD,aAAA,MAAMgB,aAAaD,OAAO;IACnC;KACC,CAACxe,QAAQka,aAAa4D,UAAUS,SAAS,CAAC;AAG7CG,oCAAgB,MAAM;AACpBN,cAAU,IAAI;EAAA,GACb,CAACjyB,UAAU,CAAC;AAGfuyB,oCAAgB,MAAM;AACpB,QAAIZ,UAAUS,WAAW;AACvBH,gBAAU,SAAS;IACrB;EACC,GAAA,CAACN,UAAUS,WAAWrE,WAAW,CAAC;AAErC,QAAMyE,mBAAe19B,sBACnB,UACEtB,wBAAC49B,qBAAA;IACCrD;IACAla,QAAQA,WAAW2M,UAAU,YAAY;IACzCpR,SAASoiB,cAAcC,iBAAiBC;IACxCxP,UAAUgQ;IACVzmB,UAAU+lB;IACV3yB;EAAA,CACF,GAEF,CACE2hB,SACAgR,aACAC,gBACAC,eACA3D,aACAmE,iBACAre,QACAhV,SAAA,CACF;AAGF,QAAM4zB,oBAAgB39B,sBACpB,OACGk5B,YAAYnS,kBACVroB,wBAAA0N,KAAA;IAAIuqB,aAAa;IAChBp4B,cAAAG,wBAACq6B,eAAA;MACC3L,UAAUgQ;MACVpE;MACAC;MACAC;MACAnvB;IAAA,CAAA;GAEJ,GAEJ,CAACA,WAAWivB,eAAeC,aAAaC,UAAUnS,WAAWqW,eAAe,CAAA;AAG9E,aAAA,yBACGzhB,MAAK;IAAAc,OAAM;IAAS,WAAQ;IAAoBzR,KAAKiyB;IACnD1+B,UAAA,CAAAo/B,mBAEAtkB,yBAAAsC,MAAA;MAAKc,OAAM;MAAS5Y,MAAM;MACxBtF,UAAA,CAAAm/B,cACA,CAAC3zB,iBACCrL,wBAAA0N,KAAA;QAAIob,YAAY;QACfjpB,cAAAG,wBAACm6B,gBAAAA,CAAAA,CAAe;MAClB,CAAA,CAAA;KAEJ,CAAA;EACF,CAAA;AAEJ,CAAC;;;;;;ACvHD,IAAAn1B;AAYA,IAAMk6B,qBAAqB/lB,sCAAOzL,GAAG,EAAV1I,SAAWA,OAAAqU,aAAA,CAAA,4CAAA,CAAA,EAAA;AAK/B,SAAS8lB,kBAAkBx/B,OAA+B;AACzD,QAAA;IAACy/B;EAAiB,IAAAz/B;AACxB,QAAM;IAACW;IAAQivB;EAAa,IAAI1iB,gBAAgB;AAGhD,QAAM6xB,kBAAkBxO,oBAAoBX,eAAgBvjB,WAAUA,MAAM2yB,eAAe;AAEpF,aAAAr9B,sBACL,UACEtB,wBAAC0N,KAAI;IAAA2xB,aAAa;IAAGC,cAAc,CAAC,GAAG,CAAC;IAAG/f,UAAU;IACnD1f,cAAC8a,yBAAAsC,MAAA;MAAKc,OAAM;MACVle,UAAA,KAACG,wBAAA0N,KAAA;QAAIvI,MAAM,CAAC,GAAG,CAAC;QAAItF,UAAAS,cAAWN,wBAAA+9B,mBAAA,CAAA,CAAkB;MAAG,CAAA,OAAA,wBAEnDmB,oBAAmB;QAAA/5B,MAAM;QAAG2jB,YAAY,CAAC,GAAG,CAAC;QAAGxc,KAAK8yB;QACnDv/B,UAAkB6+B,sBAAA1+B,wBAACo5B,yBAAAA,CAAAA,CAAwB,QAAKp5B,wBAACk5B,0BAAAA,CAAyB,CAAA;OAC7E,CAAA;IAAA,CACF;EACF,CAAA,GAEF,CAACkG,eAAe9+B,QAAQo+B,eAAe,CAAA;AAE3C;AClBA,SAASa,0BACP5/B,OACA;AACM,QAAA;IACJ6/B;IACAC;IACAlyB,KAAK;IACL1N;IACA8C;IACA+8B;IACAnZ;IACAoZ;IACAhH;IACA,GAAGn4B;EACD,IAAAb;AAEE,QAAAigC,eAAejH,OAAO8G,WAAW;AAEvC,QAAMI,oBAAgBn+B,0BACnBqe,WAAe;AACd,UAAM+f,iBAAiBnH,OAAO70B,OAC3BkI,WAAUA,MAAMosB,gBAAY2H,iBAAAA,SAAS/zB,MAAMosB,UAAUrY,KAAK,CAAA;AAGvD,UAAAigB,gBAAgBF,eAAe,CAAC;AAElC,QAAAA,eAAe58B,SAAS,GAAG;AAErBwR,cAAAC,KACN,mFAAmF5F,OAAAA,cAAcqpB,UAAQ,GAAA,CAAA;IAE7G;AAEA,QAAI4H,iBAAiB,CAACA,cAActR,YAAYsR,cAAclI,UAAU;AACtE/X,YAAM6C,eAAe;AACrBod,oBAAclI,SAAS;AACT4H,oBAAA/G,OAAOzxB,QAAQ84B,aAAa,CAAC;AAC3C;IACF;AAEA,QAAIzZ,WAAW;AACbA,gBAAUxG,KAAK;IACjB;EACF,GACA,CAAC2f,eAAenZ,WAAWoS,MAAM,CAAA;AAG5B,aAAAzrB,4BACLK,IACA;IACE5K;IACA4jB,WAAWsZ;IACXvZ,UAAU;IACV,GAAG9lB;IACH8L,KAAKqzB;EACP,GACA,CACE9/B,UACA+/B,gBAAgBA,aAAavL,cAC3Br0B,wBAACg2B,qBAAAA;IAAoBC,SAAQ;IAC3Bp2B,cAACG,wBAAAw2B,mBAAA;MAAkBnC,QAAQuL,aAAavL;MAAQC,kBAAkBkL;IAAmB,CAAA;GACvF,CAAA,CAEJ;AAEJ;AAaO,IAAMS,0BAA0BvC,aAAAA,QAAM/kB,KAC1ChZ,WAAsF;AACrF,QAAM;IAAC6/B;IAAmBjyB,KAAK;IAAO1N;IAAU,GAAGW;EAAQ,IAAAb;AAC3D,QAAM;IAACC;IAAS8qB;EAAS,IAAI7d,gBAAgB;AAC7C,QAAM,CAAC4yB,aAAaS,cAAc,QAAIr0B,uBAAS,EAAE;AAE3C,QAAA6zB,oBAAgBh+B,0BAAa4H,SAAgB;AACjD42B,mBAAe52B,GAAG;EACpB,GAAG,CAAA,CAAE;AAEL,QAAMxJ,kBAA0CwB,sBAC9C,MACEopB,aAAa;IACX,GAAGA;;IAGHyV,YAAYA,MAAM;;IAGlB9G,UAAU;EACZ,GACF,CAAC3O,SAAS,CAAA;AAGR,MAAA,CAAC5qB,eAAe,CAACF;AAAgB,WAAA;AAErC,aAAA,wBACGF,6BAA4B;IAAAI;IAA0BF;IACpDC,UAACugC,YAAA;AAAA,UAAA;QAACzH;UACDyH;AAAA,iBAAApgC,wBAACu/B,2BAAA;QACE,GAAG/+B;QACJi/B;QACAD;QACAjyB;QACAmyB;QACA/G;QAEC94B;MAAA,CAGP;IAAA;EAAA,CAAA;AAEJ,CACF;AAEAogC,wBAAwB7hB,cAAc;;;;;;AC/ItC,IAAApZ;AA+CA,IAAMq7B,2BAA4D;;EAEhE;;EAEA;AAAA;AAGF,IAAMC,4BAA4BnnB,sCAAOonB,mBAAmB,EAA1Bv7B,SAA2BA,OAAAqU,aAAA,CAAA,gGAAA,CAAA,EAAA;AAQtD,IAAMmnB,mBAAe7nB,mBAAK,SAAS6nB,cAAa7gC,OAAkC;AACvF,QAAM;IAACsN,MAAMwzB;EAAgB,IAAIC,UAAU;AAGzC,aAAA1gC,wBAAC2gC,gBAAe;IAAA1zB,MAAMtN,MAAMkS,KAAK+uB,UAAUH;IACzC5gC,cAACG,wBAAA6gC,mBAAA;MAAmB,GAAGlhC;IAAA,CAAO;EAChC,CAAA;AAEJ,CAAC;AAED,SAASkhC,kBAAkBlhC,OAAkC;AAxE7DqF,MAAAA;AAyEQ,QAAA;IAAC6M;IAAMkK;EAAW,IAAApc;AACxB,QAAM;IAACmhC;EAAA,IAA6BJ,UAAA,EAAYniB;AAChD,QAAMwiB,aAAa/Z,cAAc;AACjC,QAAM/iB,UAAU+8B,eAAenvB,KAAK5N,SAAS88B,WAAWlgC,MAAM;AACxD,QAAA;IAAC4L;IAAcw0B,UAAUC;MAAoBC,gBAAgBl9B,QAAQtB,IAAIsB,QAAQpB,IAAI;AAIrF,QAAAu+B,oBAAgB9/B,sBAAQ,MAAM;AAClC,WAAOw/B,0BAA0B;MAC/Bj+B,MAAM;MACN2J,YAAYvI,QAAQtB;MACpBmQ,YAAY7O,QAAQpB;IAAA,CACrB;EAAA,GACA,CAACoB,QAAQtB,IAAIsB,QAAQpB,MAAMi+B,yBAAyB,CAAC;AAExD,QAAM,CAACO,qBAAqBC,4BAA4B,IAAIC,uBAAuB;IACjFH;EAAA,CACD;AACK,QAAAH,WAAWC,oBAAoB,CAACI;AAEhC,QAAAE,oBAAgBlgC,sBAAQ,MAAM;AAC3B,WAAA2/B,YAAYx0B,gBAAgBxI,QAAQpB,SAAS4J,eAChDg1B,kBAAkB9hC,OAAOsE,SAASwI,YAAY,IAC9C9M;KACH,CAACA,OAAO8M,cAAcw0B,UAAUh9B,OAAO,CAAC;AAE3C,QAAM;IAACV,oBAAAA;IAAoBd;IAAqBjB;IAAY4B;MAAoB29B;AAC1E,QAAAW,gBAAc18B,MAAA5B,iBAAiB5B,aAAa,CAAC,MAA/B,OAAAwD,SAAAA,IAAmC,CAAG,EAAAnE,WAAU,CAAA;AACpE,QAAM8gC,yBAAyBv+B,iBAAiBF;AAC1C,QAAA;IAACN;EAAiB,IAAA8+B;AAElB,QAAAE,iBAAmEtgC,sBAAQ,MAAM;AACrF,WAAOsB,gBACH;MACEgE,MAAM2gB,WAAe3kB,aAAa;MAClCoJ;;QAEExK,cAAcmgC,yBAAyB,IACnC,SACAngC,cAAcmgC,yBAAyB,IACvC,aACA;;QAER;MAAC/6B,MAAM,CAAA;MAAIoF,OAAO;IAAM;EAC3B,GAAA,CAACpJ,eAAepB,YAAYmgC,sBAAsB,CAAC;AAEtD,MAAI19B,QAAQpB,SAAS,OAAO,CAACo+B,UAAU;AAC9B,eAAAjhC,wBAACkd,aAAAA;MAAY/X,MAAM;MAAKG,UAAU;MAAKyW;MAAkBG,OAAM;IAAoB,CAAA;EAC5F;AAEA,MAAI,CAACzP,cAAc;AAEf,eAAAzM,wBAACqf,WAAA;MACCla,MAAM;MACNG,UAAU;MACVyW;MACAG,WAAA,wBAAA,6BAAA;QAASrc,UAA0B;MAAA,CAAA;MAEnCA,cAAAA,wBAACkb,OAAM;QAAAC,OAAO;QACZnb,cAAC8a,yBAAAS,MAAA;UAAK7N,IAAG;UAAI1N,UAAA,CAAA,kEAC+CG,wBAAC,QAAM;YAAAH,UAAAoE,QAAQtB;UAAG,CAAA,GAAQ,KAAI,gCAAA;QAAA,CAE1F;MACF,CAAA;IAAA,CAAA;EAGN;AAGE,aAAA3C,wBAAC6hC,sBAAA;IAIE,GAAGL;IAKJ3hC,cAAAG,wBAAC8hC,+BAAA;MACCC,4BAA4Bx+B;MAC5By+B,iBAAiBv/B;MACjBw/B,2BAA2BZ;MAC3BO;MAEA/hC,cAAAA,wBAACqiC,mBAAkB,CAAA,CAAA;IAAA,CACrB;EAAA,GAbK,GAAGnzB,OAAYtC,cAAA,GAAA,EAAIsC,OAAQ9K,QAAAtB,EAAA,CAAA;AAgBtC;AAEA,SAASq+B,eACP/8B,SAEqB;AAAA,MADrBpD,SAA6C8C,UAAAT,SAAA,KAAAS,UAAA,CAAA,MAAAC,SAAAD,UAAA,CAAA,IAAA,CAAA;AAE7C,QAAMw+B,YAAYC,aAAa;AAE/B,aAAO9gC,sBAAQ,MAAM;AAEnB,QAAI2C,QAAQpB,QAAQoB,QAAQpB,SAAS,KAAK;AACjC,aAAAoB;IACT;AAGM,UAAAo+B,eAAep+B,QAAQnB,YAAYjC,OAAOiC;AAC1C,UAAAA,WAAWu/B,eAAeF,UAAUld,KAAMqd,OAAMA,EAAE3/B,OAAO0/B,YAAY,IAAI;AAC/E,UAAM51B,eAAe3J,YAAU,OAAA,SAAAA,SAAAgQ;AAG/B,QAAI,CAACrG,cAAc;AACV,aAAAxI;IACT;AAGA,WAAO;MAAC,GAAGA;MAASpB,MAAM4J;IAAY;KACrC,CAACxI,SAASpD,OAAOiC,UAAUq/B,SAAS,CAAC;AAC1C;AAEA,SAASV,kBACP9hC,OACAsE,SACAwI,cAC2B;AACpB,SAAA;IACL,GAAG9M;IACHkS,MAAM;MACJ,GAAGlS,MAAMkS;MACT5N,SAAS;QAAC,GAAGA;QAASpB,MAAM4J;MAAY;IAC1C;EAAA;AAEJ;AAEA,SAASy1B,oBAAoB;AACrB,QAAA;IACJlE;IACAvxB;IACAG;IACA21B;IACA9b;IACAwE;IACAiT;IACAsE;IACAzmB;IACAjJ;IACApO;MACEmI,gBAAgB;AACpB,QAAM;IAACxB,WAAW8mB;EAAe,IAAIC,cAAc;AACnD,QAAMqQ,WAAWC,UAAU;AAC3B,QAAM,CAACh8B,aAAa2D,cAAc,QAAIwB,uBAAgC,IAAI;AAC1E,QAAM,CAAC82B,eAAeC,gBAAgB,QAAI/2B,uBAAgC,IAAI;AAC9E,QAAM,CAAC2zB,mBAAmBqD,oBAAoB,QAAIh3B,uBAAgC,IAAI;AAChF,QAAA,CAACi3B,4BAA4B9Q,6BAA6B,QAAInmB,uBAClE,IAAA;AAEI,QAAAk3B,aAAah3B,eAAe42B,aAAa;AAC/C,QAAMK,UAAUD,cAAY,OAAA,SAAAA,WAAA3oB;AAE5B,QAAM6oB,0BAAsBvhC,0BACzBkF,UAAe;AACdqkB,eAAWrkB,IAAI;AACf6f,YAAQ7f,IAAI;EACd,GACA,CAACqkB,YAAYxE,OAAO,CAAA;AAGhB,QAAAtc,kBACJ+4B,oCAAoCt2B,YAAYa,+BAA+B;AAE3E,QAAAnI,WAAW69B,4BAA4Bv2B,YAAYa,+BAA+B;AAExF,MAAI,CAACqF,YAAY;AAEb,eAAA9S,wBAACqf,WAAA;MACClV;MACAhF,MAAM;MACNG;MACAyW;MACAG,WACIvB,yBAAA4K,6BAAA;QAAA1lB,UAAA,CAAA,+BACuBG,wBAAC,QAAA;UAAMH,UAAa4M;QAAA,CAAA,CAAA;OAC7C;MAEF+N,MAAK;MAEL3a,cAAA8a,yBAACI,OAAM;QAAAC,OAAO;QACXnb,UAAA,CACC4M,oBAAAkO,yBAACS,MAAK;UAAA7N,IAAG;UAAI1N,UAAA,CAAA,0CACuBG,wBAAC,QAAA;YAAMH,UAAa4M;UAAA,CAAA,GAAO,sEAAA;SAE/D,GAGD,CAACA,oBACAzM,wBAACob,MAAK;UAAA7N,IAAG;UAAI1N,UAEb;SAAA,GAGD2c,SAAS9X,aAENiW,yBAAA4K,6BAAA;UAAA1lB,UAAA,KAACG,wBAAAob,MAAA;YAAK7N,IAAG;YAAI1N,UAAgD;WAAA,OAC5DG,wBAAAma,MAAA;YAAKG,SAAS;YAAGD,UAAS;YAAOQ,QAAQ;YAAGC,QAAQ;YAAGN,MAAK;YAC3D3a,cAACG,wBAAAkb,MAAA;cAAKmL,UAAS;cAAOlI,MAAM,CAAC,GAAG,GAAG,CAAC;cACjCte,UAAK8T,KAAAV,UAAUvO,OAAO,MAAM,CAAC;YAChC,CAAA;WACF,CAAA;SACF,CAAA;OAEJ;IAAA,CAAA;EAGN;AAGE,aAAAiW,yBAACslB,yBAAA;IACCT;IACAjyB,IAAIyO;IACJ7R;IACA,eAAY;IACZhF,MAAM;IACNxC,IAAIoZ;IACJzW;IACAk9B;IACA7C,SAASt1B;IAETxK,UAAA,KAAAG,wBAACojC,gBAAe;MAAAzd,UAAU0a;MAA0BpK,SAASwM,SAASnR;MACpEzxB,cAAAG,wBAACid,MAAK;QAAAe,WAAU;QAAS7Y,MAAM;QAAGiV,QAAQ+X,kBAAkB,SAAY;QACtEtyB,cAAAG,wBAACsgC,2BAAA;UACC,eAAY;UACZ+C,qBAAqBrF;UACrBsF,qBAAqBpF;UACrBqF,YAAYN;UAEZpjC,cAAAG,wBAAC6xB,eAAA;YACCC,cAAckR,WAAW;YACzBjR,eAAewQ;YACf77B;YACAsrB;UAAA,CACF;QAAA,CAAA;OAEJ;IACF,CAAA,OAIAhyB,wBAACwzB,gBAAA;MACCC,qBAAqB;QAAC,CAAC8C,6BAA6B,GAAGuM;MAA0B;MAEjFjjC,cAAAA,wBAACujC,gBAAe;QAAAzd,UAAU0a;QAA0BpK,SAASwM,SAASnR;QACpEzxB,cAAAG,wBAACwjC,YAAW;UAAAl3B,KAAKs2B;UACf/iC,cAACG,wBAAAm/B,mBAAA;YAAkBC,eAAeyD;UAAA,CAAsB;QAC1D,CAAA;OACF;IAAA,CACF,OAAA,wBAECjjB,0BAAyB,CAAA,CAAA,CAAA;EAAA,CAAA;AAGhC;ACvUO,SAAS6jB,wBAAwB;AACtC,aACGzjC,wBAAAma,MAAA;IAAKC,QAAO;IACXva,cAACG,wBAAAid,MAAA;MAAKc,OAAM;MAAS3D,QAAO;MAAO6D,SAAQ;MAAS3D,SAAS;MAAGC,QAAO;MACrE1a,cAAAG,wBAACya,WAAU;QAAArV,OAAO;QAChBvF,cAAAG,wBAACma,MAAAA;UAAKG,SAAS;UAAGO,QAAQ;UAAGC,QAAQ;UAAGN,MAAK;UAC3C3a,cAAAA,yBAACod,MACC;YAAApd,UAAA,KAACG,wBAAA0N,KAAA;cACC7N,cAAAA,wBAACub,MAAK;gBAAA+C,MAAM;gBACVte,cAACG,wBAAA6oB,oBAAA,CAAA,CAAmB;eACtB;YACF,CAAA,OAAA,yBACC9N,OAAM;cAAA5V,MAAM;cAAG2jB,YAAY;cAAG9N,OAAO;cACpCnb,UAAA,KAAAG,wBAACob,MAAAA;gBAAK7N,IAAG;gBAAK4Q,MAAM;gBAAGkd,QAAO;gBAAOx7B,UAErC;cAAA,CAAA,OACAG,wBAACob,MAAAA;gBAAK7N,IAAG;gBAAI6O,OAAK;gBAAC+B,MAAM;gBAAGte,UAE5B;cAAA,CAAA,OAAA,wBACCub,MAAK;gBAAA7N,IAAG;gBAAI6O,OAAK;gBAAC+B,MAAM;gBACvBte,cAAAG,wBAAC,KAAA;kBACCqb,MAAK;kBACLE,QAAO;kBACPD,KAAI;kBACLzb,UAAA;gBAAA,CAAA;eAGH,CAAA;aACF,CAAA;UACF,CAAA;QAAA,CACF;MACF,CAAA;IACF,CAAA;EACF,CAAA;AAEJ;;;;;;ACvCA,IAAAmF;AAkBA,IAAM0+B,mBAAmBvqB,sCAAO3N,UAAU,EAAjBxG,OAAkBA,KAAAqU,WAAA,CAAA,8CAAA,CAAA,EAAA;AAK3C,IAAMsqB,mBAAe5D,iBAAAA,SAAS,OAAO;AAK9B,IAAM6D,eAAWjrB,mBAAK,SAASirB,UAASC,QAA+B;AAAA,MAA/B;IAACC;MAA8BD;AA5B9E7+B,MAAAA;AA6BE,QAAM;IAACqE,MAAMwW;EAAS,IAAIC,SAAS;AACnC,QAAMikB,SAASC,UAAU;AACzB,QAAM;IAAC7R;IAAiB8R;EAAkB,IAAIl3B,YAAY;AAC1D,QAAM;IAACyK;IAAeC;EAAa,IAAIL,iBAAiB;AAIxD,QAAM8sB,oBAAoB9iC,mBACxBM,0BAAaP,iBAAgB,OAAOA,YAAY6P,WAAW,UAAU,CAAA,CAAE,CAAA;AAGzE,QAAM,CAACgiB,eAAemR,gBAAgB,QAAIt4B,uBAAgC,IAAI;AAExE,QAAAu4B,yBAAqB1iC,0BAAY,MAAMuiC,mBAAmB,IAAI,GAAG,CAACA,kBAAkB,CAAC;AACrF,QAAAI,uBAAmB3iC,0BAAY,MAAMuiC,mBAAmB,KAAK,GAAG,CAACA,kBAAkB,CAAC;AAE1F/3B,8BAAU,MAAM;AAId,QAAIuL,cAAcvU,QAAQ;AACxB4gC,mBAAarsB,aAAa;IAC5B;EAAA,GACC,CAACqsB,cAAcrsB,aAAa,CAAC;AAEhCvL,8BAAU,MAAM;AACR,UAAAopB,sBAAuBvV,WAAyB;AAEhD,UAAA4jB,aAAa5jB,KAAK,GAAG;AACvBA,cAAM6C,eAAe;AAEX/C,kBAAA;UACRM,UAAU;UACVxd,IAAI;UACJ0d,QAAQ;UACRnE,OAAO;UACPkE,UAAU;QAAA,CACX;MACH;IAAA;AAGKnG,WAAAqqB,iBAAiB,WAAWhP,mBAAmB;AACtD,WAAO,MAAMrb,OAAOsqB,oBAAoB,WAAWjP,mBAAmB;EAAA,GACrE,CAACzV,SAAS,CAAC;AAEd,QAAM2kB,2BAA0Bx/B,MAAA++B,OAAOU,cAAP,OAAAz/B,SAAAA,IAAkB0/B,MAAMC,KAAKC,+BAAA;AAE7D,MAAI,CAACJ,yBAAyB;AAC5B,eAAA,wBAAQf,uBAAsB,CAAA,CAAA;EAChC;AAEA,aACG9oB,yBAAA6Y,gBAAA;IAAe/rB,SAASurB,iBAAiB;IACxCnzB,UAAA,KAAA8a,yBAAC+oB,kBAAA;MACCv+B,MAAM;MACNiV,QAAQ+X,kBAAkB,SAAY;MACtC7sB,UAAU;MACVmG,YAAY24B;MACZ14B,UAAU24B;MAETxkC,UAAA,CAAc2X,cAAAjQ,IACbs9B,YAAA;AAAA,YAAC;UACC/sB;UACAC;UACAvW;UACAoW;UACAnH,KAAKsL;UACLlK;UACAjR,OAAOkkC;UACPjkC,QAAQkkC;UACRn+B;UACA9F;UACAC;UACAkX;QACF,IAAA4sB;AAAA,mBACG7kC,wBAAAulB,aAAAA,UAAA;UACE1lB,UAASgS,SAAAmG,mBAAA,wBACPkF,aAAY;YAAAnB;YAAkBnV;YAAYqR;UAAA,CAAoB,QAE/DjY,wBAAC0e,cAAA;YACC5G;YACAtW;YACAZ,OAAOkkC;YACPjzB;YACAkG;YACAH;YACAmE;YACAlb,QAAQkkC;YACRjkC;YACA8F;YACAqR;YACAlX;UAAA,CACF;QAAA,GAjBW,GAAGgO,OAAS8C,SAAAmG,eAAe,YAAYnG,KAAKhP,MAAI,GAAA,EAAIkM,OAmBnE+1B,SAAA,CAAA;MAAA,CAEJ,GAGCttB,cAActU,UAAU,KAAKghC,yBAC3BlkC,wBAAAkd,aAAA;QAAYnB,SAAQ;OAAkB,CAAA;IAAA,CAE3C,OACC/b,wBAAA,OAAA;MAAI,eAAY;MAAGsM,KAAK63B;KAAkB,CAAA;EAC7C,CAAA;AAEJ,CAAC;ACzHM,SAASa,iBAAAA,QAA2D;AAAA,MAA1C;IAACC,MAAM;MAAChhC;;MAAkCihC;AACzE,QAAM;IAACC,kBAAkBC;EAAO,IAAIC,aAAa;AAC3C,QAAA,CAACC,WAAW,IAAIF;AACtB,QAAM;IAACxE;IAAQ2E;IAAqBC;EAAS,IAAIvhC,WAAW,CAAA;AAG5DiI,8BAAU,MAAM;AACdu5B,mBAAe,CAAA,CAAE;AACV,WAAA,MAAMA,eAAe,CAAA,CAAE;EAChC,GAAG,CAAA,CAAE;AAEC,QAAA,CAAC;IAACpuB;EAAA,GAAQC,QAAQ,QAAIzL,uBAA2B;IAACwL,OAAO;EAAA,CAAK;AAEhE,MAAAA;AAAc,eAAArX,wBAAC2Z,gBAAAA;MAAetC;IAAc,CAAA;AAEhD,aACGrX,wBAAA0lC,eAAA;IAAcC,SAASruB;IACtBzX,cAACG,wBAAA2gC,gBAAA;MAAe1zB,MAAM2zB,UAAU0E,YAAYr4B;MAC1CpN,cAAC8a,yBAAAirB,kBAAA;QAAiBL;QAA0CC;QAC1D3lC,UAAA,KAACG,wBAAA4jC,UAAA;UAASE,cAAc2B;QAAgB,CAAA,OAAA,wBACvC/sB,gBAAe,CAAA,CAAA,CAAA;OAClB;KACF;EACF,CAAA;AAEJ;;;;;",
  "names": ["RenderActionCollectionState", "props", "actions", "children", "actionProps", "onActionComplete", "jsx", "GetHookCollectionState", "onReset", "hooks", "args", "RenderBadgeCollectionState", "badges", "badgeProps", "rest", "emptyArray", "PaneRouterProvider", "flatIndex", "index", "params", "payload", "siblingIndex", "navigate", "navigateIntent", "useRouter", "routerState", "useRouterState", "routerPaneGroups", "useMemo", "panes", "groupIndex", "modifyCurrentGroup", "useCallback", "modifier", "currentGroup", "currentItem", "nextGroup", "nextPanes", "slice", "nextRouterState", "setTimeout", "setPayload", "nextPayload", "siblings", "item", "setParams", "nextParams", "handleEditReference", "_ref", "id", "parentRefPath", "type", "template", "pathToString", "ctx", "hasGroupSiblings", "length", "groupLength", "routerPanesState", "ChildLink", "BackLink", "ReferenceChildLink", "ParameterizedLink", "replaceCurrent", "opts", "arguments", "undefined", "closeCurrent", "filter", "sibling", "duplicateCurrent", "options", "duplicatedItem", "setView", "viewId", "restParams", "omit", "view", "PaneRouterContext", "Provider", "value", "_calcPaneResize", "cache", "left", "right", "deltaX", "_a", "_b", "sum", "flex", "width", "leftMinWidth", "minWidth", "PANE_DEFAULT_MIN_WIDTH", "rightMinWidth", "leftMaxWidth", "Math", "min", "maxWidth", "Infinity", "rightMaxWidth", "minDeltaX", "rightMinDeltaX", "maxDeltaX", "leftMaxDeltaX", "_deltaX", "max", "leftW", "rightW", "leftFlex", "rightFlex", "_getDOMPath", "rootElement", "el", "path", "e", "parentElement", "Array", "from", "childNodes", "indexOf", "unshift", "EMPTY_PATH", "_sortElements", "elements", "map", "WeakMap", "element", "set", "_sortByElementPath", "a", "b", "get", "len", "i", "aIndex", "bIndex", "sort", "createPaneLayoutController", "observers", "optionsMap", "userCollapsedElementSet", "Set", "rootWidth", "expandedElement", "resizeDataMap", "Map", "resizing", "collapse", "add", "_notifyObservers", "expand", "delete", "mount", "original", "push", "idx", "splice", "resize", "leftElement", "_c", "_d", "leftIndex", "leftOptions", "rightElement", "rightOptions", "offsetWidth", "leftResizeData", "rightResizeData", "currentMinWidth", "currentMaxWidth", "setRootElement", "nextRootElement", "setRootWidth", "nextRootWidth", "subscribe", "observer", "_elements", "dataMap", "lastElement", "collapsedWidth", "PANE_COLLAPSED_WIDTH", "remaingWidth", "isLast", "userCollapsed", "has", "sizeCollapsed", "collapsed", "resizeData", "data", "PaneLayout", "onCollapse", "onExpand", "restProps", "controller", "useState", "rootRect", "useElementRect", "state", "setState", "useEffect", "paneLayout", "PaneLayoutContext", "Root", "ref", "DocumentInspectorPanel", "documentId", "documentType", "usePane", "closeInspector", "inspector", "useDocumentPane", "features", "useDeskTool", "handleClose", "name", "createElement", "component", "onClose", "resizablePanes", "Resizable", "as", "DOCUMENT_INSPECTOR_MAX_WIDTH", "DOCUMENT_INSPECTOR_MIN_WIDTH", "Box", "PaneResolutionError", "Error", "constructor", "message", "context", "helpId", "cause", "_ref2", "__publicField", "randomIdCache", "assignId", "obj", "cachedValue", "nanoid", "bindCache", "memoBind", "methodKey", "boundMethods", "bound", "method", "concat", "bind", "isPromise", "thing", "then", "isSerializable", "isRecord", "serialize", "rethrowWithPaneResolutionErrors", "next", "unresolvedPane", "wrapWithPublishReplay", "pipe", "publishReplay", "refCount", "createPaneResolver", "middleware", "resolvePane", "isObservable", "switchMap", "result", "observableOf", "resolveIntent", "resolvedPaneCache", "memoize", "nextFn", "key", "join", "cachedResolvedPane", "fallbackEditorPanes", "traverse", "_ref3", "currentId", "intent", "parent", "levelIndex", "structureContext", "targetId", "schemaTypeName", "otherParams", "splitIndex", "resolvedPane", "firstValueFrom", "depthIndex", "canHandleIntent", "call", "pane", "child", "items", "Promise", "all", "nextLevelIndex", "resolve", "_id", "flat", "matchingPanes", "rootPaneNode", "closestPaneToRoot", "fallbackEditorChild", "nodeId", "replace", "resolveDocumentNode", "defaultDocumentBuilder", "schemaType", "initialValueTemplate", "hashContext", "stringify", "parentId", "serializeOptionsIndex", "serializeOptions", "serializeOptionsPath", "hashResolvedPaneMeta", "meta", "normalized", "routerPaneSibling", "paneNode", "JSON", "resolvePaneTree", "_ref4", "flattenedRouterPanes", "current", "resolvedPaneMeta", "loadingPanes", "restIndex", "loadingPanePath", "_", "currentIndex", "loadingPane", "nextStream", "startsWith", "nextResolvedPanes", "console", "warn", "generateHelpUrl", "createResolvedPaneNodeStream", "_ref5", "routerPanesStream", "initialCacheState", "cacheKeysByFlatIndex", "NEVER", "resolvedPanes$", "rawRouterPanes", "routerPanes", "flatMap", "routerPaneGroup", "startWith", "pairwise", "_ref6", "prev", "curr", "prevValue", "currValue", "isEqual", "diffIndex", "scan", "acc", "beforeDiffIndex", "afterDiffIndex", "keysToKeep", "keySet", "keysToDelete", "cacheKeySet", "_ref7", "nextPane", "prevPane", "distinctUntilChanged", "nextValue", "useRouterPanesStream", "routerStateSubject", "ReplaySubject", "routerPanes$", "asObservable", "_routerState", "useResolvedPanes", "error", "setError", "setData", "paneDataItems", "resolvedPanes", "reduce", "groupsLen", "itemId", "paneDataItem", "active", "childItemId", "LOADING_PANE", "selected", "subscription", "unsubscribe", "ensureDocumentIdAndType", "documentStore", "uuid", "resolvedType", "resolveTypeForDocument", "EMPTY_RECORD", "IntentResolver", "memo", "maybeIntent", "intentName", "useDocumentStore", "cancelled", "effect", "catch", "PathSegment", "styled", "span", "__template", "formatStack", "stack", "RegExp", "location", "host", "StructureError", "_ref8", "showStack", "SerializeError", "includes", "handleReload", "window", "reload", "Card", "height", "overflow", "padding", "sizing", "tone", "Container", "Heading", "jsxs", "marginTop", "radius", "shadow", "Stack", "space", "Label", "Code", "segment", "Text", "href", "rel", "target", "Button", "text", "icon", "SyncIcon", "onClick", "UnknownPane", "isSelected", "paneKey", "Pane", "PaneHeader", "title", "PaneContent", "muted", "getWaitMessages", "thresholds", "ms", "isDev", "src", "of", "merge", "_ref9", "mapTo", "delay", "DEFAULT_MESSAGE", "Content", "Flex", "LoadingPane", "messageProp", "resolvedMessage", "split", "currentMessage", "setCurrentMessage", "sub", "contentElement", "setContentElement", "mounted", "setMounted", "_raf2", "content", "align", "direction", "justify", "Spinner", "size", "displayName", "paneMap", "lazy", "document", "documentList", "list", "DeskToolPane", "PaneComponent", "Suspense", "fallback", "isActive", "_ref10", "_ref11", "prevParams", "prevPayload", "keys", "Object", "ErrorPane", "paddingX", "paddingY", "getOpErrorTitle", "op", "getOpSuccessTitle", "IGNORE_OPS", "DocumentOperationResults", "pushToast", "useToast", "event", "useDocumentOperationEvent", "prevEvent", "useRef", "closable", "duration", "status", "description", "useDeskToolSetting", "namespace", "defaultValue", "settingsStore", "useSettingsStore", "setValue", "deskToolSettings", "forNamespace", "settings", "forKey", "listen", "newValue", "VIEW_MODE_PARSED", "VIEW_MODE_RAW", "VIEW_MODES", "lru", "HLRU", "isExpanded", "keyPath", "cached", "isArray", "toggleExpanded", "selectElement", "sel", "getSelection", "range", "createRange", "removeAllRanges", "selectNodeContents", "addRange", "select", "currentTarget", "maybeSelectAll", "selectAll", "keyCode", "metaKey", "ctrlKey", "preventDefault", "isDocumentLike", "isString", "_type", "JSONInspectorWrapper", "div", "_ref12", "theme", "color", "fonts", "sanity", "css", "code", "family", "sizes", "fontSize", "lineHeight", "rem", "syntax", "property", "constant", "string", "boolean", "number", "Search", "onChange", "query", "handleChange", "TextInput", "SearchIcon", "placeholder", "InspectDialog", "onInspectClose", "dialogIdPrefix", "viewModeId", "onViewModeChange", "viewMode", "find", "mode", "setParsedViewMode", "setRawViewMode", "Dialog", "header", "Fragment", "DocTitle", "onClickOutside", "style", "position", "bottom", "zIndex", "TabList", "Tab", "label", "TabPanel", "outline", "JSONInspector", "search", "language", "tabIndex", "onKeyDown", "onDoubleClick", "onFocus", "TextOneLine", "ReferenceChangedBanner", "_e", "_f", "documentPreviewStore", "useDocumentPreviewStore", "usePaneRouter", "routerReferenceId", "parentGroup", "parentSibling", "hasHistoryOpen", "Boolean", "rev", "pathFromString", "referenceInfo", "useMemoObservable", "parentRefPathSegment", "loading", "publishedId", "getPublishedId", "keyedSegmentIndex", "findIndex", "p", "unstable_observePathsDocumentPair", "debounceTime", "_ref13", "draft", "published", "availability", "refValue", "pathGet", "snapshot", "handleReloadReference", "shouldHide", "available", "WarningOutlineIcon", "marginLeft", "CloseIcon", "PermissionCheckBanner", "_ref14", "granted", "requiredPermission", "currentUser", "useCurrentUser", "plural", "roles", "r", "ReadOnlyIcon", "array", "sep", "usePrevious", "LONG_ENOUGH_BUT_NOT_TOO_LONG", "useConditionalToast", "toast", "wasEnabled", "enabled", "ev", "FormView", "forwardRef", "hidden", "margins", "collapsedFieldSets", "collapsedPaths", "displayed", "editState", "fieldActions", "validation", "ready", "formState", "onBlur", "onSetCollapsedPath", "onPathOpen", "onSetCollapsedFieldSet", "onSetActiveFieldGroup", "presence", "useDocumentPresence", "patchChannel", "createPatchChannel", "isLocked", "transactionSyncLock", "pair", "documentEvents", "tap", "publish", "prepareMutationEvent", "prepareRebaseEvent", "hasRev", "_rev", "patches", "formRef", "setFormRef", "focusPath", "focusFirstDescendant", "setRef", "node", "paddingTop", "paddingBottom", "PresenceOverlay", "onSubmit", "FormBuilder", "__internal_fieldActions", "__internal_patchChannel", "changed", "focused", "groups", "members", "onFieldGroupSelect", "onPathBlur", "onPathFocus", "onSetFieldSetCollapsed", "onSetPathCollapsed", "readOnly", "Delay", "mutations", "mut", "patch", "fromMutationPatches", "origin", "remotePatches", "remoteMutations", "localPatches", "localMutations", "DocumentHeaderTabs", "activeViewId", "views", "tabPanelId", "DocumentHeaderTab", "handleClick", "disabled", "DocumentHeaderTitle", "connectionState", "documentValue", "subscribed", "useValuePreview", "DocumentPanelHeader", "_props", "onMenuAction", "onPaneClose", "onPaneSplit", "menuItems", "menuItemGroups", "timelineStore", "unstable_languageFilter", "useFieldActions", "menuNodes", "resolveMenuNodes", "actionHandler", "menuButtonNodes", "isMenuNodeButton", "contextMenuNodes", "isNotMenuNodeButton", "showTabs", "useTimelineSelector", "revTime", "showSplitPaneButton", "splitViews", "showSplitPaneCloseButton", "showPaneGroupCloseButton", "backButton", "tabs", "ArrowLeftIcon", "subActions", "TimelineMenu", "chunk", "placement", "gap", "languageFilterComponent", "PaneHeaderActionButton", "PaneContextMenuButton", "nodes", "Tooltip", "whiteSpace", "portal", "SplitVerticalIcon", "DocumentBox", "Scroller", "ScrollContainer", "_ref15", "$disabled", "DocumentPanel", "footerHeight", "isInspectOpen", "setDocumentPanelPortalElement", "permissions", "isPermissionsLoading", "layoutCollapsed", "usePaneLayout", "parentPortal", "usePortal", "headerElement", "setHeaderElement", "headerRect", "portalRef", "documentScrollElement", "setDocumentScrollElement", "formContainerElement", "_createdAt", "activeView", "portalElement", "splitPanes", "formViewHidden", "activeViewNode", "historical", "scrollTo", "inspectDialog", "showInspector", "PortalProvider", "__unstable_elements", "BoundaryElementProvider", "VirtualizerScrollInstanceProvider", "scrollElement", "containerElement", "POPOVER_FALLBACK_PLACEMENTS", "DIALOG_WIDTH_TO_UI_WIDTH", "small", "medium", "large", "full", "ConfirmDialog", "dialog", "referenceElement", "Popover", "ConfirmDialogContent", "fallbackPlacements", "open", "preventOverflow", "cancelButtonIcon", "cancelButtonText", "confirmButtonIcon", "confirmButtonText", "onCancel", "onConfirm", "isTopLayer", "useLayer", "setElement", "handleClickOutside", "handleGlobalKeyDown", "useClickOutside", "useGlobalKeyDown", "borderTop", "Grid", "columns", "ModalDialog", "dialogId", "useId", "footer", "LegacyLayerProvider", "zOffset", "__unstable_hideCloseButton", "showCloseButton", "PopoverDialog", "PopoverDialogContent", "DocumentActionPortalProvider", "DOCUMENT_PANEL_PORTAL_ELEMENT", "ActionStateDialog", "modalId", "unknownModal", "ActionMenuButton", "actionStates", "idPrefix", "buttonRef", "actionIndex", "setActionIndex", "setReferenceElement", "handleAction", "popoverProps", "currentAction", "MenuButton", "button", "ChevronDownIcon", "menu", "Menu", "actionState", "ActionMenuListItem", "onAction", "popover", "onHandle", "tooltipContent", "MenuItem", "marginRight", "isValidElement", "isValidElementType", "shortcut", "Hotkeys", "String", "s", "toUpperCase", "DocumentStatusBarActionsInner", "showMenu", "states", "firstActionState", "menuActionStates", "buttonElement", "setButtonElement", "toLowerCase", "LayerProvider", "DocumentStatusBarActions", "_ref16", "HistoryStatusBarActions", "revision", "historyActions", "HistoryRestoreAction", "_ref17", "BADGE_TONES", "primary", "success", "warning", "danger", "DocumentBadgesInner", "_ref18", "Inline", "badge", "Badge", "DocumentBadges", "_ref19", "PublishStatus", "lastPublished", "lastUpdated", "liveEdit", "lastPublishedTimeAgo", "useTimeAgo", "minimal", "agoSuffix", "lastPublishedTime", "lastUpdatedTimeAgo", "lastUpdatedTime", "a11yUpdatedAgo", "a11yPublishedAgo", "a11yLabel", "PlayIcon", "PublishIcon", "weight", "StyledMotionPath", "motion", "Circle", "circle", "fill", "cx", "cy", "strokeWidth", "Arrows", "d", "Checkmark", "Edit", "rotateAnimation", "keyframes", "RotateGroup", "g", "root", "syncing", "scale", "transition", "saved", "changes", "strokeDasharray", "strokeDashoffset", "opacity", "arrows", "checkmark", "pathLength", "edit", "AnimatedStatusIcon", "viewBox", "stroke", "variants", "initial", "animate", "ReviewButton", "React", "buttonProps", "ReviewChangesButton", "SYNCING_TIMEOUT", "SAVED_TIMEOUT", "DocumentSparkline", "changesOpen", "onHistoryClose", "onHistoryOpen", "syncState", "useSyncState", "_updatedAt", "rootFlexElement", "setRootFlexElement", "rootFlexRect", "setStatus", "showingRevision", "onOlderRevision", "isSyncing", "timerId", "clearTimeout", "useLayoutEffect", "reviewButton", "publishStatus", "DocumentActionsBox", "DocumentStatusBar", "actionsBoxRef", "paddingLeft", "paddingRight", "KeyboardShortcutResponder", "actionsBoxElement", "activeIndex", "onActionStart", "rootRef", "activeAction", "handleKeyDown", "matchingStates", "isHotkey", "matchingState", "DocumentActionShortcuts", "setActiveIndex", "onComplete", "_ref20", "DIALOG_PROVIDER_POSITION", "StyledChangeConnectorRoot", "ChangeConnectorRoot", "DocumentPane", "parentSourceName", "useSource", "SourceProvider", "source", "DocumentPaneInner", "resolveNewDocumentOptions", "paneRouter", "usePaneOptions", "isLoaded", "isDocumentLoaded", "useDocumentType", "templateItems", "templatePermissions", "isTemplatePermissionsLoading", "useTemplatePermissions", "providerProps", "mergeDocumentType", "childParams", "routerPanesStateLength", "activePath", "DocumentPaneProvider", "ReferenceInputOptionsProvider", "EditReferenceLinkComponent", "onEditReference", "initialValueTemplateItems", "InnerDocumentPane", "templates", "useTemplates", "templateName", "t", "inspectOpen", "onKeyUp", "zOffsets", "useZIndex", "footerElement", "setFooterElement", "setActionsBoxElement", "documentPanelPortalElement", "footerRect", "footerH", "onConnectorSetFocus", "DOCUMENT_PANEL_INITIAL_MIN_WIDTH", "DOCUMENT_PANEL_MIN_WIDTH", "DialogProvider", "isReviewChangesOpen", "onOpenReviewChanges", "onSetFocus", "PaneFooter", "NoDocumentTypesScreen", "StyledPaneLayout", "isSaveHotkey", "DeskTool", "_ref21", "onPaneChange", "schema", "useSchema", "setLayoutCollapsed", "isResolvingIntent", "setPortalElement", "handleRootCollapse", "handleRootExpand", "addEventListener", "removeEventListener", "hasDefinedDocumentTypes", "_original", "types", "some", "_isCustomDocumentTypeDefinition", "_ref22", "paneIndex", "paneParams", "DeskToolBoundary", "tool", "_ref23", "unstable_sources", "sources", "useWorkspace", "firstSource", "defaultDocumentNode", "structure", "setActivePanes", "ErrorBoundary", "onCatch", "DeskToolProvider"]
}
